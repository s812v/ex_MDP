import sys
import time
from typing import List

import settings
from app import AlgoSimulator, AlgoMinimal
from entities.assets.direction import Direction
from entities.connection.rpi_client import RPiClient
from entities.connection.rpi_server import RPiServer
from entities.grid.obstacle import Obstacle


def parse_obstacle_data(data) -> List[Obstacle]:
    obs = []
    for obstacle_params in data:
        obs.append(Obstacle(obstacle_params[0],
                            obstacle_params[1],
                            Direction(obstacle_params[2]),
                            obstacle_params[3]))
    # [[x, y, orient, index], [x, y, orient, index]]
    return obs


def run_simulator():
    # Fill in obstacle positions with respect to lower bottom left corner.
    # (x-coordinate, y-coordinate, Direction, index)
    obstacles = [[105, 75, 90, 0], [175, 25, 180, 1], [175, 175, 180, 2], [75, 125, 180, 3], [15, 185, -90, 4], [65, 25, 180, 5], [85, 185, -90, 6], [185, 95, 180, 7]]
    obs = parse_obstacle_data(obstacles)
    app = AlgoSimulator(obs)
    order = app.init()
    print(order)
    cmds = app.robot.convert_all_commands()
    print(cmds)
    app.execute()


def run_minimal(also_run_simulator):
    # Create a client to connect to the RPi.
    print(f"Attempting to connect to {settings.RPI_HOST}:{settings.RPI_PORT}")
    client = RPiClient(settings.RPI_HOST, settings.RPI_PORT)
    # Wait to connect to RPi.
    while True:
        try:
            client.connect()
            break
        except OSError:
            pass
        except KeyboardInterrupt:
            client.close()
            sys.exit(1)
    print("Connected to RPi!\n")

    print("Waiting to receive obstacle data from RPi...")

    obstacle_data: list = client.receive_data()
    print("Got data from RPi:")
    print(obstacle_data)
    path_hist = []

    obstacles = parse_obstacle_data(obstacle_data)
    # if also_run_simulator:
    #     app = AlgoSimulator(obstacles)
    #     app.init()
    #     app.execute()
    #     path_hist = app.robot.get_all_path_hist_by_command()
    # app = AlgoMinimal(obstacles)
    # app.init()
    # order = app.execute()

    # Send the list of commands over.
    print("Sending list of commands to RPi...")
    # commands = app.robot.convert_all_commands()
    # order_and_commands = [order, commands, path_hist]
    order_and_commands = [[2, 1, 3, 4], ['S/020', 'R/000', 'S/020', 'L/000', 'P', 'RB000', 'SB050', 'R/000', 'R/000', 'P', 'LB000', 'SB080', 'L/000', 'P', 'RB000', 'L/000', 'P', 'finish'], [[(15, 15, 'N'), (15, 15, 'N'), (15, 16, 'N'), (15, 17, 'N'), (15, 18, 'N'), (15, 19, 'N'), (15, 19, 'N'), (15, 20, 'N'), (15, 21, 'N'), (15, 22, 'N'), (15, 23, 'N'), (15, 24, 'N'), (15, 24, 'N'), (15, 25, 'N'), (15, 26, 'N'), (15, 27, 'N'), (15, 28, 'N'), (15, 29, 'N'), (15, 29, 'N'), (15, 30, 'N'), (15, 31, 'N'), (15, 32, 'N'), (15, 33, 'N'), (15, 34, 'N')], [(15, 34, 'N'), (15, 35, 'N'), (15, 36, 'N'), (15, 37, 'N'), (15, 38, 'N'), (15, 39, 'N'), (16, 39, 'N'), (16, 40, 'N'), (17, 41, 'N'), (17, 41, 'N'), (18, 42, 'E'), (18, 42, 'E'), (19, 43, 'E'), (20, 43, 'E'), (20, 44, 'E'), (21, 44, 'E'), (22, 44, 'E'), (23, 44, 'E'), (24, 44, 'E')], [(24, 44, 'E'), (25, 44, 'E'), (26, 44, 'E'), (27, 44, 'E'), (28, 44, 'E'), (29, 44, 'E'), (29, 44, 'E'), (30, 44, 'E'), (31, 44, 'E'), (32, 44, 'E'), (33, 44, 'E'), (34, 44, 'E'), (34, 44, 'E'), (35, 44, 'E'), (36, 44, 'E'), (37, 44, 'E'), (38, 44, 'E'), (39, 44, 'E'), (40, 44, 'E'), (40, 44, 'E'), (41, 44, 'E'), (42, 44, 'E'), (43, 44, 'E'), (44, 44, 'E')], [(45, 44, 'E'), (45, 45, 'E'), (46, 45, 'E'), (47, 45, 'E'), (48, 45, 'E'), (49, 45, 'E'), (49, 46, 'E'), (50, 46, 'E'), (51, 47, 'E'), (51, 47, 'E'), (52, 48, 'N'), (52, 48, 'N'), (53, 49, 'N'), (53, 50, 'N'), (54, 50, 'N'), (54, 51, 'N'), (54, 52, 'N'), (54, 53, 'N'), (54, 54, 'N')], [(55, 54, 'N')], [(55, 54, 'N'), (55, 53, 'N'), (55, 52, 'N'), (55, 51, 'N'), (55, 50, 'N'), (56, 50, 'N'), (56, 49, 'N'), (57, 48, 'N'), (57, 48, 'N'), (58, 47, 'W'), (58, 47, 'W'), (59, 46, 'W'), (60, 46, 'W'), (60, 45, 'W'), (61, 45, 'W'), (62, 45, 'W'), (63, 45, 'W'), (64, 45, 'W')], [(64, 44, 'W'), (65, 44, 'W'), (66, 44, 'W'), (67, 44, 'W'), (68, 44, 'W'), (69, 44, 'W'), (69, 44, 'W'), (70, 44, 'W'), (71, 44, 'W'), (72, 44, 'W'), (73, 44, 'W'), (74, 44, 'W'), (74, 44, 'W'), (75, 44, 'W'), (76, 44, 'W'), (77, 44, 'W'), (78, 44, 'W'), (79, 44, 'W'), (79, 44, 'W'), (80, 44, 'W'), (81, 44, 'W'), (82, 44, 'W'), (83, 44, 'W'), (84, 44, 'W'), (84, 44, 'W'), (85, 44, 'W'), (86, 44, 'W'), (87, 44, 'W'), (88, 44, 'W'), (89, 44, 'W'), (89, 44, 'W'), (90, 44, 'W'), (91, 44, 'W'), (92, 44, 'W'), (93, 44, 'W'), (94, 44, 'W'), (94, 44, 'W'), (95, 44, 'W'), (96, 44, 'W'), (97, 44, 'W'), (98, 44, 'W'), (99, 44, 'W'), (99, 44, 'W'), (100, 44, 'W'), (101, 44, 'W'), (102, 44, 'W'), (103, 44, 'W'), (104, 44, 'W'), (104, 44, 'W'), (105, 44, 'W'), (106, 44, 'W'), (107, 44, 'W'), (108, 44, 'W'), (109, 44, 'W'), (109, 44, 'W'), (110, 44, 'W'), (111, 44, 'W'), (112, 44, 'W'), (113, 44, 'W'), (114, 44, 'W')], [(114, 44, 'W'), (114, 45, 'W'), (113, 45, 'W'), (112, 45, 'W'), (111, 45, 'W'), (110, 45, 'W'), (110, 46, 'W'), (109, 46, 'W'), (108, 47, 'W'), (108, 47, 'W'), (107, 48, 'N'), (107, 48, 'N'), (106, 49, 'N'), (106, 50, 'N'), (105, 50, 'N'), (105, 51, 'N'), (105, 52, 'N'), (105, 53, 'N'), (105, 54, 'N')], [(104, 54, 'N'), (105, 55, 'N'), (105, 56, 'N'), (105, 57, 'N'), (105, 58, 'N'), (105, 59, 'N'), (106, 59, 'N'), (106, 60, 'N'), (107, 61, 'N'), (107, 61, 'N'), (108, 62, 'E'), (108, 62, 'E'), (109, 63, 'E'), (110, 63, 'E'), (110, 64, 'E'), (111, 64, 'E'), (112, 64, 'E'), (113, 64, 'E'), (114, 64, 'E')], [(114, 64, 'E')], [(114, 65, 'E'), (113, 65, 'E'), (112, 65, 'E'), (111, 65, 'E'), (110, 65, 'E'), (110, 66, 'E'), (109, 66, 'E'), (108, 67, 'E'), (108, 67, 'E'), (107, 68, 'S'), (107, 68, 'S'), (106, 69, 'S'), (106, 70, 'S'), (105, 70, 'S'), (105, 71, 'S'), (105, 72, 'S'), (105, 73, 'S'), (105, 74, 'S')], [(104, 74, 'S'), (104, 75, 'S'), (104, 76, 'S'), (104, 77, 'S'), (104, 78, 'S'), (104, 79, 'S'), (104, 79, 'S'), (104, 80, 'S'), (104, 81, 'S'), (104, 82, 'S'), (104, 83, 'S'), (104, 84, 'S'), (104, 84, 'S'), (104, 85, 'S'), (104, 86, 'S'), (104, 87, 'S'), (104, 88, 'S'), (104, 89, 'S'), (104, 89, 'S'), (104, 90, 'S'), (104, 91, 'S'), (104, 92, 'S'), (104, 93, 'S'), (104, 94, 'S'), (104, 94, 'S'), (104, 95, 'S'), (104, 96, 'S'), (104, 97, 'S'), (104, 98, 'S'), (104, 99, 'S'), (104, 99, 'S'), (104, 100, 'S'), (104, 101, 'S'), (104, 102, 'S'), (104, 103, 'S'), (104, 104, 'S'), (104, 104, 'S'), (104, 105, 'S'), (104, 106, 'S'), (104, 107, 'S'), (104, 108, 'S'), (104, 109, 'S'), (104, 109, 'S'), (104, 110, 'S'), (104, 111, 'S'), (104, 112, 'S'), (104, 113, 'S'), (104, 114, 'S'), (104, 114, 'S'), (104, 115, 'S'), (104, 116, 'S'), (104, 117, 'S'), (104, 118, 'S'), (104, 119, 'S'), (104, 119, 'S'), (104, 120, 'S'), (104, 121, 'S'), (104, 122, 'S'), (104, 123, 'S'), (104, 124, 'S'), (104, 124, 'S'), (104, 125, 'S'), (104, 126, 'S'), (104, 127, 'S'), (104, 128, 'S'), (104, 129, 'S'), (104, 129, 'S'), (104, 130, 'S'), (104, 131, 'S'), (104, 132, 'S'), (104, 133, 'S'), (104, 134, 'S'), (104, 134, 'S'), (104, 135, 'S'), (104, 136, 'S'), (104, 137, 'S'), (104, 138, 'S'), (104, 139, 'S'), (104, 139, 'S'), (104, 140, 'S'), (104, 141, 'S'), (104, 142, 'S'), (104, 143, 'S'), (104, 144, 'S'), (104, 144, 'S'), (104, 145, 'S'), (104, 146, 'S'), (104, 147, 'S'), (104, 148, 'S'), (104, 149, 'S'), (104, 149, 'S'), (104, 150, 'S'), (104, 151, 'S'), (104, 152, 'S'), (104, 153, 'S'), (104, 154, 'S')], [(104, 154, 'S'), (105, 154, 'S'), (105, 153, 'S'), (105, 152, 'S'), (105, 151, 'S'), (105, 150, 'S'), (106, 150, 'S'), (106, 149, 'S'), (107, 148, 'S'), (107, 148, 'S'), (108, 147, 'E'), (108, 147, 'E'), (109, 146, 'E'), (110, 146, 'E'), (110, 145, 'E'), (111, 145, 'E'), (112, 145, 'E'), (113, 145, 'E'), (114, 145, 'E')], [(114, 144, 'E')], [(114, 144, 'E'), (113, 144, 'E'), (112, 144, 'E'), (111, 144, 'E'), (110, 144, 'E'), (110, 143, 'E'), (109, 143, 'E'), (108, 142, 'E'), (108, 142, 'E'), (107, 141, 'N'), (107, 141, 'N'), (106, 140, 'N'), (106, 139, 'N'), (105, 139, 'N'), (105, 138, 'N'), (105, 137, 'N'), (105, 136, 'N'), (105, 135, 'N')], [(104, 134, 'N'), (104, 135, 'N'), (104, 136, 'N'), (104, 137, 'N'), (104, 138, 'N'), (104, 139, 'N'), (103, 139, 'N'), (103, 140, 'N'), (102, 141, 'N'), (102, 141, 'N'), (101, 142, 'W'), (101, 142, 'W'), (100, 143, 'W'), (99, 143, 'W'), (99, 144, 'W'), (98, 144, 'W'), (97, 144, 'W'), (96, 144, 'W'), (95, 144, 'W')], [(94, 145, 'W')]]]
    client.send_message(target='ARD', data_type='Commands', data=commands)
    client.close()

def run_rpi():
    while True:
        run_minimal(False)
        time.sleep(5)


if __name__ == '__main__':
    # run_simulator()
    run_minimal(True)