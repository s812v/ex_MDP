
MDP2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b448  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca0  0800b5d8  0800b5d8  0001b5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c278  0800c278  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800c278  0800c278  0001c278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c280  0800c280  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c280  0800c280  0001c280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c284  0800c284  0001c284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800c288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          000051e4  20000068  20000068  00020068  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000524c  2000524c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c34f  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003998  00000000  00000000  0003c426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001900  00000000  00000000  0003fdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013a2  00000000  00000000  000416c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003c8a  00000000  00000000  00042a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c8c5  00000000  00000000  000466ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d84c1  00000000  00000000  00062fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007188  00000000  00000000  0013b474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001425fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b5c0 	.word	0x0800b5c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800b5c0 	.word	0x0800b5c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b970 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	460d      	mov	r5, r1
 8000be4:	4604      	mov	r4, r0
 8000be6:	460f      	mov	r7, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14a      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4694      	mov	ip, r2
 8000bf0:	d965      	bls.n	8000cbe <__udivmoddi4+0xe2>
 8000bf2:	fab2 f382 	clz	r3, r2
 8000bf6:	b143      	cbz	r3, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	f1c3 0220 	rsb	r2, r3, #32
 8000c00:	409f      	lsls	r7, r3
 8000c02:	fa20 f202 	lsr.w	r2, r0, r2
 8000c06:	4317      	orrs	r7, r2
 8000c08:	409c      	lsls	r4, r3
 8000c0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0e:	fa1f f58c 	uxth.w	r5, ip
 8000c12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c16:	0c22      	lsrs	r2, r4, #16
 8000c18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c20:	fb01 f005 	mul.w	r0, r1, r5
 8000c24:	4290      	cmp	r0, r2
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x62>
 8000c28:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c30:	f080 811c 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c34:	4290      	cmp	r0, r2
 8000c36:	f240 8119 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c3a:	3902      	subs	r1, #2
 8000c3c:	4462      	add	r2, ip
 8000c3e:	1a12      	subs	r2, r2, r0
 8000c40:	b2a4      	uxth	r4, r4
 8000c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4e:	fb00 f505 	mul.w	r5, r0, r5
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x90>
 8000c56:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5e:	f080 8107 	bcs.w	8000e70 <__udivmoddi4+0x294>
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	f240 8104 	bls.w	8000e70 <__udivmoddi4+0x294>
 8000c68:	4464      	add	r4, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c70:	1b64      	subs	r4, r4, r5
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11e      	cbz	r6, 8000c7e <__udivmoddi4+0xa2>
 8000c76:	40dc      	lsrs	r4, r3
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0xbc>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80ed 	beq.w	8000e66 <__udivmoddi4+0x28a>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d149      	bne.n	8000d34 <__udivmoddi4+0x158>
 8000ca0:	42ab      	cmp	r3, r5
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xce>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2be>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb65 0203 	sbc.w	r2, r5, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4617      	mov	r7, r2
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d0e2      	beq.n	8000c7e <__udivmoddi4+0xa2>
 8000cb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cbc:	e7df      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xe6>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f382 	clz	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x210>
 8000ccc:	1a8a      	subs	r2, r1, r2
 8000cce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd2:	fa1f fe8c 	uxth.w	lr, ip
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ce0:	0c22      	lsrs	r2, r4, #16
 8000ce2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce6:	fb0e f005 	mul.w	r0, lr, r5
 8000cea:	4290      	cmp	r0, r2
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cee:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	f200 80cb 	bhi.w	8000e94 <__udivmoddi4+0x2b8>
 8000cfe:	4645      	mov	r5, r8
 8000d00:	1a12      	subs	r2, r2, r0
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d08:	fb07 2210 	mls	r2, r7, r0, r2
 8000d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d10:	fb0e fe00 	mul.w	lr, lr, r0
 8000d14:	45a6      	cmp	lr, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x14e>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x14c>
 8000d22:	45a6      	cmp	lr, r4
 8000d24:	f200 80bb 	bhi.w	8000e9e <__udivmoddi4+0x2c2>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	eba4 040e 	sub.w	r4, r4, lr
 8000d2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d32:	e79f      	b.n	8000c74 <__udivmoddi4+0x98>
 8000d34:	f1c1 0720 	rsb	r7, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d42:	fa05 f401 	lsl.w	r4, r5, r1
 8000d46:	fa20 f307 	lsr.w	r3, r0, r7
 8000d4a:	40fd      	lsrs	r5, r7
 8000d4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d7c:	f080 8088 	bcs.w	8000e90 <__udivmoddi4+0x2b4>
 8000d80:	42a5      	cmp	r5, r4
 8000d82:	f240 8085 	bls.w	8000e90 <__udivmoddi4+0x2b4>
 8000d86:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8a:	4464      	add	r4, ip
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	b29d      	uxth	r5, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dac:	d26c      	bcs.n	8000e88 <__udivmoddi4+0x2ac>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	d96a      	bls.n	8000e88 <__udivmoddi4+0x2ac>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	4464      	add	r4, ip
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fba3 9502 	umull	r9, r5, r3, r2
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	46c8      	mov	r8, r9
 8000dc6:	46ae      	mov	lr, r5
 8000dc8:	d356      	bcc.n	8000e78 <__udivmoddi4+0x29c>
 8000dca:	d053      	beq.n	8000e74 <__udivmoddi4+0x298>
 8000dcc:	b156      	cbz	r6, 8000de4 <__udivmoddi4+0x208>
 8000dce:	ebb0 0208 	subs.w	r2, r0, r8
 8000dd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dda:	40ca      	lsrs	r2, r1
 8000ddc:	40cc      	lsrs	r4, r1
 8000dde:	4317      	orrs	r7, r2
 8000de0:	e9c6 7400 	strd	r7, r4, [r6]
 8000de4:	4618      	mov	r0, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dec:	f1c3 0120 	rsb	r1, r3, #32
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	fa20 f201 	lsr.w	r2, r0, r1
 8000df8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dfc:	409d      	lsls	r5, r3
 8000dfe:	432a      	orrs	r2, r5
 8000e00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e04:	fa1f fe8c 	uxth.w	lr, ip
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e16:	fb00 f50e 	mul.w	r5, r0, lr
 8000e1a:	428d      	cmp	r5, r1
 8000e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x258>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2a:	d22f      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e2c:	428d      	cmp	r5, r1
 8000e2e:	d92d      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	1b49      	subs	r1, r1, r5
 8000e36:	b292      	uxth	r2, r2
 8000e38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e44:	fb05 f10e 	mul.w	r1, r5, lr
 8000e48:	4291      	cmp	r1, r2
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x282>
 8000e4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e54:	d216      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000e56:	4291      	cmp	r1, r2
 8000e58:	d914      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000e5a:	3d02      	subs	r5, #2
 8000e5c:	4462      	add	r2, ip
 8000e5e:	1a52      	subs	r2, r2, r1
 8000e60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e64:	e738      	b.n	8000cd8 <__udivmoddi4+0xfc>
 8000e66:	4631      	mov	r1, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000e6c:	4639      	mov	r1, r7
 8000e6e:	e6e6      	b.n	8000c3e <__udivmoddi4+0x62>
 8000e70:	4610      	mov	r0, r2
 8000e72:	e6fb      	b.n	8000c6c <__udivmoddi4+0x90>
 8000e74:	4548      	cmp	r0, r9
 8000e76:	d2a9      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e78:	ebb9 0802 	subs.w	r8, r9, r2
 8000e7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e80:	3b01      	subs	r3, #1
 8000e82:	e7a3      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e84:	4645      	mov	r5, r8
 8000e86:	e7ea      	b.n	8000e5e <__udivmoddi4+0x282>
 8000e88:	462b      	mov	r3, r5
 8000e8a:	e794      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8c:	4640      	mov	r0, r8
 8000e8e:	e7d1      	b.n	8000e34 <__udivmoddi4+0x258>
 8000e90:	46d0      	mov	r8, sl
 8000e92:	e77b      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e94:	3d02      	subs	r5, #2
 8000e96:	4462      	add	r2, ip
 8000e98:	e732      	b.n	8000d00 <__udivmoddi4+0x124>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xd8>
 8000e9e:	4464      	add	r4, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e742      	b.n	8000d2a <__udivmoddi4+0x14e>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000eac:	f002 fb76 	bl	800359c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000eb0:	f000 f890 	bl	8000fd4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000eb4:	f000 fb88 	bl	80015c8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000eb8:	f000 f8ea 	bl	8001090 <MX_I2C1_Init>
	MX_TIM1_Init();
 8000ebc:	f000 f916 	bl	80010ec <MX_TIM1_Init>
	MX_TIM2_Init();
 8000ec0:	f000 f9b2 	bl	8001228 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000ec4:	f000 fa04 	bl	80012d0 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000ec8:	f000 fa56 	bl	8001378 <MX_TIM4_Init>
	MX_TIM8_Init();
 8000ecc:	f000 faa8 	bl	8001420 <MX_TIM8_Init>
	MX_USART3_UART_Init();
 8000ed0:	f000 fb50 	bl	8001574 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 8000ed4:	f002 fad6 	bl	8003484 <OLED_Init>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 5);
 8000ed8:	2205      	movs	r2, #5
 8000eda:	4924      	ldr	r1, [pc, #144]	; (8000f6c <main+0xc4>)
 8000edc:	4824      	ldr	r0, [pc, #144]	; (8000f70 <main+0xc8>)
 8000ede:	f006 f92e 	bl	800713e <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000ee2:	f007 f8f9 	bl	80080d8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000ee6:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <main+0xcc>)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4823      	ldr	r0, [pc, #140]	; (8000f78 <main+0xd0>)
 8000eec:	f007 f93e 	bl	800816c <osThreadNew>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a22      	ldr	r2, [pc, #136]	; (8000f7c <main+0xd4>)
 8000ef4:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of motorTask */
	motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000ef6:	4a22      	ldr	r2, [pc, #136]	; (8000f80 <main+0xd8>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4822      	ldr	r0, [pc, #136]	; (8000f84 <main+0xdc>)
 8000efc:	f007 f936 	bl	800816c <osThreadNew>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <main+0xe0>)
 8000f04:	6013      	str	r3, [r2, #0]

	/* creation of OLEDTask */
	OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000f06:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <main+0xe4>)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4821      	ldr	r0, [pc, #132]	; (8000f90 <main+0xe8>)
 8000f0c:	f007 f92e 	bl	800816c <osThreadNew>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <main+0xec>)
 8000f14:	6013      	str	r3, [r2, #0]

	/* creation of gyroTask */
	gyroTaskHandle = osThreadNew(StartGyroTask, NULL, &gyroTask_attributes);
 8000f16:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <main+0xf0>)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4820      	ldr	r0, [pc, #128]	; (8000f9c <main+0xf4>)
 8000f1c:	f007 f926 	bl	800816c <osThreadNew>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a1f      	ldr	r2, [pc, #124]	; (8000fa0 <main+0xf8>)
 8000f24:	6013      	str	r3, [r2, #0]

	/* creation of ultrasonicTask */
	ultrasonicTaskHandle = osThreadNew(StartUltrasonicTask, NULL,
 8000f26:	4a1f      	ldr	r2, [pc, #124]	; (8000fa4 <main+0xfc>)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	481f      	ldr	r0, [pc, #124]	; (8000fa8 <main+0x100>)
 8000f2c:	f007 f91e 	bl	800816c <osThreadNew>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a1e      	ldr	r2, [pc, #120]	; (8000fac <main+0x104>)
 8000f34:	6013      	str	r3, [r2, #0]
			&ultrasonicTask_attributes);

	/* creation of communicateTask */
	communicateTaskHandle = osThreadNew(StartCommunicateTask, NULL,
 8000f36:	4a1e      	ldr	r2, [pc, #120]	; (8000fb0 <main+0x108>)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	481e      	ldr	r0, [pc, #120]	; (8000fb4 <main+0x10c>)
 8000f3c:	f007 f916 	bl	800816c <osThreadNew>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <main+0x110>)
 8000f44:	6013      	str	r3, [r2, #0]
			&communicateTask_attributes);

	/* creation of encoderRTask */
	encoderRTaskHandle = osThreadNew(StartEncoderRTask, NULL,
 8000f46:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <main+0x114>)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	481d      	ldr	r0, [pc, #116]	; (8000fc0 <main+0x118>)
 8000f4c:	f007 f90e 	bl	800816c <osThreadNew>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <main+0x11c>)
 8000f54:	6013      	str	r3, [r2, #0]
			&encoderRTask_attributes);

	/* creation of encoderLTask */
	encoderLTaskHandle = osThreadNew(StartEncoderLTask, NULL,
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <main+0x120>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	481c      	ldr	r0, [pc, #112]	; (8000fcc <main+0x124>)
 8000f5c:	f007 f906 	bl	800816c <osThreadNew>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a1b      	ldr	r2, [pc, #108]	; (8000fd0 <main+0x128>)
 8000f64:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000f66:	f007 f8db 	bl	8008120 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000f6a:	e7fe      	b.n	8000f6a <main+0xc2>
 8000f6c:	200002a4 	.word	0x200002a4
 8000f70:	20000240 	.word	0x20000240
 8000f74:	0800b6a8 	.word	0x0800b6a8
 8000f78:	08001ed1 	.word	0x08001ed1
 8000f7c:	20000284 	.word	0x20000284
 8000f80:	0800b6cc 	.word	0x0800b6cc
 8000f84:	08001ef1 	.word	0x08001ef1
 8000f88:	20000288 	.word	0x20000288
 8000f8c:	0800b6f0 	.word	0x0800b6f0
 8000f90:	080023d5 	.word	0x080023d5
 8000f94:	2000028c 	.word	0x2000028c
 8000f98:	0800b714 	.word	0x0800b714
 8000f9c:	080025a9 	.word	0x080025a9
 8000fa0:	20000290 	.word	0x20000290
 8000fa4:	0800b738 	.word	0x0800b738
 8000fa8:	08002749 	.word	0x08002749
 8000fac:	20000294 	.word	0x20000294
 8000fb0:	0800b75c 	.word	0x0800b75c
 8000fb4:	08002771 	.word	0x08002771
 8000fb8:	20000298 	.word	0x20000298
 8000fbc:	0800b780 	.word	0x0800b780
 8000fc0:	080029b5 	.word	0x080029b5
 8000fc4:	2000029c 	.word	0x2000029c
 8000fc8:	0800b7a4 	.word	0x0800b7a4
 8000fcc:	08002a3d 	.word	0x08002a3d
 8000fd0:	200002a0 	.word	0x200002a0

08000fd4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	; 0x50
 8000fd8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	2230      	movs	r2, #48	; 0x30
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f009 fe12 	bl	800ac0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <SystemClock_Config+0xb4>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a21      	ldr	r2, [pc, #132]	; (8001088 <SystemClock_Config+0xb4>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <SystemClock_Config+0xb4>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <SystemClock_Config+0xb8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <SystemClock_Config+0xb8>)
 800101e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <SystemClock_Config+0xb8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001030:	2302      	movs	r3, #2
 8001032:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	2301      	movs	r3, #1
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001038:	2310      	movs	r3, #16
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001040:	f107 0320 	add.w	r3, r7, #32
 8001044:	4618      	mov	r0, r3
 8001046:	f003 fe71 	bl	8004d2c <HAL_RCC_OscConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x80>
		Error_Handler();
 8001050:	f001 fd38 	bl	8002ac4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001054:	230f      	movs	r3, #15
 8001056:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f004 f8d4 	bl	800521c <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xaa>
		Error_Handler();
 800107a:	f001 fd23 	bl	8002ac4 <Error_Handler>
	}
}
 800107e:	bf00      	nop
 8001080:	3750      	adds	r7, #80	; 0x50
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40007000 	.word	0x40007000

08001090 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_I2C1_Init+0x50>)
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <MX_I2C1_Init+0x54>)
 8001098:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_I2C1_Init+0x50>)
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x58>)
 800109e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010b2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010ce:	f002 fe6f 	bl	8003db0 <HAL_I2C_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80010d8:	f001 fcf4 	bl	8002ac4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000084 	.word	0x20000084
 80010e4:	40005400 	.word	0x40005400
 80010e8:	000186a0 	.word	0x000186a0

080010ec <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b096      	sub	sp, #88	; 0x58
 80010f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80010f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001100:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	615a      	str	r2, [r3, #20]
 800111c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2220      	movs	r2, #32
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f009 fd71 	bl	800ac0c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <MX_TIM1_Init+0x134>)
 800112c:	4a3d      	ldr	r2, [pc, #244]	; (8001224 <MX_TIM1_Init+0x138>)
 800112e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 8001130:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <MX_TIM1_Init+0x134>)
 8001132:	22a0      	movs	r2, #160	; 0xa0
 8001134:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <MX_TIM1_Init+0x134>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 800113c:	4b38      	ldr	r3, [pc, #224]	; (8001220 <MX_TIM1_Init+0x134>)
 800113e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001142:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001144:	4b36      	ldr	r3, [pc, #216]	; (8001220 <MX_TIM1_Init+0x134>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800114a:	4b35      	ldr	r3, [pc, #212]	; (8001220 <MX_TIM1_Init+0x134>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001150:	4b33      	ldr	r3, [pc, #204]	; (8001220 <MX_TIM1_Init+0x134>)
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001156:	4832      	ldr	r0, [pc, #200]	; (8001220 <MX_TIM1_Init+0x134>)
 8001158:	f004 fa40 	bl	80055dc <HAL_TIM_Base_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001162:	f001 fcaf 	bl	8002ac4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800116c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001170:	4619      	mov	r1, r3
 8001172:	482b      	ldr	r0, [pc, #172]	; (8001220 <MX_TIM1_Init+0x134>)
 8001174:	f005 f8b4 	bl	80062e0 <HAL_TIM_ConfigClockSource>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM1_Init+0x96>
		Error_Handler();
 800117e:	f001 fca1 	bl	8002ac4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001182:	4827      	ldr	r0, [pc, #156]	; (8001220 <MX_TIM1_Init+0x134>)
 8001184:	f004 fa79 	bl	800567a <HAL_TIM_PWM_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM1_Init+0xa6>
		Error_Handler();
 800118e:	f001 fc99 	bl	8002ac4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800119a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800119e:	4619      	mov	r1, r3
 80011a0:	481f      	ldr	r0, [pc, #124]	; (8001220 <MX_TIM1_Init+0x134>)
 80011a2:	f005 fe0b 	bl	8006dbc <HAL_TIMEx_MasterConfigSynchronization>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80011ac:	f001 fc8a 	bl	8002ac4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b0:	2360      	movs	r3, #96	; 0x60
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 80011c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011cc:	220c      	movs	r2, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	4813      	ldr	r0, [pc, #76]	; (8001220 <MX_TIM1_Init+0x134>)
 80011d2:	f004 ffc3 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 80011dc:	f001 fc72 	bl	8002ac4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4619      	mov	r1, r3
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <MX_TIM1_Init+0x134>)
 8001204:	f005 fe56 	bl	8006eb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM1_Init+0x126>
			!= HAL_OK) {
		Error_Handler();
 800120e:	f001 fc59 	bl	8002ac4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <MX_TIM1_Init+0x134>)
 8001214:	f001 fe38 	bl	8002e88 <HAL_TIM_MspPostInit>

}
 8001218:	bf00      	nop
 800121a:	3758      	adds	r7, #88	; 0x58
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200000d8 	.word	0x200000d8
 8001224:	40010000 	.word	0x40010000

08001228 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2224      	movs	r2, #36	; 0x24
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f009 fce8 	bl	800ac0c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <MX_TIM2_Init+0xa4>)
 8001246:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800124a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <MX_TIM2_Init+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <MX_TIM2_Init+0xa4>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_TIM2_Init+0xa4>)
 800125a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800125e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_TIM2_Init+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_TIM2_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800126c:	2303      	movs	r3, #3
 800126e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001274:	2301      	movs	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 800127c:	230a      	movs	r3, #10
 800127e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001284:	2301      	movs	r3, #1
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 800128c:	230a      	movs	r3, #10
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_TIM2_Init+0xa4>)
 8001298:	f004 fc88 	bl	8005bac <HAL_TIM_Encoder_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x7e>
		Error_Handler();
 80012a2:	f001 fc0f 	bl	8002ac4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <MX_TIM2_Init+0xa4>)
 80012b4:	f005 fd82 	bl	8006dbc <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80012be:	f001 fc01 	bl	8002ac4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3730      	adds	r7, #48	; 0x30
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000120 	.word	0x20000120

080012d0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2224      	movs	r2, #36	; 0x24
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f009 fc94 	bl	800ac0c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80012ec:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_TIM3_Init+0xa0>)
 80012ee:	4a21      	ldr	r2, [pc, #132]	; (8001374 <MX_TIM3_Init+0xa4>)
 80012f0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_TIM3_Init+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_TIM3_Init+0xa0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_TIM3_Init+0xa0>)
 8001300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001304:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM3_Init+0xa0>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_TIM3_Init+0xa0>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001312:	2303      	movs	r3, #3
 8001314:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800131a:	2301      	movs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8001322:	230a      	movs	r3, #10
 8001324:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800132a:	2301      	movs	r3, #1
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 8001332:	230a      	movs	r3, #10
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	4619      	mov	r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <MX_TIM3_Init+0xa0>)
 800133e:	f004 fc35 	bl	8005bac <HAL_TIM_Encoder_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0x7c>
		Error_Handler();
 8001348:	f001 fbbc 	bl	8002ac4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_TIM3_Init+0xa0>)
 800135a:	f005 fd2f 	bl	8006dbc <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001364:	f001 fbae 	bl	8002ac4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3730      	adds	r7, #48	; 0x30
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000168 	.word	0x20000168
 8001374:	40000400 	.word	0x40000400

08001378 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001388:	463b      	mov	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_TIM4_Init+0xa0>)
 8001396:	4a21      	ldr	r2, [pc, #132]	; (800141c <MX_TIM4_Init+0xa4>)
 8001398:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16 - 1;
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_TIM4_Init+0xa0>)
 800139c:	220f      	movs	r2, #15
 800139e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <MX_TIM4_Init+0xa0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <MX_TIM4_Init+0xa0>)
 80013a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ac:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_TIM4_Init+0xa0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <MX_TIM4_Init+0xa0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK) {
 80013ba:	4817      	ldr	r0, [pc, #92]	; (8001418 <MX_TIM4_Init+0xa0>)
 80013bc:	f004 fa7e 	bl	80058bc <HAL_TIM_IC_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM4_Init+0x52>
		Error_Handler();
 80013c6:	f001 fb7d 	bl	8002ac4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	4619      	mov	r1, r3
 80013d8:	480f      	ldr	r0, [pc, #60]	; (8001418 <MX_TIM4_Init+0xa0>)
 80013da:	f005 fcef 	bl	8006dbc <HAL_TIMEx_MasterConfigSynchronization>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM4_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 80013e4:	f001 fb6e 	bl	8002ac4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013e8:	2300      	movs	r3, #0
 80013ea:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013ec:	2301      	movs	r3, #1
 80013ee:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80013f8:	463b      	mov	r3, r7
 80013fa:	2200      	movs	r2, #0
 80013fc:	4619      	mov	r1, r3
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <MX_TIM4_Init+0xa0>)
 8001400:	f004 fe10 	bl	8006024 <HAL_TIM_IC_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM4_Init+0x96>
		Error_Handler();
 800140a:	f001 fb5b 	bl	8002ac4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200001b0 	.word	0x200001b0
 800141c:	40000800 	.word	0x40000800

08001420 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b096      	sub	sp, #88	; 0x58
 8001424:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001426:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001434:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2220      	movs	r2, #32
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f009 fbd7 	bl	800ac0c <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800145e:	4b43      	ldr	r3, [pc, #268]	; (800156c <MX_TIM8_Init+0x14c>)
 8001460:	4a43      	ldr	r2, [pc, #268]	; (8001570 <MX_TIM8_Init+0x150>)
 8001462:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001464:	4b41      	ldr	r3, [pc, #260]	; (800156c <MX_TIM8_Init+0x14c>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b40      	ldr	r3, [pc, #256]	; (800156c <MX_TIM8_Init+0x14c>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 8001470:	4b3e      	ldr	r3, [pc, #248]	; (800156c <MX_TIM8_Init+0x14c>)
 8001472:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001476:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	4b3c      	ldr	r3, [pc, #240]	; (800156c <MX_TIM8_Init+0x14c>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <MX_TIM8_Init+0x14c>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <MX_TIM8_Init+0x14c>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 800148a:	4838      	ldr	r0, [pc, #224]	; (800156c <MX_TIM8_Init+0x14c>)
 800148c:	f004 f8a6 	bl	80055dc <HAL_TIM_Base_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM8_Init+0x7a>
		Error_Handler();
 8001496:	f001 fb15 	bl	8002ac4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80014a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014a4:	4619      	mov	r1, r3
 80014a6:	4831      	ldr	r0, [pc, #196]	; (800156c <MX_TIM8_Init+0x14c>)
 80014a8:	f004 ff1a 	bl	80062e0 <HAL_TIM_ConfigClockSource>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM8_Init+0x96>
		Error_Handler();
 80014b2:	f001 fb07 	bl	8002ac4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80014b6:	482d      	ldr	r0, [pc, #180]	; (800156c <MX_TIM8_Init+0x14c>)
 80014b8:	f004 f8df 	bl	800567a <HAL_TIM_PWM_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM8_Init+0xa6>
		Error_Handler();
 80014c2:	f001 faff 	bl	8002ac4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80014ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d2:	4619      	mov	r1, r3
 80014d4:	4825      	ldr	r0, [pc, #148]	; (800156c <MX_TIM8_Init+0x14c>)
 80014d6:	f005 fc71 	bl	8006dbc <HAL_TIMEx_MasterConfigSynchronization>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80014e0:	f001 faf0 	bl	8002ac4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e4:	2360      	movs	r3, #96	; 0x60
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014f0:	2300      	movs	r3, #0
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 8001500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001504:	2200      	movs	r2, #0
 8001506:	4619      	mov	r1, r3
 8001508:	4818      	ldr	r0, [pc, #96]	; (800156c <MX_TIM8_Init+0x14c>)
 800150a:	f004 fe27 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM8_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8001514:	f001 fad6 	bl	8002ac4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	2204      	movs	r2, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4812      	ldr	r0, [pc, #72]	; (800156c <MX_TIM8_Init+0x14c>)
 8001522:	f004 fe1b 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 800152c:	f001 faca 	bl	8002ac4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001548:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4619      	mov	r1, r3
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <MX_TIM8_Init+0x14c>)
 8001554:	f005 fcae 	bl	8006eb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM8_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 800155e:	f001 fab1 	bl	8002ac4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3758      	adds	r7, #88	; 0x58
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200001f8 	.word	0x200001f8
 8001570:	40010400 	.word	0x40010400

08001574 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <MX_USART3_UART_Init+0x50>)
 800157c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 80015ac:	f005 fce8 	bl	8006f80 <HAL_UART_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80015b6:	f001 fa85 	bl	8002ac4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000240 	.word	0x20000240
 80015c4:	40004800 	.word	0x40004800

080015c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	; 0x30
 80015cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	4b5b      	ldr	r3, [pc, #364]	; (8001750 <MX_GPIO_Init+0x188>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a5a      	ldr	r2, [pc, #360]	; (8001750 <MX_GPIO_Init+0x188>)
 80015e8:	f043 0310 	orr.w	r3, r3, #16
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b58      	ldr	r3, [pc, #352]	; (8001750 <MX_GPIO_Init+0x188>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	4b54      	ldr	r3, [pc, #336]	; (8001750 <MX_GPIO_Init+0x188>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a53      	ldr	r2, [pc, #332]	; (8001750 <MX_GPIO_Init+0x188>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b51      	ldr	r3, [pc, #324]	; (8001750 <MX_GPIO_Init+0x188>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b4d      	ldr	r3, [pc, #308]	; (8001750 <MX_GPIO_Init+0x188>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a4c      	ldr	r2, [pc, #304]	; (8001750 <MX_GPIO_Init+0x188>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b4a      	ldr	r3, [pc, #296]	; (8001750 <MX_GPIO_Init+0x188>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b46      	ldr	r3, [pc, #280]	; (8001750 <MX_GPIO_Init+0x188>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a45      	ldr	r2, [pc, #276]	; (8001750 <MX_GPIO_Init+0x188>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b43      	ldr	r3, [pc, #268]	; (8001750 <MX_GPIO_Init+0x188>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <MX_GPIO_Init+0x188>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a3e      	ldr	r2, [pc, #248]	; (8001750 <MX_GPIO_Init+0x188>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <MX_GPIO_Init+0x188>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <MX_GPIO_Init+0x188>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a37      	ldr	r2, [pc, #220]	; (8001750 <MX_GPIO_Init+0x188>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <MX_GPIO_Init+0x188>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8001686:	2200      	movs	r2, #0
 8001688:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800168c:	4831      	ldr	r0, [pc, #196]	; (8001754 <MX_GPIO_Init+0x18c>)
 800168e:	f002 fb5b 	bl	8003d48 <HAL_GPIO_WritePin>
	OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin,
 8001692:	2200      	movs	r2, #0
 8001694:	213c      	movs	r1, #60	; 0x3c
 8001696:	4830      	ldr	r0, [pc, #192]	; (8001758 <MX_GPIO_Init+0x190>)
 8001698:	f002 fb56 	bl	8003d48 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a2:	482e      	ldr	r0, [pc, #184]	; (800175c <MX_GPIO_Init+0x194>)
 80016a4:	f002 fb50 	bl	8003d48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ae:	482c      	ldr	r0, [pc, #176]	; (8001760 <MX_GPIO_Init+0x198>)
 80016b0:	f002 fb4a 	bl	8003d48 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
	 LED3_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin
 80016b4:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80016b8:	61fb      	str	r3, [r7, #28]
			| OLED_DC_Pin | LED3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	4821      	ldr	r0, [pc, #132]	; (8001754 <MX_GPIO_Init+0x18c>)
 80016ce:	f002 f99f 	bl	8003a10 <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin;
 80016d2:	233c      	movs	r3, #60	; 0x3c
 80016d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016de:	2302      	movs	r3, #2
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4619      	mov	r1, r3
 80016e8:	481b      	ldr	r0, [pc, #108]	; (8001758 <MX_GPIO_Init+0x190>)
 80016ea:	f002 f991 	bl	8003a10 <HAL_GPIO_Init>

	/*Configure GPIO pin : Buzzer_Pin */
	GPIO_InitStruct.Pin = Buzzer_Pin;
 80016ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	4815      	ldr	r0, [pc, #84]	; (800175c <MX_GPIO_Init+0x194>)
 8001708:	f002 f982 	bl	8003a10 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_PB_Pin */
	GPIO_InitStruct.Pin = USER_PB_Pin;
 800170c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001710:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001712:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001716:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4619      	mov	r1, r3
 8001722:	480f      	ldr	r0, [pc, #60]	; (8001760 <MX_GPIO_Init+0x198>)
 8001724:	f002 f974 	bl	8003a10 <HAL_GPIO_Init>

	/*Configure GPIO pin : Trigger_Pin */
	GPIO_InitStruct.Pin = Trigger_Pin;
 8001728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	4807      	ldr	r0, [pc, #28]	; (8001760 <MX_GPIO_Init+0x198>)
 8001742:	f002 f965 	bl	8003a10 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001746:	bf00      	nop
 8001748:	3730      	adds	r7, #48	; 0x30
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40021000 	.word	0x40021000
 8001758:	40020000 	.word	0x40020000
 800175c:	40020400 	.word	0x40020400
 8001760:	40020c00 	.word	0x40020c00

08001764 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// communication
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	/* to prevent unused argument(s) compilation warning */
	UNUSED(huart);
	HAL_UART_Receive_IT(&huart3, aRxBuffer, 5);
 800176c:	2205      	movs	r2, #5
 800176e:	4904      	ldr	r1, [pc, #16]	; (8001780 <HAL_UART_RxCpltCallback+0x1c>)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <HAL_UART_RxCpltCallback+0x20>)
 8001772:	f005 fce4 	bl	800713e <HAL_UART_Receive_IT>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200002a4 	.word	0x200002a4
 8001784:	20000240 	.word	0x20000240

08001788 <delay>:

// ultrasonic
void delay(uint16_t time) {
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <delay+0x30>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim4) < time)
 800179a:	bf00      	nop
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <delay+0x30>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d3f9      	bcc.n	800179c <delay+0x14>
		;
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	200001b0 	.word	0x200001b0
 80017bc:	00000000 	.word	0x00000000

080017c0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7f1b      	ldrb	r3, [r3, #28]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	f040 808a 	bne.w	80018e6 <HAL_TIM_IC_CaptureCallback+0x126>
		if (Is_First_Captured == 0) {
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d11b      	bne.n	8001812 <HAL_TIM_IC_CaptureCallback+0x52>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017da:	2100      	movs	r1, #0
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f004 fe47 	bl	8006470 <HAL_TIM_ReadCapturedValue>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b45      	ldr	r3, [pc, #276]	; (80018fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 80017e8:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6a1a      	ldr	r2, [r3, #32]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 020a 	bic.w	r2, r2, #10
 80017fe:	621a      	str	r2, [r3, #32]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6a1a      	ldr	r2, [r3, #32]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0202 	orr.w	r2, r2, #2
 800180e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8001810:	e069      	b.n	80018e6 <HAL_TIM_IC_CaptureCallback+0x126>
		} else if (Is_First_Captured == 1) {
 8001812:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d165      	bne.n	80018e6 <HAL_TIM_IC_CaptureCallback+0x126>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800181a:	2100      	movs	r1, #0
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f004 fe27 	bl	8006470 <HAL_TIM_ReadCapturedValue>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001828:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8001832:	4b33      	ldr	r3, [pc, #204]	; (8001900 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	dd0a      	ble.n	8001854 <HAL_TIM_IC_CaptureCallback+0x94>
				Difference = IC_Val2 - IC_Val1;
 800183e:	4b30      	ldr	r3, [pc, #192]	; (8001900 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b29a      	uxth	r2, r3
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	b29b      	uxth	r3, r3
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	b29a      	uxth	r2, r3
 800184e:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001850:	801a      	strh	r2, [r3, #0]
 8001852:	e011      	b.n	8001878 <HAL_TIM_IC_CaptureCallback+0xb8>
			else if (IC_Val1 > IC_Val2) {
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b29      	ldr	r3, [pc, #164]	; (8001900 <HAL_TIM_IC_CaptureCallback+0x140>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	dd0b      	ble.n	8001878 <HAL_TIM_IC_CaptureCallback+0xb8>
				Difference = (65535 - IC_Val1) + IC_Val2;
 8001860:	4b27      	ldr	r3, [pc, #156]	; (8001900 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	b29b      	uxth	r3, r3
 8001870:	3b01      	subs	r3, #1
 8001872:	b29a      	uxth	r2, r3
 8001874:	4b23      	ldr	r3, [pc, #140]	; (8001904 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001876:	801a      	strh	r2, [r3, #0]
			uDistance = Difference * .0343 / 2;
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_TIM_IC_CaptureCallback+0x144>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe49 	bl	8000514 <__aeabi_i2d>
 8001882:	a31b      	add	r3, pc, #108	; (adr r3, 80018f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe feae 	bl	80005e8 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800189c:	f7fe ffce 	bl	800083c <__aeabi_ddiv>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f960 	bl	8000b6c <__aeabi_d2uiz>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_TIM_IC_CaptureCallback+0x148>)
 80018b2:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0;
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6a1a      	ldr	r2, [r3, #32]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 020a 	bic.w	r2, r2, #10
 80018c8:	621a      	str	r2, [r3, #32]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6a12      	ldr	r2, [r2, #32]
 80018d4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0202 	bic.w	r2, r2, #2
 80018e4:	60da      	str	r2, [r3, #12]
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	04816f00 	.word	0x04816f00
 80018f4:	3fa18fc5 	.word	0x3fa18fc5
 80018f8:	20000300 	.word	0x20000300
 80018fc:	20000304 	.word	0x20000304
 8001900:	20000308 	.word	0x20000308
 8001904:	2000030c 	.word	0x2000030c
 8001908:	2000030e 	.word	0x2000030e
 800190c:	200001b0 	.word	0x200001b0

08001910 <HCSR04_Read>:

void HCSR04_Read(void) //Call when u want to get reading from US
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800191a:	480b      	ldr	r0, [pc, #44]	; (8001948 <HCSR04_Read+0x38>)
 800191c:	f002 fa14 	bl	8003d48 <HAL_GPIO_WritePin>
	delay(10);
 8001920:	200a      	movs	r0, #10
 8001922:	f7ff ff31 	bl	8001788 <delay>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800192c:	4806      	ldr	r0, [pc, #24]	; (8001948 <HCSR04_Read+0x38>)
 800192e:	f002 fa0b 	bl	8003d48 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HCSR04_Read+0x3c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <HCSR04_Read+0x3c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0202 	orr.w	r2, r2, #2
 8001940:	60da      	str	r2, [r3, #12]
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40020c00 	.word	0x40020c00
 800194c:	200001b0 	.word	0x200001b0

08001950 <moveCarStraight>:

// movement
void moveCarStraight(double distance) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	ed87 0b00 	vstr	d0, [r7]
	distance = distance * 75 * 0.99;
 800195a:	a337      	add	r3, pc, #220	; (adr r3, 8001a38 <moveCarStraight+0xe8>)
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001964:	f7fe fe40 	bl	80005e8 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	a333      	add	r3, pc, #204	; (adr r3, 8001a40 <moveCarStraight+0xf0>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe fe37 	bl	80005e8 <__aeabi_dmul>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	e9c7 2300 	strd	r2, r3, [r7]
	pwmVal_servo = SERVOCENTER;
 8001982:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <moveCarStraight+0xc8>)
 8001984:	2296      	movs	r2, #150	; 0x96
 8001986:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 8001988:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800198c:	f006 fc80 	bl	8008290 <osDelay>
	e_brake = 0;
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <moveCarStraight+0xcc>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <moveCarStraight+0xd0>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
	rightEncoderVal = 75000;
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <moveCarStraight+0xd4>)
 800199e:	4a22      	ldr	r2, [pc, #136]	; (8001a28 <moveCarStraight+0xd8>)
 80019a0:	601a      	str	r2, [r3, #0]
	leftEncoderVal = 75000;
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <moveCarStraight+0xdc>)
 80019a4:	4a20      	ldr	r2, [pc, #128]	; (8001a28 <moveCarStraight+0xd8>)
 80019a6:	601a      	str	r2, [r3, #0]
	rightTarget = 75000;
 80019a8:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <moveCarStraight+0xe0>)
 80019aa:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <moveCarStraight+0xd8>)
 80019ac:	601a      	str	r2, [r3, #0]
	leftTarget = 75000;
 80019ae:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <moveCarStraight+0xe4>)
 80019b0:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <moveCarStraight+0xd8>)
 80019b2:	601a      	str	r2, [r3, #0]
	rightTarget += distance;
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <moveCarStraight+0xe0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdab 	bl	8000514 <__aeabi_i2d>
 80019be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019c2:	f7fe fc5b 	bl	800027c <__adddf3>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f8a5 	bl	8000b1c <__aeabi_d2iz>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <moveCarStraight+0xe0>)
 80019d6:	6013      	str	r3, [r2, #0]
	leftTarget += distance;
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <moveCarStraight+0xe4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fd99 	bl	8000514 <__aeabi_i2d>
 80019e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019e6:	f7fe fc49 	bl	800027c <__adddf3>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f7ff f893 	bl	8000b1c <__aeabi_d2iz>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <moveCarStraight+0xe4>)
 80019fa:	6013      	str	r3, [r2, #0]
	while (finishCheck())
 80019fc:	bf00      	nop
 80019fe:	f000 f99f 	bl	8001d40 <finishCheck>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1fa      	bne.n	80019fe <moveCarStraight+0xae>
		;
//	if (stopped == 1) {
//		vTaskResume(ultrasonicTaskHandle);
//		stopped = 0;
//	}
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	f3af 8000 	nop.w
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	200002bc 	.word	0x200002bc
 8001a20:	200002b8 	.word	0x200002b8
 8001a24:	200002c0 	.word	0x200002c0
 8001a28:	000124f8 	.word	0x000124f8
 8001a2c:	200002c4 	.word	0x200002c4
 8001a30:	200002c8 	.word	0x200002c8
 8001a34:	200002cc 	.word	0x200002cc
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	4052c000 	.word	0x4052c000
 8001a40:	7ae147ae 	.word	0x7ae147ae
 8001a44:	3fefae14 	.word	0x3fefae14

08001a48 <buzzerBeep>:

void buzzerBeep()
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer On
 8001a4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a50:	4806      	ldr	r0, [pc, #24]	; (8001a6c <buzzerBeep+0x24>)
 8001a52:	f002 f992 	bl	8003d7a <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8001a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a5a:	f001 fe11 	bl	8003680 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer Off
 8001a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a62:	4802      	ldr	r0, [pc, #8]	; (8001a6c <buzzerBeep+0x24>)
 8001a64:	f002 f989 	bl	8003d7a <HAL_GPIO_TogglePin>
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40020400 	.word	0x40020400

08001a70 <moveCarRight>:
	e_brake = 1;
	pwmVal_servo = SERVOCENTER;
	osDelay(300);
}

void moveCarRight(double angle) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVORIGHT;
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <moveCarRight+0x54>)
 8001a7c:	22d2      	movs	r2, #210	; 0xd2
 8001a7e:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 8001a80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a84:	f006 fc04 	bl	8008290 <osDelay>
	e_brake = 0;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <moveCarRight+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <moveCarRight+0x5c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <moveCarRight+0x60>)
 8001a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a9e:	f7fe fbeb 	bl	8000278 <__aeabi_dsub>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	490a      	ldr	r1, [pc, #40]	; (8001ad0 <moveCarRight+0x60>)
 8001aa8:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck())
 8001aac:	bf00      	nop
 8001aae:	f000 f947 	bl	8001d40 <finishCheck>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1fa      	bne.n	8001aae <moveCarRight+0x3e>
		;
//	if (stopped == 1) {
//		vTaskResume(ultrasonicTaskHandle);
//		stopped = 0;
//	}
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	200002bc 	.word	0x200002bc
 8001acc:	200002b8 	.word	0x200002b8
 8001ad0:	200002d0 	.word	0x200002d0

08001ad4 <moveCarLeft>:

void moveCarLeft(double angle) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVOLEFT;
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <moveCarLeft+0x54>)
 8001ae0:	2269      	movs	r2, #105	; 0x69
 8001ae2:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 8001ae4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ae8:	f006 fbd2 	bl	8008290 <osDelay>
	e_brake = 0;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <moveCarLeft+0x58>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <moveCarLeft+0x5c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <moveCarLeft+0x60>)
 8001afa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b02:	f7fe fbbb 	bl	800027c <__adddf3>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	490a      	ldr	r1, [pc, #40]	; (8001b34 <moveCarLeft+0x60>)
 8001b0c:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck())
 8001b10:	bf00      	nop
 8001b12:	f000 f915 	bl	8001d40 <finishCheck>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1fa      	bne.n	8001b12 <moveCarLeft+0x3e>
		;
//	if (stopped == 1) {
//		vTaskResume(ultrasonicTaskHandle);
//		stopped = 0;
//	}
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	200002bc 	.word	0x200002bc
 8001b30:	200002b8 	.word	0x200002b8
 8001b34:	200002d0 	.word	0x200002d0

08001b38 <PID_Control>:

// error correction
int PID_Control(int error, int right) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
	if (right) { //rightMotor
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d018      	beq.n	8001b7a <PID_Control+0x42>
		if (error > 0) { //go forward
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	dd0a      	ble.n	8001b64 <PID_Control+0x2c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2110      	movs	r1, #16
 8001b52:	4835      	ldr	r0, [pc, #212]	; (8001c28 <PID_Control+0xf0>)
 8001b54:	f002 f8f8 	bl	8003d48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	4832      	ldr	r0, [pc, #200]	; (8001c28 <PID_Control+0xf0>)
 8001b5e:	f002 f8f3 	bl	8003d48 <HAL_GPIO_WritePin>
 8001b62:	e022      	b.n	8001baa <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001b64:	2200      	movs	r2, #0
 8001b66:	2110      	movs	r1, #16
 8001b68:	482f      	ldr	r0, [pc, #188]	; (8001c28 <PID_Control+0xf0>)
 8001b6a:	f002 f8ed 	bl	8003d48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2120      	movs	r1, #32
 8001b72:	482d      	ldr	r0, [pc, #180]	; (8001c28 <PID_Control+0xf0>)
 8001b74:	f002 f8e8 	bl	8003d48 <HAL_GPIO_WritePin>
 8001b78:	e017      	b.n	8001baa <PID_Control+0x72>
		}
	} else { //leftMotor
		if (error > 0) { //go forward
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	dd0a      	ble.n	8001b96 <PID_Control+0x5e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001b80:	2201      	movs	r2, #1
 8001b82:	2108      	movs	r1, #8
 8001b84:	4828      	ldr	r0, [pc, #160]	; (8001c28 <PID_Control+0xf0>)
 8001b86:	f002 f8df 	bl	8003d48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	4826      	ldr	r0, [pc, #152]	; (8001c28 <PID_Control+0xf0>)
 8001b90:	f002 f8da 	bl	8003d48 <HAL_GPIO_WritePin>
 8001b94:	e009      	b.n	8001baa <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001b96:	2200      	movs	r2, #0
 8001b98:	2108      	movs	r1, #8
 8001b9a:	4823      	ldr	r0, [pc, #140]	; (8001c28 <PID_Control+0xf0>)
 8001b9c:	f002 f8d4 	bl	8003d48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	4820      	ldr	r0, [pc, #128]	; (8001c28 <PID_Control+0xf0>)
 8001ba6:	f002 f8cf 	bl	8003d48 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bfb8      	it	lt
 8001bb0:	425b      	neglt	r3, r3
 8001bb2:	607b      	str	r3, [r7, #4]
	if (error > 2000) {
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001bba:	dd02      	ble.n	8001bc2 <PID_Control+0x8a>
		return 3000;
 8001bbc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001bc0:	e02d      	b.n	8001c1e <PID_Control+0xe6>
	} else if (error > 500) {
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bc8:	dd02      	ble.n	8001bd0 <PID_Control+0x98>
		return 2500;
 8001bca:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001bce:	e026      	b.n	8001c1e <PID_Control+0xe6>
	} else if (error > 200) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2bc8      	cmp	r3, #200	; 0xc8
 8001bd4:	dd02      	ble.n	8001bdc <PID_Control+0xa4>
		return 1700;
 8001bd6:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001bda:	e020      	b.n	8001c1e <PID_Control+0xe6>
	} else if (error > 100) {
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	dd02      	ble.n	8001be8 <PID_Control+0xb0>
		return 1000;
 8001be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be6:	e01a      	b.n	8001c1e <PID_Control+0xe6>
	} else if (error > 2) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	dd07      	ble.n	8001bfe <PID_Control+0xc6>
		times_acceptable++;
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <PID_Control+0xf4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <PID_Control+0xf4>)
 8001bf6:	6013      	str	r3, [r2, #0]
		return 700;
 8001bf8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001bfc:	e00f      	b.n	8001c1e <PID_Control+0xe6>
	} else if (error >= 1) {
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	dd06      	ble.n	8001c12 <PID_Control+0xda>
		times_acceptable++;
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <PID_Control+0xf4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <PID_Control+0xf4>)
 8001c0c:	6013      	str	r3, [r2, #0]
		return 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e005      	b.n	8001c1e <PID_Control+0xe6>
	} else {
		times_acceptable++;
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <PID_Control+0xf4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <PID_Control+0xf4>)
 8001c1a:	6013      	str	r3, [r2, #0]
		return 0;
 8001c1c:	2300      	movs	r3, #0
	}
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	200002b8 	.word	0x200002b8

08001c30 <PID_Angle>:

int PID_Angle(double errord, int right) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	ed87 0b02 	vstr	d0, [r7, #8]
 8001c3a:	6078      	str	r0, [r7, #4]
	int error = (int) (errord * 10);
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	4b3c      	ldr	r3, [pc, #240]	; (8001d34 <PID_Angle+0x104>)
 8001c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c46:	f7fe fccf 	bl	80005e8 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe ff63 	bl	8000b1c <__aeabi_d2iz>
 8001c56:	4603      	mov	r3, r0
 8001c58:	617b      	str	r3, [r7, #20]
	if (right) { //rightMotor
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d018      	beq.n	8001c92 <PID_Angle+0x62>
		if (error > 0) { //go forward
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	dd0a      	ble.n	8001c7c <PID_Angle+0x4c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001c66:	2201      	movs	r2, #1
 8001c68:	2110      	movs	r1, #16
 8001c6a:	4833      	ldr	r0, [pc, #204]	; (8001d38 <PID_Angle+0x108>)
 8001c6c:	f002 f86c 	bl	8003d48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2120      	movs	r1, #32
 8001c74:	4830      	ldr	r0, [pc, #192]	; (8001d38 <PID_Angle+0x108>)
 8001c76:	f002 f867 	bl	8003d48 <HAL_GPIO_WritePin>
 8001c7a:	e022      	b.n	8001cc2 <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2110      	movs	r1, #16
 8001c80:	482d      	ldr	r0, [pc, #180]	; (8001d38 <PID_Angle+0x108>)
 8001c82:	f002 f861 	bl	8003d48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001c86:	2201      	movs	r2, #1
 8001c88:	2120      	movs	r1, #32
 8001c8a:	482b      	ldr	r0, [pc, #172]	; (8001d38 <PID_Angle+0x108>)
 8001c8c:	f002 f85c 	bl	8003d48 <HAL_GPIO_WritePin>
 8001c90:	e017      	b.n	8001cc2 <PID_Angle+0x92>
		}
	} else { //leftMotor
		if (error < 0) { //go forward
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	da0a      	bge.n	8001cae <PID_Angle+0x7e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2108      	movs	r1, #8
 8001c9c:	4826      	ldr	r0, [pc, #152]	; (8001d38 <PID_Angle+0x108>)
 8001c9e:	f002 f853 	bl	8003d48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2104      	movs	r1, #4
 8001ca6:	4824      	ldr	r0, [pc, #144]	; (8001d38 <PID_Angle+0x108>)
 8001ca8:	f002 f84e 	bl	8003d48 <HAL_GPIO_WritePin>
 8001cac:	e009      	b.n	8001cc2 <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2108      	movs	r1, #8
 8001cb2:	4821      	ldr	r0, [pc, #132]	; (8001d38 <PID_Angle+0x108>)
 8001cb4:	f002 f848 	bl	8003d48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2104      	movs	r1, #4
 8001cbc:	481e      	ldr	r0, [pc, #120]	; (8001d38 <PID_Angle+0x108>)
 8001cbe:	f002 f843 	bl	8003d48 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bfb8      	it	lt
 8001cc8:	425b      	neglt	r3, r3
 8001cca:	617b      	str	r3, [r7, #20]
	if (error > 300) {
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001cd2:	dd02      	ble.n	8001cda <PID_Angle+0xaa>
		return 3000;
 8001cd4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001cd8:	e028      	b.n	8001d2c <PID_Angle+0xfc>
	} else if (error > 200) {
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2bc8      	cmp	r3, #200	; 0xc8
 8001cde:	dd02      	ble.n	8001ce6 <PID_Angle+0xb6>
		return 2600;
 8001ce0:	f640 2328 	movw	r3, #2600	; 0xa28
 8001ce4:	e022      	b.n	8001d2c <PID_Angle+0xfc>
	} else if (error > 150) {
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b96      	cmp	r3, #150	; 0x96
 8001cea:	dd02      	ble.n	8001cf2 <PID_Angle+0xc2>
		return 1700;
 8001cec:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001cf0:	e01c      	b.n	8001d2c <PID_Angle+0xfc>
	} else if (error > 100) {
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b64      	cmp	r3, #100	; 0x64
 8001cf6:	dd02      	ble.n	8001cfe <PID_Angle+0xce>
		return 1500;
 8001cf8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001cfc:	e016      	b.n	8001d2c <PID_Angle+0xfc>
	} else if (error > 10) {
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b0a      	cmp	r3, #10
 8001d02:	dd02      	ble.n	8001d0a <PID_Angle+0xda>
		return 1200;
 8001d04:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001d08:	e010      	b.n	8001d2c <PID_Angle+0xfc>
	} else if (error >= 2) {
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	dd07      	ble.n	8001d20 <PID_Angle+0xf0>
		times_acceptable++;
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <PID_Angle+0x10c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <PID_Angle+0x10c>)
 8001d18:	6013      	str	r3, [r2, #0]
		return 1000;
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	e005      	b.n	8001d2c <PID_Angle+0xfc>
	} else {
		times_acceptable++;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <PID_Angle+0x10c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <PID_Angle+0x10c>)
 8001d28:	6013      	str	r3, [r2, #0]
		return 0;
 8001d2a:	2300      	movs	r3, #0
	}
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40240000 	.word	0x40240000
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	200002b8 	.word	0x200002b8

08001d40 <finishCheck>:

int finishCheck() {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
	if (times_acceptable > 20) {
 8001d44:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <finishCheck+0x48>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b14      	cmp	r3, #20
 8001d4a:	dd1a      	ble.n	8001d82 <finishCheck+0x42>
		e_brake = 1;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <finishCheck+0x4c>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
		pwmVal_L = pwmVal_R = 0;
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <finishCheck+0x50>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	801a      	strh	r2, [r3, #0]
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <finishCheck+0x50>)
 8001d5a:	881a      	ldrh	r2, [r3, #0]
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <finishCheck+0x54>)
 8001d5e:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <finishCheck+0x58>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <finishCheck+0x5c>)
 8001d66:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <finishCheck+0x60>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	; (8001da4 <finishCheck+0x64>)
 8001d6e:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <finishCheck+0x48>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
		osDelay(300);
 8001d76:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d7a:	f006 fa89 	bl	8008290 <osDelay>

		return 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e000      	b.n	8001d84 <finishCheck+0x44>
	}
	return 1;
 8001d82:	2301      	movs	r3, #1
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200002b8 	.word	0x200002b8
 8001d8c:	200002bc 	.word	0x200002bc
 8001d90:	200002b4 	.word	0x200002b4
 8001d94:	200002b6 	.word	0x200002b6
 8001d98:	200002c4 	.word	0x200002c4
 8001d9c:	200002cc 	.word	0x200002cc
 8001da0:	200002c0 	.word	0x200002c0
 8001da4:	200002c8 	.word	0x200002c8

08001da8 <readByte>:

// gyro
void readByte(uint8_t addr, uint8_t *data) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 8001db4:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <readByte+0x4c>)
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 1, 10);
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <readByte+0x50>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	b299      	uxth	r1, r3
 8001dc4:	230a      	movs	r3, #10
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2301      	movs	r3, #1
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <readByte+0x4c>)
 8001dcc:	480b      	ldr	r0, [pc, #44]	; (8001dfc <readByte+0x54>)
 8001dce:	f002 f933 	bl	8004038 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress << 1, data, 2, 20);
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <readByte+0x50>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	b299      	uxth	r1, r3
 8001ddc:	2314      	movs	r3, #20
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2302      	movs	r3, #2
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	4805      	ldr	r0, [pc, #20]	; (8001dfc <readByte+0x54>)
 8001de6:	f002 fa25 	bl	8004234 <HAL_I2C_Master_Receive>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200002e0 	.word	0x200002e0
 8001df8:	20000002 	.word	0x20000002
 8001dfc:	20000084 	.word	0x20000084

08001e00 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	4603      	mov	r3, r0
 8001e08:	460a      	mov	r2, r1
 8001e0a:	71fb      	strb	r3, [r7, #7]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 8001e10:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <writeByte+0x3c>)
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <writeByte+0x3c>)
 8001e18:	79bb      	ldrb	r3, [r7, #6]
 8001e1a:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <writeByte+0x40>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	b299      	uxth	r1, r3
 8001e26:	2314      	movs	r3, #20
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	4a03      	ldr	r2, [pc, #12]	; (8001e3c <writeByte+0x3c>)
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <writeByte+0x44>)
 8001e30:	f002 f902 	bl	8004038 <HAL_I2C_Master_Transmit>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200002e0 	.word	0x200002e0
 8001e40:	20000002 	.word	0x20000002
 8001e44:	20000084 	.word	0x20000084

08001e48 <gyroInit>:

void gyroInit() {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2006      	movs	r0, #6
 8001e50:	f7ff ffd6 	bl	8001e00 <writeByte>
	osDelay(10);
 8001e54:	200a      	movs	r0, #10
 8001e56:	f006 fa1b 	bl	8008290 <osDelay>
	writeByte(0x03, 0x80);
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f7ff ffcf 	bl	8001e00 <writeByte>
	osDelay(10);
 8001e62:	200a      	movs	r0, #10
 8001e64:	f006 fa14 	bl	8008290 <osDelay>
	writeByte(0x07, 0x07);
 8001e68:	2107      	movs	r1, #7
 8001e6a:	2007      	movs	r0, #7
 8001e6c:	f7ff ffc8 	bl	8001e00 <writeByte>
	osDelay(10);
 8001e70:	200a      	movs	r0, #10
 8001e72:	f006 fa0d 	bl	8008290 <osDelay>
	writeByte(0x06, 0x01);
 8001e76:	2101      	movs	r1, #1
 8001e78:	2006      	movs	r0, #6
 8001e7a:	f7ff ffc1 	bl	8001e00 <writeByte>
	osDelay(10);
 8001e7e:	200a      	movs	r0, #10
 8001e80:	f006 fa06 	bl	8008290 <osDelay>
	writeByte(0x7F, 0x20);
 8001e84:	2120      	movs	r1, #32
 8001e86:	207f      	movs	r0, #127	; 0x7f
 8001e88:	f7ff ffba 	bl	8001e00 <writeByte>
	osDelay(10);
 8001e8c:	200a      	movs	r0, #10
 8001e8e:	f006 f9ff 	bl	8008290 <osDelay>
	writeByte(0x01, 0x2F);
 8001e92:	212f      	movs	r1, #47	; 0x2f
 8001e94:	2001      	movs	r0, #1
 8001e96:	f7ff ffb3 	bl	8001e00 <writeByte>
	osDelay(10);
 8001e9a:	200a      	movs	r0, #10
 8001e9c:	f006 f9f8 	bl	8008290 <osDelay>
	writeByte(0x0, 0x00);
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff ffac 	bl	8001e00 <writeByte>
	osDelay(10);
 8001ea8:	200a      	movs	r0, #10
 8001eaa:	f006 f9f1 	bl	8008290 <osDelay>
	writeByte(0x7F, 0x00);
 8001eae:	2100      	movs	r1, #0
 8001eb0:	207f      	movs	r0, #127	; 0x7f
 8001eb2:	f7ff ffa5 	bl	8001e00 <writeByte>
	osDelay(10);
 8001eb6:	200a      	movs	r0, #10
 8001eb8:	f006 f9ea 	bl	8008290 <osDelay>
	writeByte(0x07, 0x00);
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2007      	movs	r0, #7
 8001ec0:	f7ff ff9e 	bl	8001e00 <writeByte>
	osDelay(10);
 8001ec4:	200a      	movs	r0, #10
 8001ec6:	f006 f9e3 	bl	8008290 <osDelay>
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001ed8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <StartDefaultTask+0x1c>)
 8001ede:	f001 ff4c 	bl	8003d7a <HAL_GPIO_TogglePin>
		osDelay(2000);
 8001ee2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ee6:	f006 f9d3 	bl	8008290 <osDelay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001eea:	e7f5      	b.n	8001ed8 <StartDefaultTask+0x8>
 8001eec:	40021000 	.word	0x40021000

08001ef0 <StartMotorTask>:
 * @brief Function implementing the motorTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotorTask */
	pwmVal_R = 0;
 8001ef8:	4bab      	ldr	r3, [pc, #684]	; (80021a8 <StartMotorTask+0x2b8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	801a      	strh	r2, [r3, #0]
	pwmVal_L = 0;
 8001efe:	4bab      	ldr	r3, [pc, #684]	; (80021ac <StartMotorTask+0x2bc>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	801a      	strh	r2, [r3, #0]
	int straightCorrection = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001f08:	2100      	movs	r1, #0
 8001f0a:	48a9      	ldr	r0, [pc, #676]	; (80021b0 <StartMotorTask+0x2c0>)
 8001f0c:	f003 fc0e 	bl	800572c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001f10:	2104      	movs	r1, #4
 8001f12:	48a7      	ldr	r0, [pc, #668]	; (80021b0 <StartMotorTask+0x2c0>)
 8001f14:	f003 fc0a 	bl	800572c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001f18:	210c      	movs	r1, #12
 8001f1a:	48a6      	ldr	r0, [pc, #664]	; (80021b4 <StartMotorTask+0x2c4>)
 8001f1c:	f003 fc06 	bl	800572c <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = SERVOCENTER; //Centre
 8001f20:	4ba4      	ldr	r3, [pc, #656]	; (80021b4 <StartMotorTask+0x2c4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2296      	movs	r2, #150	; 0x96
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40


	osDelay(1000);
 8001f28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f2c:	f006 f9b0 	bl	8008290 <osDelay>

	/* Infinite loop */
	for (;;) {
		htim1.Instance->CCR4 = pwmVal_servo;
 8001f30:	4ba1      	ldr	r3, [pc, #644]	; (80021b8 <StartMotorTask+0x2c8>)
 8001f32:	881a      	ldrh	r2, [r3, #0]
 8001f34:	4b9f      	ldr	r3, [pc, #636]	; (80021b4 <StartMotorTask+0x2c4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40
		error_angle = target_angle - total_angle;
 8001f3a:	4ba0      	ldr	r3, [pc, #640]	; (80021bc <StartMotorTask+0x2cc>)
 8001f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f40:	4b9f      	ldr	r3, [pc, #636]	; (80021c0 <StartMotorTask+0x2d0>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	f7fe f997 	bl	8000278 <__aeabi_dsub>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	499d      	ldr	r1, [pc, #628]	; (80021c4 <StartMotorTask+0x2d4>)
 8001f50:	e9c1 2300 	strd	r2, r3, [r1]

		if (pwmVal_servo < 127) { //106 //TURN LEFT
 8001f54:	4b98      	ldr	r3, [pc, #608]	; (80021b8 <StartMotorTask+0x2c8>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	2b7e      	cmp	r3, #126	; 0x7e
 8001f5a:	d87a      	bhi.n	8002052 <StartMotorTask+0x162>
			pwmVal_R = PID_Angle(error_angle, 1)*1.1;  //right is master
 8001f5c:	4b99      	ldr	r3, [pc, #612]	; (80021c4 <StartMotorTask+0x2d4>)
 8001f5e:	ed93 7b00 	vldr	d7, [r3]
 8001f62:	2001      	movs	r0, #1
 8001f64:	eeb0 0a47 	vmov.f32	s0, s14
 8001f68:	eef0 0a67 	vmov.f32	s1, s15
 8001f6c:	f7ff fe60 	bl	8001c30 <PID_Angle>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe face 	bl	8000514 <__aeabi_i2d>
 8001f78:	a381      	add	r3, pc, #516	; (adr r3, 8002180 <StartMotorTask+0x290>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f7fe fb33 	bl	80005e8 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fdef 	bl	8000b6c <__aeabi_d2uiz>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b85      	ldr	r3, [pc, #532]	; (80021a8 <StartMotorTask+0x2b8>)
 8001f94:	801a      	strh	r2, [r3, #0]
			pwmVal_L = pwmVal_R * (0.33); //left is slave
 8001f96:	4b84      	ldr	r3, [pc, #528]	; (80021a8 <StartMotorTask+0x2b8>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe faba 	bl	8000514 <__aeabi_i2d>
 8001fa0:	a379      	add	r3, pc, #484	; (adr r3, 8002188 <StartMotorTask+0x298>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe fb1f 	bl	80005e8 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f7fe fddb 	bl	8000b6c <__aeabi_d2uiz>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	4b7c      	ldr	r3, [pc, #496]	; (80021ac <StartMotorTask+0x2bc>)
 8001fbc:	801a      	strh	r2, [r3, #0]

			if (error_angle > 0) {
 8001fbe:	4b81      	ldr	r3, [pc, #516]	; (80021c4 <StartMotorTask+0x2d4>)
 8001fc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	f7fe fd9c 	bl	8000b08 <__aeabi_dcmpgt>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d014      	beq.n	8002000 <StartMotorTask+0x110>
				//go forward
				//pwmVal_L = pwmVal_R * (0.79); //left is slave
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- reverse
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2108      	movs	r1, #8
 8001fda:	487b      	ldr	r0, [pc, #492]	; (80021c8 <StartMotorTask+0x2d8>)
 8001fdc:	f001 feb4 	bl	8003d48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2104      	movs	r1, #4
 8001fe4:	4878      	ldr	r0, [pc, #480]	; (80021c8 <StartMotorTask+0x2d8>)
 8001fe6:	f001 feaf 	bl	8003d48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - Forward
 8001fea:	2200      	movs	r2, #0
 8001fec:	2120      	movs	r1, #32
 8001fee:	4876      	ldr	r0, [pc, #472]	; (80021c8 <StartMotorTask+0x2d8>)
 8001ff0:	f001 feaa 	bl	8003d48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2110      	movs	r1, #16
 8001ff8:	4873      	ldr	r0, [pc, #460]	; (80021c8 <StartMotorTask+0x2d8>)
 8001ffa:	f001 fea5 	bl	8003d48 <HAL_GPIO_WritePin>
 8001ffe:	e19a      	b.n	8002336 <StartMotorTask+0x446>
			} else {
				//go backward
				pwmVal_L = pwmVal_R * (0.49); //left is slave
 8002000:	4b69      	ldr	r3, [pc, #420]	; (80021a8 <StartMotorTask+0x2b8>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fa85 	bl	8000514 <__aeabi_i2d>
 800200a:	a361      	add	r3, pc, #388	; (adr r3, 8002190 <StartMotorTask+0x2a0>)
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	f7fe faea 	bl	80005e8 <__aeabi_dmul>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fda6 	bl	8000b6c <__aeabi_d2uiz>
 8002020:	4603      	mov	r3, r0
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b61      	ldr	r3, [pc, #388]	; (80021ac <StartMotorTask+0x2bc>)
 8002026:	801a      	strh	r2, [r3, #0]
				//pwmVal_servo = 106;
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - forward
 8002028:	2200      	movs	r2, #0
 800202a:	2108      	movs	r1, #8
 800202c:	4866      	ldr	r0, [pc, #408]	; (80021c8 <StartMotorTask+0x2d8>)
 800202e:	f001 fe8b 	bl	8003d48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002032:	2201      	movs	r2, #1
 8002034:	2104      	movs	r1, #4
 8002036:	4864      	ldr	r0, [pc, #400]	; (80021c8 <StartMotorTask+0x2d8>)
 8002038:	f001 fe86 	bl	8003d48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- reverse
 800203c:	2201      	movs	r2, #1
 800203e:	2120      	movs	r1, #32
 8002040:	4861      	ldr	r0, [pc, #388]	; (80021c8 <StartMotorTask+0x2d8>)
 8002042:	f001 fe81 	bl	8003d48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002046:	2200      	movs	r2, #0
 8002048:	2110      	movs	r1, #16
 800204a:	485f      	ldr	r0, [pc, #380]	; (80021c8 <StartMotorTask+0x2d8>)
 800204c:	f001 fe7c 	bl	8003d48 <HAL_GPIO_WritePin>
 8002050:	e171      	b.n	8002336 <StartMotorTask+0x446>
			}
		}

		else if (pwmVal_servo > 189) { //230 //TURN RIGHT
 8002052:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <StartMotorTask+0x2c8>)
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	2bbd      	cmp	r3, #189	; 0xbd
 8002058:	d96b      	bls.n	8002132 <StartMotorTask+0x242>
			pwmVal_L = PID_Angle(error_angle, 0);
 800205a:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <StartMotorTask+0x2d4>)
 800205c:	ed93 7b00 	vldr	d7, [r3]
 8002060:	2000      	movs	r0, #0
 8002062:	eeb0 0a47 	vmov.f32	s0, s14
 8002066:	eef0 0a67 	vmov.f32	s1, s15
 800206a:	f7ff fde1 	bl	8001c30 <PID_Angle>
 800206e:	4603      	mov	r3, r0
 8002070:	b29a      	uxth	r2, r3
 8002072:	4b4e      	ldr	r3, [pc, #312]	; (80021ac <StartMotorTask+0x2bc>)
 8002074:	801a      	strh	r2, [r3, #0]
			pwmVal_R = pwmVal_L * (0.37); //right is slave
 8002076:	4b4d      	ldr	r3, [pc, #308]	; (80021ac <StartMotorTask+0x2bc>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fa4a 	bl	8000514 <__aeabi_i2d>
 8002080:	a345      	add	r3, pc, #276	; (adr r3, 8002198 <StartMotorTask+0x2a8>)
 8002082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002086:	f7fe faaf 	bl	80005e8 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f7fe fd6b 	bl	8000b6c <__aeabi_d2uiz>
 8002096:	4603      	mov	r3, r0
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <StartMotorTask+0x2b8>)
 800209c:	801a      	strh	r2, [r3, #0]

			if (error_angle < 0) {
 800209e:	4b49      	ldr	r3, [pc, #292]	; (80021c4 <StartMotorTask+0x2d4>)
 80020a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	f7fe fd0e 	bl	8000acc <__aeabi_dcmplt>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d014      	beq.n	80020e0 <StartMotorTask+0x1f0>
				//go forward
				//pwmVal_R = pwmVal_L * (0.37); //right is slave
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- Reverse
 80020b6:	2201      	movs	r2, #1
 80020b8:	2110      	movs	r1, #16
 80020ba:	4843      	ldr	r0, [pc, #268]	; (80021c8 <StartMotorTask+0x2d8>)
 80020bc:	f001 fe44 	bl	8003d48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2120      	movs	r1, #32
 80020c4:	4840      	ldr	r0, [pc, #256]	; (80021c8 <StartMotorTask+0x2d8>)
 80020c6:	f001 fe3f 	bl	8003d48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - forward
 80020ca:	2200      	movs	r2, #0
 80020cc:	2104      	movs	r1, #4
 80020ce:	483e      	ldr	r0, [pc, #248]	; (80021c8 <StartMotorTask+0x2d8>)
 80020d0:	f001 fe3a 	bl	8003d48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80020d4:	2201      	movs	r2, #1
 80020d6:	2108      	movs	r1, #8
 80020d8:	483b      	ldr	r0, [pc, #236]	; (80021c8 <StartMotorTask+0x2d8>)
 80020da:	f001 fe35 	bl	8003d48 <HAL_GPIO_WritePin>
 80020de:	e12a      	b.n	8002336 <StartMotorTask+0x446>
			} else {
				//go backward
				pwmVal_R = pwmVal_L * (0.305); //right is slave
 80020e0:	4b32      	ldr	r3, [pc, #200]	; (80021ac <StartMotorTask+0x2bc>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fa15 	bl	8000514 <__aeabi_i2d>
 80020ea:	a32d      	add	r3, pc, #180	; (adr r3, 80021a0 <StartMotorTask+0x2b0>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f7fe fa7a 	bl	80005e8 <__aeabi_dmul>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	f7fe fd36 	bl	8000b6c <__aeabi_d2uiz>
 8002100:	4603      	mov	r3, r0
 8002102:	b29a      	uxth	r2, r3
 8002104:	4b28      	ldr	r3, [pc, #160]	; (80021a8 <StartMotorTask+0x2b8>)
 8002106:	801a      	strh	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8002108:	2200      	movs	r2, #0
 800210a:	2110      	movs	r1, #16
 800210c:	482e      	ldr	r0, [pc, #184]	; (80021c8 <StartMotorTask+0x2d8>)
 800210e:	f001 fe1b 	bl	8003d48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002112:	2201      	movs	r2, #1
 8002114:	2120      	movs	r1, #32
 8002116:	482c      	ldr	r0, [pc, #176]	; (80021c8 <StartMotorTask+0x2d8>)
 8002118:	f001 fe16 	bl	8003d48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- forward
 800211c:	2201      	movs	r2, #1
 800211e:	2104      	movs	r1, #4
 8002120:	4829      	ldr	r0, [pc, #164]	; (80021c8 <StartMotorTask+0x2d8>)
 8002122:	f001 fe11 	bl	8003d48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	2108      	movs	r1, #8
 800212a:	4827      	ldr	r0, [pc, #156]	; (80021c8 <StartMotorTask+0x2d8>)
 800212c:	f001 fe0c 	bl	8003d48 <HAL_GPIO_WritePin>
 8002130:	e101      	b.n	8002336 <StartMotorTask+0x446>
			}
		}

		else {

			pwmVal_R = PID_Control(leftTarget - leftEncoderVal, 0);
 8002132:	4b26      	ldr	r3, [pc, #152]	; (80021cc <StartMotorTask+0x2dc>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <StartMotorTask+0x2e0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fcfa 	bl	8001b38 <PID_Control>
 8002144:	4603      	mov	r3, r0
 8002146:	b29a      	uxth	r2, r3
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <StartMotorTask+0x2b8>)
 800214a:	801a      	strh	r2, [r3, #0]
			if (abs(leftTarget - leftEncoderVal)
 800214c:	4b1f      	ldr	r3, [pc, #124]	; (80021cc <StartMotorTask+0x2dc>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <StartMotorTask+0x2e0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800215a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
					> abs(rightTarget - rightEncoderVal)) {
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <StartMotorTask+0x2e4>)
 8002160:	6819      	ldr	r1, [r3, #0]
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <StartMotorTask+0x2e8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1acb      	subs	r3, r1, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	bfb8      	it	lt
 800216c:	425b      	neglt	r3, r3
			if (abs(leftTarget - leftEncoderVal)
 800216e:	429a      	cmp	r2, r3
 8002170:	dd34      	ble.n	80021dc <StartMotorTask+0x2ec>
				straightCorrection++;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3301      	adds	r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	e033      	b.n	80021e2 <StartMotorTask+0x2f2>
 800217a:	bf00      	nop
 800217c:	f3af 8000 	nop.w
 8002180:	9999999a 	.word	0x9999999a
 8002184:	3ff19999 	.word	0x3ff19999
 8002188:	51eb851f 	.word	0x51eb851f
 800218c:	3fd51eb8 	.word	0x3fd51eb8
 8002190:	f5c28f5c 	.word	0xf5c28f5c
 8002194:	3fdf5c28 	.word	0x3fdf5c28
 8002198:	7ae147ae 	.word	0x7ae147ae
 800219c:	3fd7ae14 	.word	0x3fd7ae14
 80021a0:	b851eb85 	.word	0xb851eb85
 80021a4:	3fd3851e 	.word	0x3fd3851e
 80021a8:	200002b4 	.word	0x200002b4
 80021ac:	200002b6 	.word	0x200002b6
 80021b0:	200001f8 	.word	0x200001f8
 80021b4:	200000d8 	.word	0x200000d8
 80021b8:	20000000 	.word	0x20000000
 80021bc:	200002d0 	.word	0x200002d0
 80021c0:	200002d8 	.word	0x200002d8
 80021c4:	200002f8 	.word	0x200002f8
 80021c8:	40020000 	.word	0x40020000
 80021cc:	200002cc 	.word	0x200002cc
 80021d0:	200002c4 	.word	0x200002c4
 80021d4:	200002c8 	.word	0x200002c8
 80021d8:	200002c0 	.word	0x200002c0
			} else {
				straightCorrection--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	3b01      	subs	r3, #1
 80021e0:	60fb      	str	r3, [r7, #12]
			}
			if (abs(leftTarget - leftEncoderVal) < 100) {
 80021e2:	4b6d      	ldr	r3, [pc, #436]	; (8002398 <StartMotorTask+0x4a8>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4b6d      	ldr	r3, [pc, #436]	; (800239c <StartMotorTask+0x4ac>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80021f0:	db08      	blt.n	8002204 <StartMotorTask+0x314>
 80021f2:	4b69      	ldr	r3, [pc, #420]	; (8002398 <StartMotorTask+0x4a8>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4b69      	ldr	r3, [pc, #420]	; (800239c <StartMotorTask+0x4ac>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b63      	cmp	r3, #99	; 0x63
 80021fe:	dc01      	bgt.n	8002204 <StartMotorTask+0x314>
				straightCorrection = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
			}
			pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1);
 8002204:	4b66      	ldr	r3, [pc, #408]	; (80023a0 <StartMotorTask+0x4b0>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b66      	ldr	r3, [pc, #408]	; (80023a4 <StartMotorTask+0x4b4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2101      	movs	r1, #1
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fc91 	bl	8001b38 <PID_Control>
 8002216:	4603      	mov	r3, r0
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b63      	ldr	r3, [pc, #396]	; (80023a8 <StartMotorTask+0x4b8>)
 800221c:	801a      	strh	r2, [r3, #0]

			if ((leftTarget - leftEncoderVal) < 0) {
 800221e:	4b5e      	ldr	r3, [pc, #376]	; (8002398 <StartMotorTask+0x4a8>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b5e      	ldr	r3, [pc, #376]	; (800239c <StartMotorTask+0x4ac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	da42      	bge.n	80022b2 <StartMotorTask+0x3c2>
				if (error_angle > 5) { // if turn left, 106. right 230. left +. right -.
 800222c:	4b5f      	ldr	r3, [pc, #380]	; (80023ac <StartMotorTask+0x4bc>)
 800222e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	4b5e      	ldr	r3, [pc, #376]	; (80023b0 <StartMotorTask+0x4c0>)
 8002238:	f7fe fc66 	bl	8000b08 <__aeabi_dcmpgt>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <StartMotorTask+0x35a>
					pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 8002242:	4b5c      	ldr	r3, [pc, #368]	; (80023b4 <StartMotorTask+0x4c4>)
 8002244:	22a9      	movs	r2, #169	; 0xa9
 8002246:	801a      	strh	r2, [r3, #0]
 8002248:	e075      	b.n	8002336 <StartMotorTask+0x446>
				} else if (error_angle < -5) {
 800224a:	4b58      	ldr	r3, [pc, #352]	; (80023ac <StartMotorTask+0x4bc>)
 800224c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	4b58      	ldr	r3, [pc, #352]	; (80023b8 <StartMotorTask+0x4c8>)
 8002256:	f7fe fc39 	bl	8000acc <__aeabi_dcmplt>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <StartMotorTask+0x378>
					pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 8002260:	4b54      	ldr	r3, [pc, #336]	; (80023b4 <StartMotorTask+0x4c4>)
 8002262:	2283      	movs	r2, #131	; 0x83
 8002264:	801a      	strh	r2, [r3, #0]
 8002266:	e066      	b.n	8002336 <StartMotorTask+0x446>
				} else {
					pwmVal_servo = ((19 * error_angle) / 5 + SERVOCENTER);
 8002268:	4b50      	ldr	r3, [pc, #320]	; (80023ac <StartMotorTask+0x4bc>)
 800226a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	4b52      	ldr	r3, [pc, #328]	; (80023bc <StartMotorTask+0x4cc>)
 8002274:	f7fe f9b8 	bl	80005e8 <__aeabi_dmul>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	4b4a      	ldr	r3, [pc, #296]	; (80023b0 <StartMotorTask+0x4c0>)
 8002286:	f7fe fad9 	bl	800083c <__aeabi_ddiv>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	a33f      	add	r3, pc, #252	; (adr r3, 8002390 <StartMotorTask+0x4a0>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fd fff0 	bl	800027c <__adddf3>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fe fc62 	bl	8000b6c <__aeabi_d2uiz>
 80022a8:	4603      	mov	r3, r0
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	4b41      	ldr	r3, [pc, #260]	; (80023b4 <StartMotorTask+0x4c4>)
 80022ae:	801a      	strh	r2, [r3, #0]
 80022b0:	e041      	b.n	8002336 <StartMotorTask+0x446>
				}

			} else {
				if (error_angle > 5) { // if turn left, 106. right 230. left +. right -.
 80022b2:	4b3e      	ldr	r3, [pc, #248]	; (80023ac <StartMotorTask+0x4bc>)
 80022b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	4b3c      	ldr	r3, [pc, #240]	; (80023b0 <StartMotorTask+0x4c0>)
 80022be:	f7fe fc23 	bl	8000b08 <__aeabi_dcmpgt>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <StartMotorTask+0x3e0>
					pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 80022c8:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <StartMotorTask+0x4c4>)
 80022ca:	2283      	movs	r2, #131	; 0x83
 80022cc:	801a      	strh	r2, [r3, #0]
 80022ce:	e032      	b.n	8002336 <StartMotorTask+0x446>
				} else if (error_angle < -5) {
 80022d0:	4b36      	ldr	r3, [pc, #216]	; (80023ac <StartMotorTask+0x4bc>)
 80022d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	4b37      	ldr	r3, [pc, #220]	; (80023b8 <StartMotorTask+0x4c8>)
 80022dc:	f7fe fbf6 	bl	8000acc <__aeabi_dcmplt>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <StartMotorTask+0x3fe>
					pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 80022e6:	4b33      	ldr	r3, [pc, #204]	; (80023b4 <StartMotorTask+0x4c4>)
 80022e8:	22a9      	movs	r2, #169	; 0xa9
 80022ea:	801a      	strh	r2, [r3, #0]
 80022ec:	e023      	b.n	8002336 <StartMotorTask+0x446>
				} else {
					pwmVal_servo = ((-19 * error_angle) / 5 + SERVOCENTER);
 80022ee:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <StartMotorTask+0x4bc>)
 80022f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <StartMotorTask+0x4d0>)
 80022fa:	f7fe f975 	bl	80005e8 <__aeabi_dmul>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <StartMotorTask+0x4c0>)
 800230c:	f7fe fa96 	bl	800083c <__aeabi_ddiv>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	a31d      	add	r3, pc, #116	; (adr r3, 8002390 <StartMotorTask+0x4a0>)
 800231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231e:	f7fd ffad 	bl	800027c <__adddf3>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	f7fe fc1f 	bl	8000b6c <__aeabi_d2uiz>
 800232e:	4603      	mov	r3, r0
 8002330:	b29a      	uxth	r2, r3
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <StartMotorTask+0x4c4>)
 8002334:	801a      	strh	r2, [r3, #0]
			}

			//line correction equation is pwmVal = (19*error)/5 + SERVOCENTER
		}

		if (e_brake) {
 8002336:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <StartMotorTask+0x4d4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00e      	beq.n	800235c <StartMotorTask+0x46c>
			pwmVal_L = pwmVal_R = 0;
 800233e:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <StartMotorTask+0x4d8>)
 8002340:	2200      	movs	r2, #0
 8002342:	801a      	strh	r2, [r3, #0]
 8002344:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <StartMotorTask+0x4d8>)
 8002346:	881a      	ldrh	r2, [r3, #0]
 8002348:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <StartMotorTask+0x4b8>)
 800234a:	801a      	strh	r2, [r3, #0]
			leftTarget = leftEncoderVal;
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <StartMotorTask+0x4ac>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a11      	ldr	r2, [pc, #68]	; (8002398 <StartMotorTask+0x4a8>)
 8002352:	6013      	str	r3, [r2, #0]
			rightTarget = rightEncoderVal;
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <StartMotorTask+0x4b4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <StartMotorTask+0x4b0>)
 800235a:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L);
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <StartMotorTask+0x4b8>)
 800235e:	881a      	ldrh	r2, [r3, #0]
 8002360:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <StartMotorTask+0x4dc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_R);
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <StartMotorTask+0x4d8>)
 8002368:	881a      	ldrh	r2, [r3, #0]
 800236a:	4b18      	ldr	r3, [pc, #96]	; (80023cc <StartMotorTask+0x4dc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(1);
 8002370:	2001      	movs	r0, #1
 8002372:	f005 ff8d 	bl	8008290 <osDelay>

		if (times_acceptable > 1000) {
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <StartMotorTask+0x4e0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800237e:	f77f add7 	ble.w	8001f30 <StartMotorTask+0x40>
			times_acceptable = 1001;
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <StartMotorTask+0x4e0>)
 8002384:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002388:	601a      	str	r2, [r3, #0]
		htim1.Instance->CCR4 = pwmVal_servo;
 800238a:	e5d1      	b.n	8001f30 <StartMotorTask+0x40>
 800238c:	f3af 8000 	nop.w
 8002390:	00000000 	.word	0x00000000
 8002394:	4062c000 	.word	0x4062c000
 8002398:	200002cc 	.word	0x200002cc
 800239c:	200002c4 	.word	0x200002c4
 80023a0:	200002c8 	.word	0x200002c8
 80023a4:	200002c0 	.word	0x200002c0
 80023a8:	200002b6 	.word	0x200002b6
 80023ac:	200002f8 	.word	0x200002f8
 80023b0:	40140000 	.word	0x40140000
 80023b4:	20000000 	.word	0x20000000
 80023b8:	c0140000 	.word	0xc0140000
 80023bc:	40330000 	.word	0x40330000
 80023c0:	c0330000 	.word	0xc0330000
 80023c4:	200002bc 	.word	0x200002bc
 80023c8:	200002b4 	.word	0x200002b4
 80023cc:	200001f8 	.word	0x200001f8
 80023d0:	200002b8 	.word	0x200002b8

080023d4 <StartOLEDTask>:
 * @brief Function implementing the OLEDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument) {
 80023d4:	b5b0      	push	{r4, r5, r7, lr}
 80023d6:	b0a0      	sub	sp, #128	; 0x80
 80023d8:	af04      	add	r7, sp, #16
 80023da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartOLEDTask */
	uint8_t usVal[20] = { 0 };
 80023dc:	2300      	movs	r3, #0
 80023de:	65bb      	str	r3, [r7, #88]	; 0x58
 80023e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
	uint8_t gyroVal[20] = { 0 };
 80023ee:	2300      	movs	r3, #0
 80023f0:	647b      	str	r3, [r7, #68]	; 0x44
 80023f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
	uint8_t command[20] = { 0 };
 8002400:	2300      	movs	r3, #0
 8002402:	633b      	str	r3, [r7, #48]	; 0x30
 8002404:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
	uint8_t lefty[20] = { 0 };
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	f107 0320 	add.w	r3, r7, #32
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	60da      	str	r2, [r3, #12]
	uint8_t righty[20] = { 0 };
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
	for (;;) {
		sprintf(usVal, "Distance: %d \0", (int) uDistance);
 8002436:	4b4c      	ldr	r3, [pc, #304]	; (8002568 <StartOLEDTask+0x194>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002440:	494a      	ldr	r1, [pc, #296]	; (800256c <StartOLEDTask+0x198>)
 8002442:	4618      	mov	r0, r3
 8002444:	f008 fbc2 	bl	800abcc <siprintf>
		OLED_ShowString(0, 10, usVal);
 8002448:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800244c:	461a      	mov	r2, r3
 800244e:	210a      	movs	r1, #10
 8002450:	2000      	movs	r0, #0
 8002452:	f000 ffe5 	bl	8003420 <OLED_ShowString>

//		int decimals = abs((int) ((error_angle - (int) (error_angle)) * 1000));
//		sprintf(gyroVal, "EGyro: %d.%d \0", (int) error_angle, decimals);
//		OLED_ShowString(0, 20, gyroVal);

		int decimals = abs((int) ((total_angle - (int) (total_angle)) * 1000));
 8002456:	4b46      	ldr	r3, [pc, #280]	; (8002570 <StartOLEDTask+0x19c>)
 8002458:	e9d3 4500 	ldrd	r4, r5, [r3]
 800245c:	4b44      	ldr	r3, [pc, #272]	; (8002570 <StartOLEDTask+0x19c>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	f7fe fb59 	bl	8000b1c <__aeabi_d2iz>
 800246a:	4603      	mov	r3, r0
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f851 	bl	8000514 <__aeabi_i2d>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4620      	mov	r0, r4
 8002478:	4629      	mov	r1, r5
 800247a:	f7fd fefd 	bl	8000278 <__aeabi_dsub>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	4b3a      	ldr	r3, [pc, #232]	; (8002574 <StartOLEDTask+0x1a0>)
 800248c:	f7fe f8ac 	bl	80005e8 <__aeabi_dmul>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f7fe fb40 	bl	8000b1c <__aeabi_d2iz>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bfb8      	it	lt
 80024a2:	425b      	neglt	r3, r3
 80024a4:	66fb      	str	r3, [r7, #108]	; 0x6c
		sprintf(gyroVal, "TGyro: %d.%d \0", (int) total_angle, decimals);
 80024a6:	4b32      	ldr	r3, [pc, #200]	; (8002570 <StartOLEDTask+0x19c>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fb34 	bl	8000b1c <__aeabi_d2iz>
 80024b4:	4602      	mov	r2, r0
 80024b6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80024ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024bc:	492e      	ldr	r1, [pc, #184]	; (8002578 <StartOLEDTask+0x1a4>)
 80024be:	f008 fb85 	bl	800abcc <siprintf>
		OLED_ShowString(0, 20, gyroVal);
 80024c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024c6:	461a      	mov	r2, r3
 80024c8:	2114      	movs	r1, #20
 80024ca:	2000      	movs	r0, #0
 80024cc:	f000 ffa8 	bl	8003420 <OLED_ShowString>
		sprintf(lefty, "L:%d  %d\0", (int)(leftTarget - leftEncoderVal), pwmVal_L);
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <StartOLEDTask+0x1a8>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <StartOLEDTask+0x1ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	1ad2      	subs	r2, r2, r3
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <StartOLEDTask+0x1b0>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	f107 001c 	add.w	r0, r7, #28
 80024e2:	4929      	ldr	r1, [pc, #164]	; (8002588 <StartOLEDTask+0x1b4>)
 80024e4:	f008 fb72 	bl	800abcc <siprintf>
		OLED_ShowString(0, 30, lefty);
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	461a      	mov	r2, r3
 80024ee:	211e      	movs	r1, #30
 80024f0:	2000      	movs	r0, #0
 80024f2:	f000 ff95 	bl	8003420 <OLED_ShowString>


		sprintf(righty, "R:%d  %d\0", (int)(rightTarget - rightEncoderVal), pwmVal_R);
 80024f6:	4b25      	ldr	r3, [pc, #148]	; (800258c <StartOLEDTask+0x1b8>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b25      	ldr	r3, [pc, #148]	; (8002590 <StartOLEDTask+0x1bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	1ad2      	subs	r2, r2, r3
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <StartOLEDTask+0x1c0>)
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	f107 0008 	add.w	r0, r7, #8
 8002508:	4923      	ldr	r1, [pc, #140]	; (8002598 <StartOLEDTask+0x1c4>)
 800250a:	f008 fb5f 	bl	800abcc <siprintf>
		OLED_ShowString(0, 40, righty);
 800250e:	f107 0308 	add.w	r3, r7, #8
 8002512:	461a      	mov	r2, r3
 8002514:	2128      	movs	r1, #40	; 0x28
 8002516:	2000      	movs	r0, #0
 8002518:	f000 ff82 	bl	8003420 <OLED_ShowString>

		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 800251c:	4b1f      	ldr	r3, [pc, #124]	; (800259c <StartOLEDTask+0x1c8>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	461c      	mov	r4, r3
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <StartOLEDTask+0x1c8>)
 8002524:	785b      	ldrb	r3, [r3, #1]
 8002526:	461d      	mov	r5, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <StartOLEDTask+0x1c8>)
 800252a:	789b      	ldrb	r3, [r3, #2]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 800252c:	461a      	mov	r2, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <StartOLEDTask+0x1c8>)
 8002530:	78db      	ldrb	r3, [r3, #3]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002532:	4619      	mov	r1, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <StartOLEDTask+0x1c8>)
 8002536:	791b      	ldrb	r3, [r3, #4]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002538:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800253c:	9302      	str	r3, [sp, #8]
 800253e:	9101      	str	r1, [sp, #4]
 8002540:	9200      	str	r2, [sp, #0]
 8002542:	462b      	mov	r3, r5
 8002544:	4622      	mov	r2, r4
 8002546:	4916      	ldr	r1, [pc, #88]	; (80025a0 <StartOLEDTask+0x1cc>)
 8002548:	f008 fb40 	bl	800abcc <siprintf>
		OLED_ShowString(0, 50, command);
 800254c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002550:	461a      	mov	r2, r3
 8002552:	2132      	movs	r1, #50	; 0x32
 8002554:	2000      	movs	r0, #0
 8002556:	f000 ff63 	bl	8003420 <OLED_ShowString>

		OLED_Refresh_Gram();
 800255a:	f000 fded 	bl	8003138 <OLED_Refresh_Gram>
		osDelay(100);
 800255e:	2064      	movs	r0, #100	; 0x64
 8002560:	f005 fe96 	bl	8008290 <osDelay>
	for (;;) {
 8002564:	e767      	b.n	8002436 <StartOLEDTask+0x62>
 8002566:	bf00      	nop
 8002568:	2000030e 	.word	0x2000030e
 800256c:	0800b648 	.word	0x0800b648
 8002570:	200002d8 	.word	0x200002d8
 8002574:	408f4000 	.word	0x408f4000
 8002578:	0800b658 	.word	0x0800b658
 800257c:	200002cc 	.word	0x200002cc
 8002580:	200002c4 	.word	0x200002c4
 8002584:	200002b6 	.word	0x200002b6
 8002588:	0800b668 	.word	0x0800b668
 800258c:	200002c8 	.word	0x200002c8
 8002590:	200002c0 	.word	0x200002c0
 8002594:	200002b4 	.word	0x200002b4
 8002598:	0800b674 	.word	0x0800b674
 800259c:	200002a4 	.word	0x200002a4
 80025a0:	0800b680 	.word	0x0800b680
 80025a4:	00000000 	.word	0x00000000

080025a8 <StartGyroTask>:
 * @brief Function implementing the gyroTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument) {
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGyroTask */
	gyroInit();
 80025b0:	f7ff fc4a 	bl	8001e48 <gyroInit>
	uint8_t val[2] = { 0, 0 };
 80025b4:	2300      	movs	r3, #0
 80025b6:	813b      	strh	r3, [r7, #8]

	int16_t angular_speed = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	817b      	strh	r3, [r7, #10]

	uint32_t tick = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
	double offset = 0;
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double trash = 0;
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int i = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
	while (i < 400) {
 80025dc:	e048      	b.n	8002670 <StartGyroTask+0xc8>
		osDelay(50);
 80025de:	2032      	movs	r0, #50	; 0x32
 80025e0:	f005 fe56 	bl	8008290 <osDelay>
		readByte(0x37, val);
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	4619      	mov	r1, r3
 80025ea:	2037      	movs	r0, #55	; 0x37
 80025ec:	f7ff fbdc 	bl	8001da8 <readByte>
		angular_speed = (val[0] << 8) | val[1];
 80025f0:	7a3b      	ldrb	r3, [r7, #8]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	b21a      	sxth	r2, r3
 80025f6:	7a7b      	ldrb	r3, [r7, #9]
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	4313      	orrs	r3, r2
 80025fc:	817b      	strh	r3, [r7, #10]
		trash += (double) ((double) angular_speed)
 80025fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd ff86 	bl	8000514 <__aeabi_i2d>
 8002608:	4604      	mov	r4, r0
 800260a:	460d      	mov	r5, r1
				* ((HAL_GetTick() - tick) / 16400.0);
 800260c:	f001 f82c 	bl	8003668 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd ff6c 	bl	80004f4 <__aeabi_ui2d>
 800261c:	a346      	add	r3, pc, #280	; (adr r3, 8002738 <StartGyroTask+0x190>)
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f7fe f90b 	bl	800083c <__aeabi_ddiv>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4620      	mov	r0, r4
 800262c:	4629      	mov	r1, r5
 800262e:	f7fd ffdb 	bl	80005e8 <__aeabi_dmul>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
		trash += (double) ((double) angular_speed)
 8002636:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800263a:	f7fd fe1f 	bl	800027c <__adddf3>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	e9c7 2304 	strd	r2, r3, [r7, #16]
		offset += angular_speed;
 8002646:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ff62 	bl	8000514 <__aeabi_i2d>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002658:	f7fd fe10 	bl	800027c <__adddf3>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	e9c7 2306 	strd	r2, r3, [r7, #24]
		tick = HAL_GetTick();
 8002664:	f001 f800 	bl	8003668 <HAL_GetTick>
 8002668:	6278      	str	r0, [r7, #36]	; 0x24
		i++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3301      	adds	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
	while (i < 400) {
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002676:	dbb2      	blt.n	80025de <StartGyroTask+0x36>
	}
	buzzerBeep();
 8002678:	f7ff f9e6 	bl	8001a48 <buzzerBeep>
	k = 1;
 800267c:	4b30      	ldr	r3, [pc, #192]	; (8002740 <StartGyroTask+0x198>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]
	offset = offset / i;
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f7fd ff46 	bl	8000514 <__aeabi_i2d>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002690:	f7fe f8d4 	bl	800083c <__aeabi_ddiv>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	e9c7 2306 	strd	r2, r3, [r7, #24]

	tick = HAL_GetTick();
 800269c:	f000 ffe4 	bl	8003668 <HAL_GetTick>
 80026a0:	6278      	str	r0, [r7, #36]	; 0x24
	/* Infinite loop */
	for (;;) {

		osDelay(100);
 80026a2:	2064      	movs	r0, #100	; 0x64
 80026a4:	f005 fdf4 	bl	8008290 <osDelay>
		readByte(0x37, val);
 80026a8:	f107 0308 	add.w	r3, r7, #8
 80026ac:	4619      	mov	r1, r3
 80026ae:	2037      	movs	r0, #55	; 0x37
 80026b0:	f7ff fb7a 	bl	8001da8 <readByte>
		angular_speed = (val[0] << 8) | val[1];
 80026b4:	7a3b      	ldrb	r3, [r7, #8]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	b21a      	sxth	r2, r3
 80026ba:	7a7b      	ldrb	r3, [r7, #9]
 80026bc:	b21b      	sxth	r3, r3
 80026be:	4313      	orrs	r3, r2
 80026c0:	817b      	strh	r3, [r7, #10]
		total_angle += (double) ((double) angular_speed - offset)
 80026c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fd ff24 	bl	8000514 <__aeabi_i2d>
 80026cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d0:	f7fd fdd2 	bl	8000278 <__aeabi_dsub>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4614      	mov	r4, r2
 80026da:	461d      	mov	r5, r3
				* ((HAL_GetTick() - tick) / 16400.0);
 80026dc:	f000 ffc4 	bl	8003668 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd ff04 	bl	80004f4 <__aeabi_ui2d>
 80026ec:	a312      	add	r3, pc, #72	; (adr r3, 8002738 <StartGyroTask+0x190>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	f7fe f8a3 	bl	800083c <__aeabi_ddiv>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4620      	mov	r0, r4
 80026fc:	4629      	mov	r1, r5
 80026fe:	f7fd ff73 	bl	80005e8 <__aeabi_dmul>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
		total_angle += (double) ((double) angular_speed - offset)
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <StartGyroTask+0x19c>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f7fd fdb4 	bl	800027c <__adddf3>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	490a      	ldr	r1, [pc, #40]	; (8002744 <StartGyroTask+0x19c>)
 800271a:	e9c1 2300 	strd	r2, r3, [r1]
		i -= angular_speed;
 800271e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	60fb      	str	r3, [r7, #12]
		tick = HAL_GetTick();
 8002728:	f000 ff9e 	bl	8003668 <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	; 0x24
		i++;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3301      	adds	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
		osDelay(100);
 8002734:	e7b5      	b.n	80026a2 <StartGyroTask+0xfa>
 8002736:	bf00      	nop
 8002738:	00000000 	.word	0x00000000
 800273c:	40d00400 	.word	0x40d00400
 8002740:	20000310 	.word	0x20000310
 8002744:	200002d8 	.word	0x200002d8

08002748 <StartUltrasonicTask>:
 * @brief Function implementing the ultrasonicTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUltrasonicTask */
void StartUltrasonicTask(void *argument) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUltrasonicTask */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);  // HC-SR04 Sensor
 8002750:	2100      	movs	r1, #0
 8002752:	4806      	ldr	r0, [pc, #24]	; (800276c <StartUltrasonicTask+0x24>)
 8002754:	f003 f902 	bl	800595c <HAL_TIM_IC_Start_IT>
	osDelay(5000);
 8002758:	f241 3088 	movw	r0, #5000	; 0x1388
 800275c:	f005 fd98 	bl	8008290 <osDelay>



	/* Infinite loop */
	for (;;) {
		HCSR04_Read();
 8002760:	f7ff f8d6 	bl	8001910 <HCSR04_Read>


		osDelay(100);
 8002764:	2064      	movs	r0, #100	; 0x64
 8002766:	f005 fd93 	bl	8008290 <osDelay>
		HCSR04_Read();
 800276a:	e7f9      	b.n	8002760 <StartUltrasonicTask+0x18>
 800276c:	200001b0 	.word	0x200001b0

08002770 <StartCommunicateTask>:
 * @brief Function implementing the communicateTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommunicateTask */
void StartCommunicateTask(void *argument) {
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCommunicateTask */
	char ack = 'A';
 8002778:	2341      	movs	r3, #65	; 0x41
 800277a:	72fb      	strb	r3, [r7, #11]
	int corr = 8;
 800277c:	2308      	movs	r3, #8
 800277e:	60fb      	str	r3, [r7, #12]

	aRxBuffer[0] = 'E';
 8002780:	4b88      	ldr	r3, [pc, #544]	; (80029a4 <StartCommunicateTask+0x234>)
 8002782:	2245      	movs	r2, #69	; 0x45
 8002784:	701a      	strb	r2, [r3, #0]
	aRxBuffer[1] = 'M';
 8002786:	4b87      	ldr	r3, [pc, #540]	; (80029a4 <StartCommunicateTask+0x234>)
 8002788:	224d      	movs	r2, #77	; 0x4d
 800278a:	705a      	strb	r2, [r3, #1]
	aRxBuffer[2] = 'P';
 800278c:	4b85      	ldr	r3, [pc, #532]	; (80029a4 <StartCommunicateTask+0x234>)
 800278e:	2250      	movs	r2, #80	; 0x50
 8002790:	709a      	strb	r2, [r3, #2]
	aRxBuffer[3] = 'T';
 8002792:	4b84      	ldr	r3, [pc, #528]	; (80029a4 <StartCommunicateTask+0x234>)
 8002794:	2254      	movs	r2, #84	; 0x54
 8002796:	70da      	strb	r2, [r3, #3]
	aRxBuffer[4] = 'Y';
 8002798:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <StartCommunicateTask+0x234>)
 800279a:	2259      	movs	r2, #89	; 0x59
 800279c:	711a      	strb	r2, [r3, #4]

	/* Infinite loop */
	for (;;) {

		magnitude = 0;
 800279e:	4b82      	ldr	r3, [pc, #520]	; (80029a8 <StartCommunicateTask+0x238>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
//							aRxBuffer[2] = '0';
//							aRxBuffer[3] = '9';
//							aRxBuffer[4] = '0';
//							k++;
//						}
		if ((aRxBuffer[0] == 'G' && aRxBuffer[1] == 'Y' && aRxBuffer[2] == 'R'
 80027a4:	4b7f      	ldr	r3, [pc, #508]	; (80029a4 <StartCommunicateTask+0x234>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b47      	cmp	r3, #71	; 0x47
 80027aa:	d10f      	bne.n	80027cc <StartCommunicateTask+0x5c>
 80027ac:	4b7d      	ldr	r3, [pc, #500]	; (80029a4 <StartCommunicateTask+0x234>)
 80027ae:	785b      	ldrb	r3, [r3, #1]
 80027b0:	2b59      	cmp	r3, #89	; 0x59
 80027b2:	d10b      	bne.n	80027cc <StartCommunicateTask+0x5c>
 80027b4:	4b7b      	ldr	r3, [pc, #492]	; (80029a4 <StartCommunicateTask+0x234>)
 80027b6:	789b      	ldrb	r3, [r3, #2]
 80027b8:	2b52      	cmp	r3, #82	; 0x52
 80027ba:	d107      	bne.n	80027cc <StartCommunicateTask+0x5c>
				&& aRxBuffer[3] == 'O' && aRxBuffer[4] == 'R')
 80027bc:	4b79      	ldr	r3, [pc, #484]	; (80029a4 <StartCommunicateTask+0x234>)
 80027be:	78db      	ldrb	r3, [r3, #3]
 80027c0:	2b4f      	cmp	r3, #79	; 0x4f
 80027c2:	d103      	bne.n	80027cc <StartCommunicateTask+0x5c>
 80027c4:	4b77      	ldr	r3, [pc, #476]	; (80029a4 <StartCommunicateTask+0x234>)
 80027c6:	791b      	ldrb	r3, [r3, #4]
 80027c8:	2b52      	cmp	r3, #82	; 0x52
 80027ca:	d015      	beq.n	80027f8 <StartCommunicateTask+0x88>
				|| (aRxBuffer[0] == 'S' || aRxBuffer[0] == 'R'
 80027cc:	4b75      	ldr	r3, [pc, #468]	; (80029a4 <StartCommunicateTask+0x234>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b53      	cmp	r3, #83	; 0x53
 80027d2:	d008      	beq.n	80027e6 <StartCommunicateTask+0x76>
 80027d4:	4b73      	ldr	r3, [pc, #460]	; (80029a4 <StartCommunicateTask+0x234>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b52      	cmp	r3, #82	; 0x52
 80027da:	d004      	beq.n	80027e6 <StartCommunicateTask+0x76>
						|| aRxBuffer[0] == 'L')
 80027dc:	4b71      	ldr	r3, [pc, #452]	; (80029a4 <StartCommunicateTask+0x234>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b4c      	cmp	r3, #76	; 0x4c
 80027e2:	f040 80c8 	bne.w	8002976 <StartCommunicateTask+0x206>
						&& (aRxBuffer[1] == 'F' || aRxBuffer[1] == 'B')
 80027e6:	4b6f      	ldr	r3, [pc, #444]	; (80029a4 <StartCommunicateTask+0x234>)
 80027e8:	785b      	ldrb	r3, [r3, #1]
						&& (0 <= aRxBuffer[2] - '0' <= 9)
						&& (0 <= aRxBuffer[3] - '0' <= 9)
						&& (0 <= aRxBuffer[4] - '0' <= 9)) {
 80027ea:	2b46      	cmp	r3, #70	; 0x46
 80027ec:	d004      	beq.n	80027f8 <StartCommunicateTask+0x88>
						&& (aRxBuffer[1] == 'F' || aRxBuffer[1] == 'B')
 80027ee:	4b6d      	ldr	r3, [pc, #436]	; (80029a4 <StartCommunicateTask+0x234>)
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	2b42      	cmp	r3, #66	; 0x42
 80027f4:	f040 80bf 	bne.w	8002976 <StartCommunicateTask+0x206>

			magnitude = ((int) (aRxBuffer[2]) - 48) * 100
 80027f8:	4b6a      	ldr	r3, [pc, #424]	; (80029a4 <StartCommunicateTask+0x234>)
 80027fa:	789b      	ldrb	r3, [r3, #2]
 80027fc:	3b30      	subs	r3, #48	; 0x30
 80027fe:	2264      	movs	r2, #100	; 0x64
 8002800:	fb02 f103 	mul.w	r1, r2, r3
					+ ((int) (aRxBuffer[3]) - 48) * 10
 8002804:	4b67      	ldr	r3, [pc, #412]	; (80029a4 <StartCommunicateTask+0x234>)
 8002806:	78db      	ldrb	r3, [r3, #3]
 8002808:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	18ca      	adds	r2, r1, r3
					+ ((int) (aRxBuffer[4]) - 48);
 8002816:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <StartCommunicateTask+0x234>)
 8002818:	791b      	ldrb	r3, [r3, #4]
 800281a:	3b30      	subs	r3, #48	; 0x30
 800281c:	4413      	add	r3, r2
			magnitude = ((int) (aRxBuffer[2]) - 48) * 100
 800281e:	4a62      	ldr	r2, [pc, #392]	; (80029a8 <StartCommunicateTask+0x238>)
 8002820:	6013      	str	r3, [r2, #0]

			if (aRxBuffer[1] == 'B') {
 8002822:	4b60      	ldr	r3, [pc, #384]	; (80029a4 <StartCommunicateTask+0x234>)
 8002824:	785b      	ldrb	r3, [r3, #1]
 8002826:	2b42      	cmp	r3, #66	; 0x42
 8002828:	d104      	bne.n	8002834 <StartCommunicateTask+0xc4>
				magnitude *= -1;
 800282a:	4b5f      	ldr	r3, [pc, #380]	; (80029a8 <StartCommunicateTask+0x238>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	425b      	negs	r3, r3
 8002830:	4a5d      	ldr	r2, [pc, #372]	; (80029a8 <StartCommunicateTask+0x238>)
 8002832:	6013      	str	r3, [r2, #0]

			}

			osDelay(300);
 8002834:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002838:	f005 fd2a 	bl	8008290 <osDelay>
			switch (aRxBuffer[0]) {
 800283c:	4b59      	ldr	r3, [pc, #356]	; (80029a4 <StartCommunicateTask+0x234>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	3b47      	subs	r3, #71	; 0x47
 8002842:	2b0c      	cmp	r3, #12
 8002844:	f200 8097 	bhi.w	8002976 <StartCommunicateTask+0x206>
 8002848:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <StartCommunicateTask+0xe0>)
 800284a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284e:	bf00      	nop
 8002850:	0800294b 	.word	0x0800294b
 8002854:	08002977 	.word	0x08002977
 8002858:	08002977 	.word	0x08002977
 800285c:	08002977 	.word	0x08002977
 8002860:	08002977 	.word	0x08002977
 8002864:	08002909 	.word	0x08002909
 8002868:	08002977 	.word	0x08002977
 800286c:	08002977 	.word	0x08002977
 8002870:	08002977 	.word	0x08002977
 8002874:	08002977 	.word	0x08002977
 8002878:	08002977 	.word	0x08002977
 800287c:	080028c7 	.word	0x080028c7
 8002880:	08002885 	.word	0x08002885
			case 'S':

				moveCarStraight(magnitude);
 8002884:	4b48      	ldr	r3, [pc, #288]	; (80029a8 <StartCommunicateTask+0x238>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7fd fe43 	bl	8000514 <__aeabi_i2d>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	ec43 2b10 	vmov	d0, r2, r3
 8002896:	f7ff f85b 	bl	8001950 <moveCarStraight>
				flagDone = 1;
 800289a:	4b44      	ldr	r3, [pc, #272]	; (80029ac <StartCommunicateTask+0x23c>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 80028a0:	4b40      	ldr	r3, [pc, #256]	; (80029a4 <StartCommunicateTask+0x234>)
 80028a2:	2244      	movs	r2, #68	; 0x44
 80028a4:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 80028a6:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <StartCommunicateTask+0x234>)
 80028a8:	224f      	movs	r2, #79	; 0x4f
 80028aa:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 80028ac:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <StartCommunicateTask+0x234>)
 80028ae:	224e      	movs	r2, #78	; 0x4e
 80028b0:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 80028b2:	4b3c      	ldr	r3, [pc, #240]	; (80029a4 <StartCommunicateTask+0x234>)
 80028b4:	2245      	movs	r2, #69	; 0x45
 80028b6:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 80028b8:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <StartCommunicateTask+0x234>)
 80028ba:	2221      	movs	r2, #33	; 0x21
 80028bc:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 80028be:	2064      	movs	r0, #100	; 0x64
 80028c0:	f005 fce6 	bl	8008290 <osDelay>
				break;
 80028c4:	e057      	b.n	8002976 <StartCommunicateTask+0x206>
			case 'R':
//				if (aRxBuffer[1] == 'F') {
//					moveCarStraight(corr);
//
//				}
				moveCarRight(magnitude);
 80028c6:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <StartCommunicateTask+0x238>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fe22 	bl	8000514 <__aeabi_i2d>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	ec43 2b10 	vmov	d0, r2, r3
 80028d8:	f7ff f8ca 	bl	8001a70 <moveCarRight>
//				if (aRxBuffer[1] == 'B') {
//				moveCarStraight(-8);
//
//				}
				flagDone = 1;
 80028dc:	4b33      	ldr	r3, [pc, #204]	; (80029ac <StartCommunicateTask+0x23c>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 80028e2:	4b30      	ldr	r3, [pc, #192]	; (80029a4 <StartCommunicateTask+0x234>)
 80028e4:	2244      	movs	r2, #68	; 0x44
 80028e6:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 80028e8:	4b2e      	ldr	r3, [pc, #184]	; (80029a4 <StartCommunicateTask+0x234>)
 80028ea:	224f      	movs	r2, #79	; 0x4f
 80028ec:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 80028ee:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <StartCommunicateTask+0x234>)
 80028f0:	224e      	movs	r2, #78	; 0x4e
 80028f2:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <StartCommunicateTask+0x234>)
 80028f6:	2245      	movs	r2, #69	; 0x45
 80028f8:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 80028fa:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <StartCommunicateTask+0x234>)
 80028fc:	2221      	movs	r2, #33	; 0x21
 80028fe:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 8002900:	2064      	movs	r0, #100	; 0x64
 8002902:	f005 fcc5 	bl	8008290 <osDelay>
				break;
 8002906:	e036      	b.n	8002976 <StartCommunicateTask+0x206>
//				if (aRxBuffer[1] == 'F') {
//					moveCarStraight(corr);
//
//				}

				moveCarLeft(magnitude);
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <StartCommunicateTask+0x238>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fe01 	bl	8000514 <__aeabi_i2d>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	ec43 2b10 	vmov	d0, r2, r3
 800291a:	f7ff f8db 	bl	8001ad4 <moveCarLeft>
//				if (aRxBuffer[1] == 'B') {
//				moveCarStraight(-8);
//
//				}
				flagDone = 1;
 800291e:	4b23      	ldr	r3, [pc, #140]	; (80029ac <StartCommunicateTask+0x23c>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 8002924:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <StartCommunicateTask+0x234>)
 8002926:	2244      	movs	r2, #68	; 0x44
 8002928:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <StartCommunicateTask+0x234>)
 800292c:	224f      	movs	r2, #79	; 0x4f
 800292e:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 8002930:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <StartCommunicateTask+0x234>)
 8002932:	224e      	movs	r2, #78	; 0x4e
 8002934:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <StartCommunicateTask+0x234>)
 8002938:	2245      	movs	r2, #69	; 0x45
 800293a:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <StartCommunicateTask+0x234>)
 800293e:	2221      	movs	r2, #33	; 0x21
 8002940:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 8002942:	2064      	movs	r0, #100	; 0x64
 8002944:	f005 fca4 	bl	8008290 <osDelay>
				break;
 8002948:	e015      	b.n	8002976 <StartCommunicateTask+0x206>
			case 'G':
				//NVIC_SystemReset();
				flagDone = 1;
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <StartCommunicateTask+0x23c>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <StartCommunicateTask+0x234>)
 8002952:	2244      	movs	r2, #68	; 0x44
 8002954:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <StartCommunicateTask+0x234>)
 8002958:	224f      	movs	r2, #79	; 0x4f
 800295a:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <StartCommunicateTask+0x234>)
 800295e:	224e      	movs	r2, #78	; 0x4e
 8002960:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <StartCommunicateTask+0x234>)
 8002964:	2245      	movs	r2, #69	; 0x45
 8002966:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <StartCommunicateTask+0x234>)
 800296a:	2221      	movs	r2, #33	; 0x21
 800296c:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 800296e:	2064      	movs	r0, #100	; 0x64
 8002970:	f005 fc8e 	bl	8008290 <osDelay>
				break;
 8002974:	bf00      	nop
//				break;
			}
		}


		if (flagDone == 1) {
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <StartCommunicateTask+0x23c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d10d      	bne.n	800299a <StartCommunicateTask+0x22a>
			osDelay(100);
 800297e:	2064      	movs	r0, #100	; 0x64
 8002980:	f005 fc86 	bl	8008290 <osDelay>
			HAL_UART_Transmit(&huart3, (uint8_t*) &ack, 1, 0xFFFF);
 8002984:	f107 010b 	add.w	r1, r7, #11
 8002988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800298c:	2201      	movs	r2, #1
 800298e:	4808      	ldr	r0, [pc, #32]	; (80029b0 <StartCommunicateTask+0x240>)
 8002990:	f004 fb43 	bl	800701a <HAL_UART_Transmit>
			flagDone = 0;
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <StartCommunicateTask+0x23c>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
		}

		osDelay(100);
 800299a:	2064      	movs	r0, #100	; 0x64
 800299c:	f005 fc78 	bl	8008290 <osDelay>
		magnitude = 0;
 80029a0:	e6fd      	b.n	800279e <StartCommunicateTask+0x2e>
 80029a2:	bf00      	nop
 80029a4:	200002a4 	.word	0x200002a4
 80029a8:	200002b0 	.word	0x200002b0
 80029ac:	200002ac 	.word	0x200002ac
 80029b0:	20000240 	.word	0x20000240

080029b4 <StartEncoderRTask>:
 * @brief Function implementing the encoderRTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderRTask */
void StartEncoderRTask(void *argument) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderRTask */
	/* Infinite loop */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80029bc:	213c      	movs	r1, #60	; 0x3c
 80029be:	481d      	ldr	r0, [pc, #116]	; (8002a34 <StartEncoderRTask+0x80>)
 80029c0:	f003 f99a 	bl	8005cf8 <HAL_TIM_Encoder_Start>
	int cnt1;
	int dirR = 1;
 80029c4:	2301      	movs	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 80029c8:	f000 fe4e 	bl	8003668 <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 80029ce:	f000 fe4b 	bl	8003668 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b0a      	cmp	r3, #10
 80029da:	d9f8      	bls.n	80029ce <StartEncoderRTask+0x1a>
			cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 80029dc:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <StartEncoderRTask+0x80>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	60bb      	str	r3, [r7, #8]
			if (cnt1 > 32000) {
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80029ea:	dd06      	ble.n	80029fa <StartEncoderRTask+0x46>
				dirR = 1;
 80029ec:	2301      	movs	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt1);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	e004      	b.n	8002a04 <StartEncoderRTask+0x50>
			} else {
				dirR = -1;
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295
 80029fe:	617b      	str	r3, [r7, #20]
				diff = cnt1;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	613b      	str	r3, [r7, #16]
			}

			if (dirR == 1) {
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d106      	bne.n	8002a18 <StartEncoderRTask+0x64>
				rightEncoderVal -= diff;
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <StartEncoderRTask+0x84>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <StartEncoderRTask+0x84>)
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e005      	b.n	8002a24 <StartEncoderRTask+0x70>
			} else {
				rightEncoderVal += diff;
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <StartEncoderRTask+0x84>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a05      	ldr	r2, [pc, #20]	; (8002a38 <StartEncoderRTask+0x84>)
 8002a22:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <StartEncoderRTask+0x80>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8002a2c:	f000 fe1c 	bl	8003668 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - tick > 10L) {
 8002a32:	e7cc      	b.n	80029ce <StartEncoderRTask+0x1a>
 8002a34:	20000168 	.word	0x20000168
 8002a38:	200002c0 	.word	0x200002c0

08002a3c <StartEncoderLTask>:
 * @brief Function implementing the encoderLTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderLTask */
void StartEncoderLTask(void *argument) {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderLTask */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002a44:	213c      	movs	r1, #60	; 0x3c
 8002a46:	481d      	ldr	r0, [pc, #116]	; (8002abc <StartEncoderLTask+0x80>)
 8002a48:	f003 f956 	bl	8005cf8 <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8002a50:	f000 fe0a 	bl	8003668 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 8002a56:	f000 fe07 	bl	8003668 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b0a      	cmp	r3, #10
 8002a62:	d9f8      	bls.n	8002a56 <StartEncoderLTask+0x1a>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8002a64:	4b15      	ldr	r3, [pc, #84]	; (8002abc <StartEncoderLTask+0x80>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	60bb      	str	r3, [r7, #8]

			if (cnt2 > 32000) {
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002a72:	dd06      	ble.n	8002a82 <StartEncoderLTask+0x46>
				dirL = 1;
 8002a74:	2301      	movs	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	e004      	b.n	8002a8c <StartEncoderLTask+0x50>
			} else {
				dirL = -1;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	613b      	str	r3, [r7, #16]
			}
			if (dirL == 1) {
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d106      	bne.n	8002aa0 <StartEncoderLTask+0x64>
				leftEncoderVal += diff;
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <StartEncoderLTask+0x84>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4413      	add	r3, r2
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <StartEncoderLTask+0x84>)
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e005      	b.n	8002aac <StartEncoderLTask+0x70>
			} else {
				leftEncoderVal -= diff;
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <StartEncoderLTask+0x84>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <StartEncoderLTask+0x84>)
 8002aaa:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <StartEncoderLTask+0x80>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8002ab4:	f000 fdd8 	bl	8003668 <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - tick > 10L) {
 8002aba:	e7cc      	b.n	8002a56 <StartEncoderLTask+0x1a>
 8002abc:	20000120 	.word	0x20000120
 8002ac0:	200002c4 	.word	0x200002c4

08002ac4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac8:	b672      	cpsid	i
}
 8002aca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002acc:	e7fe      	b.n	8002acc <Error_Handler+0x8>
	...

08002ad0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <HAL_MspInit+0x64>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <HAL_MspInit+0x64>)
 8002ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <HAL_MspInit+0x64>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <HAL_MspInit+0x64>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a0e      	ldr	r2, [pc, #56]	; (8002b34 <HAL_MspInit+0x64>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <HAL_MspInit+0x64>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	210f      	movs	r1, #15
 8002b12:	f06f 0001 	mvn.w	r0, #1
 8002b16:	f000 feb2 	bl	800387e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2105      	movs	r1, #5
 8002b1e:	2005      	movs	r0, #5
 8002b20:	f000 fead 	bl	800387e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002b24:	2005      	movs	r0, #5
 8002b26:	f000 fec6 	bl	80038b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800

08002b38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08a      	sub	sp, #40	; 0x28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <HAL_I2C_MspInit+0x84>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d12c      	bne.n	8002bb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <HAL_I2C_MspInit+0x88>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <HAL_I2C_MspInit+0x88>)
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <HAL_I2C_MspInit+0x88>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b7c:	2312      	movs	r3, #18
 8002b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b84:	2303      	movs	r3, #3
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b88:	2304      	movs	r3, #4
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	4619      	mov	r1, r3
 8002b92:	480c      	ldr	r0, [pc, #48]	; (8002bc4 <HAL_I2C_MspInit+0x8c>)
 8002b94:	f000 ff3c 	bl	8003a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_I2C_MspInit+0x88>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_I2C_MspInit+0x88>)
 8002ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_I2C_MspInit+0x88>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bb4:	bf00      	nop
 8002bb6:	3728      	adds	r7, #40	; 0x28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40005400 	.word	0x40005400
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020400 	.word	0x40020400

08002bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2f      	ldr	r2, [pc, #188]	; (8002ca4 <HAL_TIM_Base_MspInit+0xdc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d11e      	bne.n	8002c28 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b2e      	ldr	r3, [pc, #184]	; (8002ca8 <HAL_TIM_Base_MspInit+0xe0>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	4a2d      	ldr	r2, [pc, #180]	; (8002ca8 <HAL_TIM_Base_MspInit+0xe0>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_TIM_Base_MspInit+0xe0>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2105      	movs	r1, #5
 8002c0a:	2018      	movs	r0, #24
 8002c0c:	f000 fe37 	bl	800387e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002c10:	2018      	movs	r0, #24
 8002c12:	f000 fe50 	bl	80038b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2105      	movs	r1, #5
 8002c1a:	2019      	movs	r0, #25
 8002c1c:	f000 fe2f 	bl	800387e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c20:	2019      	movs	r0, #25
 8002c22:	f000 fe48 	bl	80038b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002c26:	e038      	b.n	8002c9a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM8)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1f      	ldr	r2, [pc, #124]	; (8002cac <HAL_TIM_Base_MspInit+0xe4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d133      	bne.n	8002c9a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <HAL_TIM_Base_MspInit+0xe0>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <HAL_TIM_Base_MspInit+0xe0>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	6453      	str	r3, [r2, #68]	; 0x44
 8002c42:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_TIM_Base_MspInit+0xe0>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <HAL_TIM_Base_MspInit+0xe0>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <HAL_TIM_Base_MspInit+0xe0>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_TIM_Base_MspInit+0xe0>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002c6a:	23c0      	movs	r3, #192	; 0xc0
 8002c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	2300      	movs	r3, #0
 8002c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c7e:	f107 0314 	add.w	r3, r7, #20
 8002c82:	4619      	mov	r1, r3
 8002c84:	480a      	ldr	r0, [pc, #40]	; (8002cb0 <HAL_TIM_Base_MspInit+0xe8>)
 8002c86:	f000 fec3 	bl	8003a10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2105      	movs	r1, #5
 8002c8e:	202d      	movs	r0, #45	; 0x2d
 8002c90:	f000 fdf5 	bl	800387e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002c94:	202d      	movs	r0, #45	; 0x2d
 8002c96:	f000 fe0e 	bl	80038b6 <HAL_NVIC_EnableIRQ>
}
 8002c9a:	bf00      	nop
 8002c9c:	3728      	adds	r7, #40	; 0x28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40010400 	.word	0x40010400
 8002cb0:	40020800 	.word	0x40020800

08002cb4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08c      	sub	sp, #48	; 0x30
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbc:	f107 031c 	add.w	r3, r7, #28
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd4:	d14b      	bne.n	8002d6e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a3e      	ldr	r2, [pc, #248]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b3c      	ldr	r3, [pc, #240]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a37      	ldr	r2, [pc, #220]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a30      	ldr	r2, [pc, #192]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b2e      	ldr	r3, [pc, #184]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 8002d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 8002d40:	f107 031c 	add.w	r3, r7, #28
 8002d44:	4619      	mov	r1, r3
 8002d46:	4825      	ldr	r0, [pc, #148]	; (8002ddc <HAL_TIM_Encoder_MspInit+0x128>)
 8002d48:	f000 fe62 	bl	8003a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 8002d4c:	2308      	movs	r3, #8
 8002d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	2302      	movs	r3, #2
 8002d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 8002d60:	f107 031c 	add.w	r3, r7, #28
 8002d64:	4619      	mov	r1, r3
 8002d66:	481e      	ldr	r0, [pc, #120]	; (8002de0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002d68:	f000 fe52 	bl	8003a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d6c:	e030      	b.n	8002dd0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1c      	ldr	r2, [pc, #112]	; (8002de4 <HAL_TIM_Encoder_MspInit+0x130>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d12b      	bne.n	8002dd0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	4a15      	ldr	r2, [pc, #84]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d82:	f043 0302 	orr.w	r3, r3, #2
 8002d86:	6413      	str	r3, [r2, #64]	; 0x40
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6313      	str	r3, [r2, #48]	; 0x30
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 8002db0:	23c0      	movs	r3, #192	; 0xc0
 8002db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	f107 031c 	add.w	r3, r7, #28
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4804      	ldr	r0, [pc, #16]	; (8002ddc <HAL_TIM_Encoder_MspInit+0x128>)
 8002dcc:	f000 fe20 	bl	8003a10 <HAL_GPIO_Init>
}
 8002dd0:	bf00      	nop
 8002dd2:	3730      	adds	r7, #48	; 0x30
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40020400 	.word	0x40020400
 8002de4:	40000400 	.word	0x40000400

08002de8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1d      	ldr	r2, [pc, #116]	; (8002e7c <HAL_TIM_IC_MspInit+0x94>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d134      	bne.n	8002e74 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <HAL_TIM_IC_MspInit+0x98>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <HAL_TIM_IC_MspInit+0x98>)
 8002e14:	f043 0304 	orr.w	r3, r3, #4
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <HAL_TIM_IC_MspInit+0x98>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <HAL_TIM_IC_MspInit+0x98>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <HAL_TIM_IC_MspInit+0x98>)
 8002e30:	f043 0308 	orr.w	r3, r3, #8
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_TIM_IC_MspInit+0x98>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8002e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e50:	2300      	movs	r3, #0
 8002e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e54:	2302      	movs	r3, #2
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4809      	ldr	r0, [pc, #36]	; (8002e84 <HAL_TIM_IC_MspInit+0x9c>)
 8002e60:	f000 fdd6 	bl	8003a10 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002e64:	2200      	movs	r2, #0
 8002e66:	2105      	movs	r1, #5
 8002e68:	201e      	movs	r0, #30
 8002e6a:	f000 fd08 	bl	800387e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e6e:	201e      	movs	r0, #30
 8002e70:	f000 fd21 	bl	80038b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e74:	bf00      	nop
 8002e76:	3728      	adds	r7, #40	; 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40000800 	.word	0x40000800
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020c00 	.word	0x40020c00

08002e88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 030c 	add.w	r3, r7, #12
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <HAL_TIM_MspPostInit+0x68>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d11e      	bne.n	8002ee8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_TIM_MspPostInit+0x6c>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a10      	ldr	r2, [pc, #64]	; (8002ef4 <HAL_TIM_MspPostInit+0x6c>)
 8002eb4:	f043 0310 	orr.w	r3, r3, #16
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <HAL_TIM_MspPostInit+0x6c>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ec6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002edc:	f107 030c 	add.w	r3, r7, #12
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4805      	ldr	r0, [pc, #20]	; (8002ef8 <HAL_TIM_MspPostInit+0x70>)
 8002ee4:	f000 fd94 	bl	8003a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ee8:	bf00      	nop
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40010000 	.word	0x40010000
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40021000 	.word	0x40021000

08002efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <HAL_UART_MspInit+0x94>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d134      	bne.n	8002f88 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_UART_MspInit+0x98>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a1b      	ldr	r2, [pc, #108]	; (8002f94 <HAL_UART_MspInit+0x98>)
 8002f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_UART_MspInit+0x98>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_UART_MspInit+0x98>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <HAL_UART_MspInit+0x98>)
 8002f44:	f043 0304 	orr.w	r3, r3, #4
 8002f48:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_UART_MspInit+0x98>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f64:	2303      	movs	r3, #3
 8002f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f68:	2307      	movs	r3, #7
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	4619      	mov	r1, r3
 8002f72:	4809      	ldr	r0, [pc, #36]	; (8002f98 <HAL_UART_MspInit+0x9c>)
 8002f74:	f000 fd4c 	bl	8003a10 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2105      	movs	r1, #5
 8002f7c:	2027      	movs	r0, #39	; 0x27
 8002f7e:	f000 fc7e 	bl	800387e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f82:	2027      	movs	r0, #39	; 0x27
 8002f84:	f000 fc97 	bl	80038b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f88:	bf00      	nop
 8002f8a:	3728      	adds	r7, #40	; 0x28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40004800 	.word	0x40004800
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40020800 	.word	0x40020800

08002f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fa0:	e7fe      	b.n	8002fa0 <NMI_Handler+0x4>

08002fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa6:	e7fe      	b.n	8002fa6 <HardFault_Handler+0x4>

08002fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fac:	e7fe      	b.n	8002fac <MemManage_Handler+0x4>

08002fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fb2:	e7fe      	b.n	8002fb2 <BusFault_Handler+0x4>

08002fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb8:	e7fe      	b.n	8002fb8 <UsageFault_Handler+0x4>

08002fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fcc:	f000 fb38 	bl	8003640 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002fd0:	f006 fd96 	bl	8009b00 <xTaskGetSchedulerState>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d001      	beq.n	8002fde <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002fda:	f007 fb7d 	bl	800a6d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ff4:	4802      	ldr	r0, [pc, #8]	; (8003000 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002ff6:	f002 ff0d 	bl	8005e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	200000d8 	.word	0x200000d8

08003004 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800300a:	f002 ff03 	bl	8005e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200000d8 	.word	0x200000d8

08003018 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800301c:	4802      	ldr	r0, [pc, #8]	; (8003028 <TIM4_IRQHandler+0x10>)
 800301e:	f002 fef9 	bl	8005e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200001b0 	.word	0x200001b0

0800302c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003030:	4802      	ldr	r0, [pc, #8]	; (800303c <USART3_IRQHandler+0x10>)
 8003032:	f004 f8b5 	bl	80071a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000240 	.word	0x20000240

08003040 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003046:	f002 fee5 	bl	8005e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	200001f8 	.word	0x200001f8

08003054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800305c:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <_sbrk+0x5c>)
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <_sbrk+0x60>)
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <_sbrk+0x64>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d102      	bne.n	8003076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <_sbrk+0x64>)
 8003072:	4a12      	ldr	r2, [pc, #72]	; (80030bc <_sbrk+0x68>)
 8003074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <_sbrk+0x64>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	429a      	cmp	r2, r3
 8003082:	d207      	bcs.n	8003094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003084:	f007 fe20 	bl	800acc8 <__errno>
 8003088:	4603      	mov	r3, r0
 800308a:	220c      	movs	r2, #12
 800308c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800308e:	f04f 33ff 	mov.w	r3, #4294967295
 8003092:	e009      	b.n	80030a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <_sbrk+0x64>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <_sbrk+0x64>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	4a05      	ldr	r2, [pc, #20]	; (80030b8 <_sbrk+0x64>)
 80030a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030a6:	68fb      	ldr	r3, [r7, #12]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20020000 	.word	0x20020000
 80030b4:	00000400 	.word	0x00000400
 80030b8:	20000314 	.word	0x20000314
 80030bc:	20005250 	.word	0x20005250

080030c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <SystemInit+0x20>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	4a05      	ldr	r2, [pc, #20]	; (80030e0 <SystemInit+0x20>)
 80030cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800311c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030e8:	480d      	ldr	r0, [pc, #52]	; (8003120 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030ea:	490e      	ldr	r1, [pc, #56]	; (8003124 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030ec:	4a0e      	ldr	r2, [pc, #56]	; (8003128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030f0:	e002      	b.n	80030f8 <LoopCopyDataInit>

080030f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030f6:	3304      	adds	r3, #4

080030f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030fc:	d3f9      	bcc.n	80030f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030fe:	4a0b      	ldr	r2, [pc, #44]	; (800312c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003100:	4c0b      	ldr	r4, [pc, #44]	; (8003130 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003104:	e001      	b.n	800310a <LoopFillZerobss>

08003106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003108:	3204      	adds	r2, #4

0800310a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800310a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800310c:	d3fb      	bcc.n	8003106 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800310e:	f7ff ffd7 	bl	80030c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003112:	f007 fddf 	bl	800acd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003116:	f7fd fec7 	bl	8000ea8 <main>
  bx  lr    
 800311a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800311c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003124:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8003128:	0800c288 	.word	0x0800c288
  ldr r2, =_sbss
 800312c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003130:	2000524c 	.word	0x2000524c

08003134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003134:	e7fe      	b.n	8003134 <ADC_IRQHandler>
	...

08003138 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800313e:	2300      	movs	r3, #0
 8003140:	71fb      	strb	r3, [r7, #7]
 8003142:	e026      	b.n	8003192 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	3b50      	subs	r3, #80	; 0x50
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f82b 	bl	80031a8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8003152:	2100      	movs	r1, #0
 8003154:	2000      	movs	r0, #0
 8003156:	f000 f827 	bl	80031a8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800315a:	2100      	movs	r1, #0
 800315c:	2010      	movs	r0, #16
 800315e:	f000 f823 	bl	80031a8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8003162:	2300      	movs	r3, #0
 8003164:	71bb      	strb	r3, [r7, #6]
 8003166:	e00d      	b.n	8003184 <OLED_Refresh_Gram+0x4c>
 8003168:	79ba      	ldrb	r2, [r7, #6]
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	490d      	ldr	r1, [pc, #52]	; (80031a4 <OLED_Refresh_Gram+0x6c>)
 800316e:	00d2      	lsls	r2, r2, #3
 8003170:	440a      	add	r2, r1
 8003172:	4413      	add	r3, r2
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f815 	bl	80031a8 <OLED_WR_Byte>
 800317e:	79bb      	ldrb	r3, [r7, #6]
 8003180:	3301      	adds	r3, #1
 8003182:	71bb      	strb	r3, [r7, #6]
 8003184:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003188:	2b00      	cmp	r3, #0
 800318a:	daed      	bge.n	8003168 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	3301      	adds	r3, #1
 8003190:	71fb      	strb	r3, [r7, #7]
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	2b07      	cmp	r3, #7
 8003196:	d9d5      	bls.n	8003144 <OLED_Refresh_Gram+0xc>
	}   
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000318 	.word	0x20000318

080031a8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	460a      	mov	r2, r1
 80031b2:	71fb      	strb	r3, [r7, #7]
 80031b4:	4613      	mov	r3, r2
 80031b6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80031b8:	79bb      	ldrb	r3, [r7, #6]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80031be:	2201      	movs	r2, #1
 80031c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031c4:	481c      	ldr	r0, [pc, #112]	; (8003238 <OLED_WR_Byte+0x90>)
 80031c6:	f000 fdbf 	bl	8003d48 <HAL_GPIO_WritePin>
 80031ca:	e005      	b.n	80031d8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80031cc:	2200      	movs	r2, #0
 80031ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031d2:	4819      	ldr	r0, [pc, #100]	; (8003238 <OLED_WR_Byte+0x90>)
 80031d4:	f000 fdb8 	bl	8003d48 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e01e      	b.n	800321c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80031de:	2200      	movs	r2, #0
 80031e0:	2120      	movs	r1, #32
 80031e2:	4815      	ldr	r0, [pc, #84]	; (8003238 <OLED_WR_Byte+0x90>)
 80031e4:	f000 fdb0 	bl	8003d48 <HAL_GPIO_WritePin>
		if(dat&0x80)
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	da05      	bge.n	80031fc <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80031f0:	2201      	movs	r2, #1
 80031f2:	2140      	movs	r1, #64	; 0x40
 80031f4:	4810      	ldr	r0, [pc, #64]	; (8003238 <OLED_WR_Byte+0x90>)
 80031f6:	f000 fda7 	bl	8003d48 <HAL_GPIO_WritePin>
 80031fa:	e004      	b.n	8003206 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80031fc:	2200      	movs	r2, #0
 80031fe:	2140      	movs	r1, #64	; 0x40
 8003200:	480d      	ldr	r0, [pc, #52]	; (8003238 <OLED_WR_Byte+0x90>)
 8003202:	f000 fda1 	bl	8003d48 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8003206:	2201      	movs	r2, #1
 8003208:	2120      	movs	r1, #32
 800320a:	480b      	ldr	r0, [pc, #44]	; (8003238 <OLED_WR_Byte+0x90>)
 800320c:	f000 fd9c 	bl	8003d48 <HAL_GPIO_WritePin>
		dat<<=1;   
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	3301      	adds	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b07      	cmp	r3, #7
 8003220:	d9dd      	bls.n	80031de <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8003222:	2201      	movs	r2, #1
 8003224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003228:	4803      	ldr	r0, [pc, #12]	; (8003238 <OLED_WR_Byte+0x90>)
 800322a:	f000 fd8d 	bl	8003d48 <HAL_GPIO_WritePin>
} 
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000

0800323c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8003242:	2300      	movs	r3, #0
 8003244:	71fb      	strb	r3, [r7, #7]
 8003246:	e014      	b.n	8003272 <OLED_Clear+0x36>
 8003248:	2300      	movs	r3, #0
 800324a:	71bb      	strb	r3, [r7, #6]
 800324c:	e00a      	b.n	8003264 <OLED_Clear+0x28>
 800324e:	79ba      	ldrb	r2, [r7, #6]
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	490c      	ldr	r1, [pc, #48]	; (8003284 <OLED_Clear+0x48>)
 8003254:	00d2      	lsls	r2, r2, #3
 8003256:	440a      	add	r2, r1
 8003258:	4413      	add	r3, r2
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	79bb      	ldrb	r3, [r7, #6]
 8003260:	3301      	adds	r3, #1
 8003262:	71bb      	strb	r3, [r7, #6]
 8003264:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003268:	2b00      	cmp	r3, #0
 800326a:	daf0      	bge.n	800324e <OLED_Clear+0x12>
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	3301      	adds	r3, #1
 8003270:	71fb      	strb	r3, [r7, #7]
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	2b07      	cmp	r3, #7
 8003276:	d9e7      	bls.n	8003248 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8003278:	f7ff ff5e 	bl	8003138 <OLED_Refresh_Gram>
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20000318 	.word	0x20000318

08003288 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
 8003292:	460b      	mov	r3, r1
 8003294:	71bb      	strb	r3, [r7, #6]
 8003296:	4613      	mov	r3, r2
 8003298:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	db41      	blt.n	800332a <OLED_DrawPoint+0xa2>
 80032a6:	79bb      	ldrb	r3, [r7, #6]
 80032a8:	2b3f      	cmp	r3, #63	; 0x3f
 80032aa:	d83e      	bhi.n	800332a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80032ac:	79bb      	ldrb	r3, [r7, #6]
 80032ae:	08db      	lsrs	r3, r3, #3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f1c3 0307 	rsb	r3, r3, #7
 80032b6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80032b8:	79bb      	ldrb	r3, [r7, #6]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80032c0:	7b7b      	ldrb	r3, [r7, #13]
 80032c2:	f1c3 0307 	rsb	r3, r3, #7
 80032c6:	2201      	movs	r2, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80032ce:	797b      	ldrb	r3, [r7, #5]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d012      	beq.n	80032fa <OLED_DrawPoint+0x72>
 80032d4:	79fa      	ldrb	r2, [r7, #7]
 80032d6:	7bbb      	ldrb	r3, [r7, #14]
 80032d8:	4917      	ldr	r1, [pc, #92]	; (8003338 <OLED_DrawPoint+0xb0>)
 80032da:	00d2      	lsls	r2, r2, #3
 80032dc:	440a      	add	r2, r1
 80032de:	4413      	add	r3, r2
 80032e0:	7818      	ldrb	r0, [r3, #0]
 80032e2:	79fa      	ldrb	r2, [r7, #7]
 80032e4:	7bbb      	ldrb	r3, [r7, #14]
 80032e6:	7bf9      	ldrb	r1, [r7, #15]
 80032e8:	4301      	orrs	r1, r0
 80032ea:	b2c8      	uxtb	r0, r1
 80032ec:	4912      	ldr	r1, [pc, #72]	; (8003338 <OLED_DrawPoint+0xb0>)
 80032ee:	00d2      	lsls	r2, r2, #3
 80032f0:	440a      	add	r2, r1
 80032f2:	4413      	add	r3, r2
 80032f4:	4602      	mov	r2, r0
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	e018      	b.n	800332c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80032fa:	79fa      	ldrb	r2, [r7, #7]
 80032fc:	7bbb      	ldrb	r3, [r7, #14]
 80032fe:	490e      	ldr	r1, [pc, #56]	; (8003338 <OLED_DrawPoint+0xb0>)
 8003300:	00d2      	lsls	r2, r2, #3
 8003302:	440a      	add	r2, r1
 8003304:	4413      	add	r3, r2
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	b25a      	sxtb	r2, r3
 800330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330e:	43db      	mvns	r3, r3
 8003310:	b25b      	sxtb	r3, r3
 8003312:	4013      	ands	r3, r2
 8003314:	b259      	sxtb	r1, r3
 8003316:	79fa      	ldrb	r2, [r7, #7]
 8003318:	7bbb      	ldrb	r3, [r7, #14]
 800331a:	b2c8      	uxtb	r0, r1
 800331c:	4906      	ldr	r1, [pc, #24]	; (8003338 <OLED_DrawPoint+0xb0>)
 800331e:	00d2      	lsls	r2, r2, #3
 8003320:	440a      	add	r2, r1
 8003322:	4413      	add	r3, r2
 8003324:	4602      	mov	r2, r0
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e000      	b.n	800332c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800332a:	bf00      	nop
}
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000318 	.word	0x20000318

0800333c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	4604      	mov	r4, r0
 8003344:	4608      	mov	r0, r1
 8003346:	4611      	mov	r1, r2
 8003348:	461a      	mov	r2, r3
 800334a:	4623      	mov	r3, r4
 800334c:	71fb      	strb	r3, [r7, #7]
 800334e:	4603      	mov	r3, r0
 8003350:	71bb      	strb	r3, [r7, #6]
 8003352:	460b      	mov	r3, r1
 8003354:	717b      	strb	r3, [r7, #5]
 8003356:	4613      	mov	r3, r2
 8003358:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800335a:	79bb      	ldrb	r3, [r7, #6]
 800335c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800335e:	797b      	ldrb	r3, [r7, #5]
 8003360:	3b20      	subs	r3, #32
 8003362:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8003364:	2300      	movs	r3, #0
 8003366:	73bb      	strb	r3, [r7, #14]
 8003368:	e04d      	b.n	8003406 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800336a:	793b      	ldrb	r3, [r7, #4]
 800336c:	2b0c      	cmp	r3, #12
 800336e:	d10b      	bne.n	8003388 <OLED_ShowChar+0x4c>
 8003370:	797a      	ldrb	r2, [r7, #5]
 8003372:	7bb9      	ldrb	r1, [r7, #14]
 8003374:	4828      	ldr	r0, [pc, #160]	; (8003418 <OLED_ShowChar+0xdc>)
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4403      	add	r3, r0
 8003380:	440b      	add	r3, r1
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	73fb      	strb	r3, [r7, #15]
 8003386:	e007      	b.n	8003398 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8003388:	797a      	ldrb	r2, [r7, #5]
 800338a:	7bbb      	ldrb	r3, [r7, #14]
 800338c:	4923      	ldr	r1, [pc, #140]	; (800341c <OLED_ShowChar+0xe0>)
 800338e:	0112      	lsls	r2, r2, #4
 8003390:	440a      	add	r2, r1
 8003392:	4413      	add	r3, r2
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8003398:	2300      	movs	r3, #0
 800339a:	737b      	strb	r3, [r7, #13]
 800339c:	e02d      	b.n	80033fa <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	da07      	bge.n	80033b6 <OLED_ShowChar+0x7a>
 80033a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80033aa:	79b9      	ldrb	r1, [r7, #6]
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff ff6a 	bl	8003288 <OLED_DrawPoint>
 80033b4:	e00c      	b.n	80033d0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80033b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	79b9      	ldrb	r1, [r7, #6]
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff ff5c 	bl	8003288 <OLED_DrawPoint>
			temp<<=1;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
			y++;
 80033d6:	79bb      	ldrb	r3, [r7, #6]
 80033d8:	3301      	adds	r3, #1
 80033da:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80033dc:	79ba      	ldrb	r2, [r7, #6]
 80033de:	7b3b      	ldrb	r3, [r7, #12]
 80033e0:	1ad2      	subs	r2, r2, r3
 80033e2:	793b      	ldrb	r3, [r7, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d105      	bne.n	80033f4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80033e8:	7b3b      	ldrb	r3, [r7, #12]
 80033ea:	71bb      	strb	r3, [r7, #6]
				x++;
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	3301      	adds	r3, #1
 80033f0:	71fb      	strb	r3, [r7, #7]
				break;
 80033f2:	e005      	b.n	8003400 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80033f4:	7b7b      	ldrb	r3, [r7, #13]
 80033f6:	3301      	adds	r3, #1
 80033f8:	737b      	strb	r3, [r7, #13]
 80033fa:	7b7b      	ldrb	r3, [r7, #13]
 80033fc:	2b07      	cmp	r3, #7
 80033fe:	d9ce      	bls.n	800339e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8003400:	7bbb      	ldrb	r3, [r7, #14]
 8003402:	3301      	adds	r3, #1
 8003404:	73bb      	strb	r3, [r7, #14]
 8003406:	7bba      	ldrb	r2, [r7, #14]
 8003408:	793b      	ldrb	r3, [r7, #4]
 800340a:	429a      	cmp	r2, r3
 800340c:	d3ad      	bcc.n	800336a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800340e:	bf00      	nop
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	bd90      	pop	{r4, r7, pc}
 8003418:	0800b7e0 	.word	0x0800b7e0
 800341c:	0800bc54 	.word	0x0800bc54

08003420 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af02      	add	r7, sp, #8
 8003426:	4603      	mov	r3, r0
 8003428:	603a      	str	r2, [r7, #0]
 800342a:	71fb      	strb	r3, [r7, #7]
 800342c:	460b      	mov	r3, r1
 800342e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8003430:	e01f      	b.n	8003472 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	2b7a      	cmp	r3, #122	; 0x7a
 8003436:	d904      	bls.n	8003442 <OLED_ShowString+0x22>
 8003438:	2300      	movs	r3, #0
 800343a:	71fb      	strb	r3, [r7, #7]
 800343c:	79bb      	ldrb	r3, [r7, #6]
 800343e:	3310      	adds	r3, #16
 8003440:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8003442:	79bb      	ldrb	r3, [r7, #6]
 8003444:	2b3a      	cmp	r3, #58	; 0x3a
 8003446:	d905      	bls.n	8003454 <OLED_ShowString+0x34>
 8003448:	2300      	movs	r3, #0
 800344a:	71fb      	strb	r3, [r7, #7]
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	71bb      	strb	r3, [r7, #6]
 8003450:	f7ff fef4 	bl	800323c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	79b9      	ldrb	r1, [r7, #6]
 800345a:	79f8      	ldrb	r0, [r7, #7]
 800345c:	2301      	movs	r3, #1
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	230c      	movs	r3, #12
 8003462:	f7ff ff6b 	bl	800333c <OLED_ShowChar>
        x+=8;
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	3308      	adds	r3, #8
 800346a:	71fb      	strb	r3, [r7, #7]
        p++;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	3301      	adds	r3, #1
 8003470:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1db      	bne.n	8003432 <OLED_ShowString+0x12>
    }  
}	 
 800347a:	bf00      	nop
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <OLED_Init>:

void OLED_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8003488:	f001 fc28 	bl	8004cdc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800348c:	4b41      	ldr	r3, [pc, #260]	; (8003594 <OLED_Init+0x110>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	4a40      	ldr	r2, [pc, #256]	; (8003594 <OLED_Init+0x110>)
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	6713      	str	r3, [r2, #112]	; 0x70
 8003498:	4b3e      	ldr	r3, [pc, #248]	; (8003594 <OLED_Init+0x110>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	4a3d      	ldr	r2, [pc, #244]	; (8003594 <OLED_Init+0x110>)
 800349e:	f023 0304 	bic.w	r3, r3, #4
 80034a2:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80034a4:	f001 fc2e 	bl	8004d04 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80034a8:	2200      	movs	r2, #0
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	483a      	ldr	r0, [pc, #232]	; (8003598 <OLED_Init+0x114>)
 80034ae:	f000 fc4b 	bl	8003d48 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80034b2:	2064      	movs	r0, #100	; 0x64
 80034b4:	f000 f8e4 	bl	8003680 <HAL_Delay>
	OLED_RST_Set();
 80034b8:	2201      	movs	r2, #1
 80034ba:	2180      	movs	r1, #128	; 0x80
 80034bc:	4836      	ldr	r0, [pc, #216]	; (8003598 <OLED_Init+0x114>)
 80034be:	f000 fc43 	bl	8003d48 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80034c2:	2100      	movs	r1, #0
 80034c4:	20ae      	movs	r0, #174	; 0xae
 80034c6:	f7ff fe6f 	bl	80031a8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80034ca:	2100      	movs	r1, #0
 80034cc:	20d5      	movs	r0, #213	; 0xd5
 80034ce:	f7ff fe6b 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80034d2:	2100      	movs	r1, #0
 80034d4:	2050      	movs	r0, #80	; 0x50
 80034d6:	f7ff fe67 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80034da:	2100      	movs	r1, #0
 80034dc:	20a8      	movs	r0, #168	; 0xa8
 80034de:	f7ff fe63 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80034e2:	2100      	movs	r1, #0
 80034e4:	203f      	movs	r0, #63	; 0x3f
 80034e6:	f7ff fe5f 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80034ea:	2100      	movs	r1, #0
 80034ec:	20d3      	movs	r0, #211	; 0xd3
 80034ee:	f7ff fe5b 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80034f2:	2100      	movs	r1, #0
 80034f4:	2000      	movs	r0, #0
 80034f6:	f7ff fe57 	bl	80031a8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80034fa:	2100      	movs	r1, #0
 80034fc:	2040      	movs	r0, #64	; 0x40
 80034fe:	f7ff fe53 	bl	80031a8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8003502:	2100      	movs	r1, #0
 8003504:	208d      	movs	r0, #141	; 0x8d
 8003506:	f7ff fe4f 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800350a:	2100      	movs	r1, #0
 800350c:	2014      	movs	r0, #20
 800350e:	f7ff fe4b 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8003512:	2100      	movs	r1, #0
 8003514:	2020      	movs	r0, #32
 8003516:	f7ff fe47 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800351a:	2100      	movs	r1, #0
 800351c:	2002      	movs	r0, #2
 800351e:	f7ff fe43 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8003522:	2100      	movs	r1, #0
 8003524:	20a1      	movs	r0, #161	; 0xa1
 8003526:	f7ff fe3f 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800352a:	2100      	movs	r1, #0
 800352c:	20c0      	movs	r0, #192	; 0xc0
 800352e:	f7ff fe3b 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8003532:	2100      	movs	r1, #0
 8003534:	20da      	movs	r0, #218	; 0xda
 8003536:	f7ff fe37 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800353a:	2100      	movs	r1, #0
 800353c:	2012      	movs	r0, #18
 800353e:	f7ff fe33 	bl	80031a8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8003542:	2100      	movs	r1, #0
 8003544:	2081      	movs	r0, #129	; 0x81
 8003546:	f7ff fe2f 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800354a:	2100      	movs	r1, #0
 800354c:	20ef      	movs	r0, #239	; 0xef
 800354e:	f7ff fe2b 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8003552:	2100      	movs	r1, #0
 8003554:	20d9      	movs	r0, #217	; 0xd9
 8003556:	f7ff fe27 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800355a:	2100      	movs	r1, #0
 800355c:	20f1      	movs	r0, #241	; 0xf1
 800355e:	f7ff fe23 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8003562:	2100      	movs	r1, #0
 8003564:	20db      	movs	r0, #219	; 0xdb
 8003566:	f7ff fe1f 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800356a:	2100      	movs	r1, #0
 800356c:	2030      	movs	r0, #48	; 0x30
 800356e:	f7ff fe1b 	bl	80031a8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8003572:	2100      	movs	r1, #0
 8003574:	20a4      	movs	r0, #164	; 0xa4
 8003576:	f7ff fe17 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800357a:	2100      	movs	r1, #0
 800357c:	20a6      	movs	r0, #166	; 0xa6
 800357e:	f7ff fe13 	bl	80031a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8003582:	2100      	movs	r1, #0
 8003584:	20af      	movs	r0, #175	; 0xaf
 8003586:	f7ff fe0f 	bl	80031a8 <OLED_WR_Byte>
	OLED_Clear(); 
 800358a:	f7ff fe57 	bl	800323c <OLED_Clear>
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40023800 	.word	0x40023800
 8003598:	40021000 	.word	0x40021000

0800359c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035a0:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <HAL_Init+0x40>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a0d      	ldr	r2, [pc, #52]	; (80035dc <HAL_Init+0x40>)
 80035a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_Init+0x40>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <HAL_Init+0x40>)
 80035b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035b8:	4b08      	ldr	r3, [pc, #32]	; (80035dc <HAL_Init+0x40>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a07      	ldr	r2, [pc, #28]	; (80035dc <HAL_Init+0x40>)
 80035be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035c4:	2003      	movs	r0, #3
 80035c6:	f000 f94f 	bl	8003868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035ca:	200f      	movs	r0, #15
 80035cc:	f000 f808 	bl	80035e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035d0:	f7ff fa7e 	bl	8002ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023c00 	.word	0x40023c00

080035e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035e8:	4b12      	ldr	r3, [pc, #72]	; (8003634 <HAL_InitTick+0x54>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_InitTick+0x58>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	4619      	mov	r1, r3
 80035f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80035fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 f967 	bl	80038d2 <HAL_SYSTICK_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e00e      	b.n	800362c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b0f      	cmp	r3, #15
 8003612:	d80a      	bhi.n	800362a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003614:	2200      	movs	r2, #0
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	f04f 30ff 	mov.w	r0, #4294967295
 800361c:	f000 f92f 	bl	800387e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003620:	4a06      	ldr	r2, [pc, #24]	; (800363c <HAL_InitTick+0x5c>)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e000      	b.n	800362c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000004 	.word	0x20000004
 8003638:	2000000c 	.word	0x2000000c
 800363c:	20000008 	.word	0x20000008

08003640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_IncTick+0x20>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_IncTick+0x24>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4413      	add	r3, r2
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <HAL_IncTick+0x24>)
 8003652:	6013      	str	r3, [r2, #0]
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	2000000c 	.word	0x2000000c
 8003664:	20000718 	.word	0x20000718

08003668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return uwTick;
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_GetTick+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000718 	.word	0x20000718

08003680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003688:	f7ff ffee 	bl	8003668 <HAL_GetTick>
 800368c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d005      	beq.n	80036a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_Delay+0x44>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036a6:	bf00      	nop
 80036a8:	f7ff ffde 	bl	8003668 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d8f7      	bhi.n	80036a8 <HAL_Delay+0x28>
  {
  }
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	2000000c 	.word	0x2000000c

080036c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <__NVIC_SetPriorityGrouping+0x44>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036e4:	4013      	ands	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036fa:	4a04      	ldr	r2, [pc, #16]	; (800370c <__NVIC_SetPriorityGrouping+0x44>)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	60d3      	str	r3, [r2, #12]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <__NVIC_GetPriorityGrouping+0x18>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	f003 0307 	and.w	r3, r3, #7
}
 800371e:	4618      	mov	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	2b00      	cmp	r3, #0
 800373c:	db0b      	blt.n	8003756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	f003 021f 	and.w	r2, r3, #31
 8003744:	4907      	ldr	r1, [pc, #28]	; (8003764 <__NVIC_EnableIRQ+0x38>)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	2001      	movs	r0, #1
 800374e:	fa00 f202 	lsl.w	r2, r0, r2
 8003752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	e000e100 	.word	0xe000e100

08003768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	6039      	str	r1, [r7, #0]
 8003772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003778:	2b00      	cmp	r3, #0
 800377a:	db0a      	blt.n	8003792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	b2da      	uxtb	r2, r3
 8003780:	490c      	ldr	r1, [pc, #48]	; (80037b4 <__NVIC_SetPriority+0x4c>)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	0112      	lsls	r2, r2, #4
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	440b      	add	r3, r1
 800378c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003790:	e00a      	b.n	80037a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	4908      	ldr	r1, [pc, #32]	; (80037b8 <__NVIC_SetPriority+0x50>)
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	3b04      	subs	r3, #4
 80037a0:	0112      	lsls	r2, r2, #4
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	440b      	add	r3, r1
 80037a6:	761a      	strb	r2, [r3, #24]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000e100 	.word	0xe000e100
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	; 0x24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f1c3 0307 	rsb	r3, r3, #7
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	bf28      	it	cs
 80037da:	2304      	movcs	r3, #4
 80037dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3304      	adds	r3, #4
 80037e2:	2b06      	cmp	r3, #6
 80037e4:	d902      	bls.n	80037ec <NVIC_EncodePriority+0x30>
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3b03      	subs	r3, #3
 80037ea:	e000      	b.n	80037ee <NVIC_EncodePriority+0x32>
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f0:	f04f 32ff 	mov.w	r2, #4294967295
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43da      	mvns	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	401a      	ands	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003804:	f04f 31ff 	mov.w	r1, #4294967295
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	fa01 f303 	lsl.w	r3, r1, r3
 800380e:	43d9      	mvns	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003814:	4313      	orrs	r3, r2
         );
}
 8003816:	4618      	mov	r0, r3
 8003818:	3724      	adds	r7, #36	; 0x24
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3b01      	subs	r3, #1
 8003830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003834:	d301      	bcc.n	800383a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003836:	2301      	movs	r3, #1
 8003838:	e00f      	b.n	800385a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <SysTick_Config+0x40>)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3b01      	subs	r3, #1
 8003840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003842:	210f      	movs	r1, #15
 8003844:	f04f 30ff 	mov.w	r0, #4294967295
 8003848:	f7ff ff8e 	bl	8003768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <SysTick_Config+0x40>)
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003852:	4b04      	ldr	r3, [pc, #16]	; (8003864 <SysTick_Config+0x40>)
 8003854:	2207      	movs	r2, #7
 8003856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	e000e010 	.word	0xe000e010

08003868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ff29 	bl	80036c8 <__NVIC_SetPriorityGrouping>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800387e:	b580      	push	{r7, lr}
 8003880:	b086      	sub	sp, #24
 8003882:	af00      	add	r7, sp, #0
 8003884:	4603      	mov	r3, r0
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003890:	f7ff ff3e 	bl	8003710 <__NVIC_GetPriorityGrouping>
 8003894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	6978      	ldr	r0, [r7, #20]
 800389c:	f7ff ff8e 	bl	80037bc <NVIC_EncodePriority>
 80038a0:	4602      	mov	r2, r0
 80038a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff5d 	bl	8003768 <__NVIC_SetPriority>
}
 80038ae:	bf00      	nop
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	4603      	mov	r3, r0
 80038be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ff31 	bl	800372c <__NVIC_EnableIRQ>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff ffa2 	bl	8003824 <SysTick_Config>
 80038e0:	4603      	mov	r3, r0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038f8:	f7ff feb6 	bl	8003668 <HAL_GetTick>
 80038fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d008      	beq.n	800391c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e052      	b.n	80039c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0216 	bic.w	r2, r2, #22
 800392a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800393a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d103      	bne.n	800394c <HAL_DMA_Abort+0x62>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0208 	bic.w	r2, r2, #8
 800395a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800396c:	e013      	b.n	8003996 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800396e:	f7ff fe7b 	bl	8003668 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b05      	cmp	r3, #5
 800397a:	d90c      	bls.n	8003996 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2203      	movs	r2, #3
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e015      	b.n	80039c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e4      	bne.n	800396e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a8:	223f      	movs	r2, #63	; 0x3f
 80039aa:	409a      	lsls	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d004      	beq.n	80039e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e00c      	b.n	8003a02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2205      	movs	r2, #5
 80039ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0201 	bic.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b089      	sub	sp, #36	; 0x24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e16b      	b.n	8003d04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	f040 815a 	bne.w	8003cfe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d005      	beq.n	8003a62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d130      	bne.n	8003ac4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a98:	2201      	movs	r2, #1
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 0201 	and.w	r2, r3, #1
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d017      	beq.n	8003b00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	2203      	movs	r2, #3
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d123      	bne.n	8003b54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	08da      	lsrs	r2, r3, #3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3208      	adds	r2, #8
 8003b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	220f      	movs	r2, #15
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	08da      	lsrs	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3208      	adds	r2, #8
 8003b4e:	69b9      	ldr	r1, [r7, #24]
 8003b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2203      	movs	r2, #3
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0203 	and.w	r2, r3, #3
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80b4 	beq.w	8003cfe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	4b60      	ldr	r3, [pc, #384]	; (8003d1c <HAL_GPIO_Init+0x30c>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	4a5f      	ldr	r2, [pc, #380]	; (8003d1c <HAL_GPIO_Init+0x30c>)
 8003ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba6:	4b5d      	ldr	r3, [pc, #372]	; (8003d1c <HAL_GPIO_Init+0x30c>)
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bb2:	4a5b      	ldr	r2, [pc, #364]	; (8003d20 <HAL_GPIO_Init+0x310>)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	089b      	lsrs	r3, r3, #2
 8003bb8:	3302      	adds	r3, #2
 8003bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	220f      	movs	r2, #15
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a52      	ldr	r2, [pc, #328]	; (8003d24 <HAL_GPIO_Init+0x314>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d02b      	beq.n	8003c36 <HAL_GPIO_Init+0x226>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a51      	ldr	r2, [pc, #324]	; (8003d28 <HAL_GPIO_Init+0x318>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d025      	beq.n	8003c32 <HAL_GPIO_Init+0x222>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a50      	ldr	r2, [pc, #320]	; (8003d2c <HAL_GPIO_Init+0x31c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d01f      	beq.n	8003c2e <HAL_GPIO_Init+0x21e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a4f      	ldr	r2, [pc, #316]	; (8003d30 <HAL_GPIO_Init+0x320>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d019      	beq.n	8003c2a <HAL_GPIO_Init+0x21a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4e      	ldr	r2, [pc, #312]	; (8003d34 <HAL_GPIO_Init+0x324>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <HAL_GPIO_Init+0x216>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4d      	ldr	r2, [pc, #308]	; (8003d38 <HAL_GPIO_Init+0x328>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00d      	beq.n	8003c22 <HAL_GPIO_Init+0x212>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4c      	ldr	r2, [pc, #304]	; (8003d3c <HAL_GPIO_Init+0x32c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d007      	beq.n	8003c1e <HAL_GPIO_Init+0x20e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4b      	ldr	r2, [pc, #300]	; (8003d40 <HAL_GPIO_Init+0x330>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d101      	bne.n	8003c1a <HAL_GPIO_Init+0x20a>
 8003c16:	2307      	movs	r3, #7
 8003c18:	e00e      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	e00c      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c1e:	2306      	movs	r3, #6
 8003c20:	e00a      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c22:	2305      	movs	r3, #5
 8003c24:	e008      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c26:	2304      	movs	r3, #4
 8003c28:	e006      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e004      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e002      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c36:	2300      	movs	r3, #0
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	f002 0203 	and.w	r2, r2, #3
 8003c3e:	0092      	lsls	r2, r2, #2
 8003c40:	4093      	lsls	r3, r2
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c48:	4935      	ldr	r1, [pc, #212]	; (8003d20 <HAL_GPIO_Init+0x310>)
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	089b      	lsrs	r3, r3, #2
 8003c4e:	3302      	adds	r3, #2
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c56:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <HAL_GPIO_Init+0x334>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4013      	ands	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c7a:	4a32      	ldr	r2, [pc, #200]	; (8003d44 <HAL_GPIO_Init+0x334>)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c80:	4b30      	ldr	r3, [pc, #192]	; (8003d44 <HAL_GPIO_Init+0x334>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ca4:	4a27      	ldr	r2, [pc, #156]	; (8003d44 <HAL_GPIO_Init+0x334>)
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003caa:	4b26      	ldr	r3, [pc, #152]	; (8003d44 <HAL_GPIO_Init+0x334>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cce:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <HAL_GPIO_Init+0x334>)
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	; (8003d44 <HAL_GPIO_Init+0x334>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cf8:	4a12      	ldr	r2, [pc, #72]	; (8003d44 <HAL_GPIO_Init+0x334>)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3301      	adds	r3, #1
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2b0f      	cmp	r3, #15
 8003d08:	f67f ae90 	bls.w	8003a2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	bf00      	nop
 8003d10:	3724      	adds	r7, #36	; 0x24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40013800 	.word	0x40013800
 8003d24:	40020000 	.word	0x40020000
 8003d28:	40020400 	.word	0x40020400
 8003d2c:	40020800 	.word	0x40020800
 8003d30:	40020c00 	.word	0x40020c00
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40021400 	.word	0x40021400
 8003d3c:	40021800 	.word	0x40021800
 8003d40:	40021c00 	.word	0x40021c00
 8003d44:	40013c00 	.word	0x40013c00

08003d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
 8003d54:	4613      	mov	r3, r2
 8003d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d58:	787b      	ldrb	r3, [r7, #1]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d5e:	887a      	ldrh	r2, [r7, #2]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d64:	e003      	b.n	8003d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d66:	887b      	ldrh	r3, [r7, #2]
 8003d68:	041a      	lsls	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	619a      	str	r2, [r3, #24]
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	460b      	mov	r3, r1
 8003d84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d8c:	887a      	ldrh	r2, [r7, #2]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4013      	ands	r3, r2
 8003d92:	041a      	lsls	r2, r3, #16
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	43d9      	mvns	r1, r3
 8003d98:	887b      	ldrh	r3, [r7, #2]
 8003d9a:	400b      	ands	r3, r1
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	619a      	str	r2, [r3, #24]
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e12b      	b.n	800401a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fe feae 	bl	8002b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2224      	movs	r2, #36	; 0x24
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e14:	f001 fbba 	bl	800558c <HAL_RCC_GetPCLK1Freq>
 8003e18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4a81      	ldr	r2, [pc, #516]	; (8004024 <HAL_I2C_Init+0x274>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d807      	bhi.n	8003e34 <HAL_I2C_Init+0x84>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4a80      	ldr	r2, [pc, #512]	; (8004028 <HAL_I2C_Init+0x278>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	bf94      	ite	ls
 8003e2c:	2301      	movls	r3, #1
 8003e2e:	2300      	movhi	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e006      	b.n	8003e42 <HAL_I2C_Init+0x92>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4a7d      	ldr	r2, [pc, #500]	; (800402c <HAL_I2C_Init+0x27c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	bf94      	ite	ls
 8003e3c:	2301      	movls	r3, #1
 8003e3e:	2300      	movhi	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0e7      	b.n	800401a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4a78      	ldr	r2, [pc, #480]	; (8004030 <HAL_I2C_Init+0x280>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	0c9b      	lsrs	r3, r3, #18
 8003e54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4a6a      	ldr	r2, [pc, #424]	; (8004024 <HAL_I2C_Init+0x274>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d802      	bhi.n	8003e84 <HAL_I2C_Init+0xd4>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	3301      	adds	r3, #1
 8003e82:	e009      	b.n	8003e98 <HAL_I2C_Init+0xe8>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	4a69      	ldr	r2, [pc, #420]	; (8004034 <HAL_I2C_Init+0x284>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	099b      	lsrs	r3, r3, #6
 8003e96:	3301      	adds	r3, #1
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003eaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	495c      	ldr	r1, [pc, #368]	; (8004024 <HAL_I2C_Init+0x274>)
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	d819      	bhi.n	8003eec <HAL_I2C_Init+0x13c>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1e59      	subs	r1, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ec6:	1c59      	adds	r1, r3, #1
 8003ec8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ecc:	400b      	ands	r3, r1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_I2C_Init+0x138>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1e59      	subs	r1, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee6:	e051      	b.n	8003f8c <HAL_I2C_Init+0x1dc>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	e04f      	b.n	8003f8c <HAL_I2C_Init+0x1dc>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d111      	bne.n	8003f18 <HAL_I2C_Init+0x168>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1e58      	subs	r0, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6859      	ldr	r1, [r3, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	440b      	add	r3, r1
 8003f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f06:	3301      	adds	r3, #1
 8003f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf0c      	ite	eq
 8003f10:	2301      	moveq	r3, #1
 8003f12:	2300      	movne	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	e012      	b.n	8003f3e <HAL_I2C_Init+0x18e>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	1e58      	subs	r0, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6859      	ldr	r1, [r3, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	0099      	lsls	r1, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_I2C_Init+0x196>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e022      	b.n	8003f8c <HAL_I2C_Init+0x1dc>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10e      	bne.n	8003f6c <HAL_I2C_Init+0x1bc>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1e58      	subs	r0, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6859      	ldr	r1, [r3, #4]
 8003f56:	460b      	mov	r3, r1
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	440b      	add	r3, r1
 8003f5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f60:	3301      	adds	r3, #1
 8003f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6a:	e00f      	b.n	8003f8c <HAL_I2C_Init+0x1dc>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1e58      	subs	r0, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6859      	ldr	r1, [r3, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	0099      	lsls	r1, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f82:	3301      	adds	r3, #1
 8003f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	6809      	ldr	r1, [r1, #0]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69da      	ldr	r2, [r3, #28]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6911      	ldr	r1, [r2, #16]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68d2      	ldr	r2, [r2, #12]
 8003fc6:	4311      	orrs	r1, r2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	000186a0 	.word	0x000186a0
 8004028:	001e847f 	.word	0x001e847f
 800402c:	003d08ff 	.word	0x003d08ff
 8004030:	431bde83 	.word	0x431bde83
 8004034:	10624dd3 	.word	0x10624dd3

08004038 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	461a      	mov	r2, r3
 8004044:	460b      	mov	r3, r1
 8004046:	817b      	strh	r3, [r7, #10]
 8004048:	4613      	mov	r3, r2
 800404a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800404c:	f7ff fb0c 	bl	8003668 <HAL_GetTick>
 8004050:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b20      	cmp	r3, #32
 800405c:	f040 80e0 	bne.w	8004220 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2319      	movs	r3, #25
 8004066:	2201      	movs	r2, #1
 8004068:	4970      	ldr	r1, [pc, #448]	; (800422c <HAL_I2C_Master_Transmit+0x1f4>)
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fc58 	bl	8004920 <I2C_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004076:	2302      	movs	r3, #2
 8004078:	e0d3      	b.n	8004222 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_I2C_Master_Transmit+0x50>
 8004084:	2302      	movs	r3, #2
 8004086:	e0cc      	b.n	8004222 <HAL_I2C_Master_Transmit+0x1ea>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b01      	cmp	r3, #1
 800409c:	d007      	beq.n	80040ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2221      	movs	r2, #33	; 0x21
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2210      	movs	r2, #16
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	893a      	ldrh	r2, [r7, #8]
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a50      	ldr	r2, [pc, #320]	; (8004230 <HAL_I2C_Master_Transmit+0x1f8>)
 80040ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040f0:	8979      	ldrh	r1, [r7, #10]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	6a3a      	ldr	r2, [r7, #32]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 fac2 	bl	8004680 <I2C_MasterRequestWrite>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e08d      	b.n	8004222 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800411c:	e066      	b.n	80041ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	6a39      	ldr	r1, [r7, #32]
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 fcd2 	bl	8004acc <I2C_WaitOnTXEFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00d      	beq.n	800414a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	2b04      	cmp	r3, #4
 8004134:	d107      	bne.n	8004146 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004144:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e06b      	b.n	8004222 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	781a      	ldrb	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d11b      	bne.n	80041c0 <HAL_I2C_Master_Transmit+0x188>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	2b00      	cmp	r3, #0
 800418e:	d017      	beq.n	80041c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	6a39      	ldr	r1, [r7, #32]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fcc2 	bl	8004b4e <I2C_WaitOnBTFFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00d      	beq.n	80041ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d107      	bne.n	80041e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e01a      	b.n	8004222 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d194      	bne.n	800411e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	e000      	b.n	8004222 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	00100002 	.word	0x00100002
 8004230:	ffff0000 	.word	0xffff0000

08004234 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08c      	sub	sp, #48	; 0x30
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	461a      	mov	r2, r3
 8004240:	460b      	mov	r3, r1
 8004242:	817b      	strh	r3, [r7, #10]
 8004244:	4613      	mov	r3, r2
 8004246:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004248:	f7ff fa0e 	bl	8003668 <HAL_GetTick>
 800424c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b20      	cmp	r3, #32
 8004258:	f040 820b 	bne.w	8004672 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	2319      	movs	r3, #25
 8004262:	2201      	movs	r2, #1
 8004264:	497c      	ldr	r1, [pc, #496]	; (8004458 <HAL_I2C_Master_Receive+0x224>)
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 fb5a 	bl	8004920 <I2C_WaitOnFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004272:	2302      	movs	r3, #2
 8004274:	e1fe      	b.n	8004674 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_I2C_Master_Receive+0x50>
 8004280:	2302      	movs	r3, #2
 8004282:	e1f7      	b.n	8004674 <HAL_I2C_Master_Receive+0x440>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b01      	cmp	r3, #1
 8004298:	d007      	beq.n	80042aa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0201 	orr.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2222      	movs	r2, #34	; 0x22
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2210      	movs	r2, #16
 80042c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	893a      	ldrh	r2, [r7, #8]
 80042da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4a5c      	ldr	r2, [pc, #368]	; (800445c <HAL_I2C_Master_Receive+0x228>)
 80042ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042ec:	8979      	ldrh	r1, [r7, #10]
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fa46 	bl	8004784 <I2C_MasterRequestRead>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e1b8      	b.n	8004674 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004306:	2b00      	cmp	r3, #0
 8004308:	d113      	bne.n	8004332 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430a:	2300      	movs	r3, #0
 800430c:	623b      	str	r3, [r7, #32]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	623b      	str	r3, [r7, #32]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	623b      	str	r3, [r7, #32]
 800431e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	e18c      	b.n	800464c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004336:	2b01      	cmp	r3, #1
 8004338:	d11b      	bne.n	8004372 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004348:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e16c      	b.n	800464c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004376:	2b02      	cmp	r3, #2
 8004378:	d11b      	bne.n	80043b2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004388:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004398:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	e14c      	b.n	800464c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043d8:	e138      	b.n	800464c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043de:	2b03      	cmp	r3, #3
 80043e0:	f200 80f1 	bhi.w	80045c6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d123      	bne.n	8004434 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fbed 	bl	8004bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e139      	b.n	8004674 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004432:	e10b      	b.n	800464c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004438:	2b02      	cmp	r3, #2
 800443a:	d14e      	bne.n	80044da <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	2200      	movs	r2, #0
 8004444:	4906      	ldr	r1, [pc, #24]	; (8004460 <HAL_I2C_Master_Receive+0x22c>)
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fa6a 	bl	8004920 <I2C_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e10e      	b.n	8004674 <HAL_I2C_Master_Receive+0x440>
 8004456:	bf00      	nop
 8004458:	00100002 	.word	0x00100002
 800445c:	ffff0000 	.word	0xffff0000
 8004460:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044d8:	e0b8      	b.n	800464c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	2200      	movs	r2, #0
 80044e2:	4966      	ldr	r1, [pc, #408]	; (800467c <HAL_I2C_Master_Receive+0x448>)
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fa1b 	bl	8004920 <I2C_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0bf      	b.n	8004674 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004502:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	2200      	movs	r2, #0
 800453e:	494f      	ldr	r1, [pc, #316]	; (800467c <HAL_I2C_Master_Receive+0x448>)
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f9ed 	bl	8004920 <I2C_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e091      	b.n	8004674 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045c4:	e042      	b.n	800464c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fb00 	bl	8004bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e04c      	b.n	8004674 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b04      	cmp	r3, #4
 8004618:	d118      	bne.n	800464c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	f47f aec2 	bne.w	80043da <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e000      	b.n	8004674 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004672:	2302      	movs	r3, #2
  }
}
 8004674:	4618      	mov	r0, r3
 8004676:	3728      	adds	r7, #40	; 0x28
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	00010004 	.word	0x00010004

08004680 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	460b      	mov	r3, r1
 800468e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b08      	cmp	r3, #8
 800469a:	d006      	beq.n	80046aa <I2C_MasterRequestWrite+0x2a>
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d003      	beq.n	80046aa <I2C_MasterRequestWrite+0x2a>
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046a8:	d108      	bne.n	80046bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e00b      	b.n	80046d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	2b12      	cmp	r3, #18
 80046c2:	d107      	bne.n	80046d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f91d 	bl	8004920 <I2C_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00d      	beq.n	8004708 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fa:	d103      	bne.n	8004704 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004702:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e035      	b.n	8004774 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004710:	d108      	bne.n	8004724 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004712:	897b      	ldrh	r3, [r7, #10]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004720:	611a      	str	r2, [r3, #16]
 8004722:	e01b      	b.n	800475c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004724:	897b      	ldrh	r3, [r7, #10]
 8004726:	11db      	asrs	r3, r3, #7
 8004728:	b2db      	uxtb	r3, r3
 800472a:	f003 0306 	and.w	r3, r3, #6
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f063 030f 	orn	r3, r3, #15
 8004734:	b2da      	uxtb	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	490e      	ldr	r1, [pc, #56]	; (800477c <I2C_MasterRequestWrite+0xfc>)
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f943 	bl	80049ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e010      	b.n	8004774 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004752:	897b      	ldrh	r3, [r7, #10]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4907      	ldr	r1, [pc, #28]	; (8004780 <I2C_MasterRequestWrite+0x100>)
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f933 	bl	80049ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	00010008 	.word	0x00010008
 8004780:	00010002 	.word	0x00010002

08004784 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	460b      	mov	r3, r1
 8004792:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d006      	beq.n	80047be <I2C_MasterRequestRead+0x3a>
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d003      	beq.n	80047be <I2C_MasterRequestRead+0x3a>
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047bc:	d108      	bne.n	80047d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	e00b      	b.n	80047e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	2b11      	cmp	r3, #17
 80047d6:	d107      	bne.n	80047e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f893 	bl	8004920 <I2C_WaitOnFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00d      	beq.n	800481c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480e:	d103      	bne.n	8004818 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004816:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e079      	b.n	8004910 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004824:	d108      	bne.n	8004838 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004826:	897b      	ldrh	r3, [r7, #10]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	b2da      	uxtb	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	611a      	str	r2, [r3, #16]
 8004836:	e05f      	b.n	80048f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004838:	897b      	ldrh	r3, [r7, #10]
 800483a:	11db      	asrs	r3, r3, #7
 800483c:	b2db      	uxtb	r3, r3
 800483e:	f003 0306 	and.w	r3, r3, #6
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f063 030f 	orn	r3, r3, #15
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4930      	ldr	r1, [pc, #192]	; (8004918 <I2C_MasterRequestRead+0x194>)
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f8b9 	bl	80049ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e054      	b.n	8004910 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004866:	897b      	ldrh	r3, [r7, #10]
 8004868:	b2da      	uxtb	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4929      	ldr	r1, [pc, #164]	; (800491c <I2C_MasterRequestRead+0x198>)
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f8a9 	bl	80049ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e044      	b.n	8004910 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 f831 	bl	8004920 <I2C_WaitOnFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00d      	beq.n	80048e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d2:	d103      	bne.n	80048dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e017      	b.n	8004910 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80048e0:	897b      	ldrh	r3, [r7, #10]
 80048e2:	11db      	asrs	r3, r3, #7
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f003 0306 	and.w	r3, r3, #6
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f063 030e 	orn	r3, r3, #14
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4907      	ldr	r1, [pc, #28]	; (800491c <I2C_MasterRequestRead+0x198>)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f865 	bl	80049ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	00010008 	.word	0x00010008
 800491c:	00010002 	.word	0x00010002

08004920 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	4613      	mov	r3, r2
 800492e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004930:	e025      	b.n	800497e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d021      	beq.n	800497e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493a:	f7fe fe95 	bl	8003668 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d302      	bcc.n	8004950 <I2C_WaitOnFlagUntilTimeout+0x30>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d116      	bne.n	800497e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2220      	movs	r2, #32
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f043 0220 	orr.w	r2, r3, #32
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e023      	b.n	80049c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	0c1b      	lsrs	r3, r3, #16
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d10d      	bne.n	80049a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	43da      	mvns	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4013      	ands	r3, r2
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	bf0c      	ite	eq
 800499a:	2301      	moveq	r3, #1
 800499c:	2300      	movne	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	e00c      	b.n	80049be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	43da      	mvns	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4013      	ands	r3, r2
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bf0c      	ite	eq
 80049b6:	2301      	moveq	r3, #1
 80049b8:	2300      	movne	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d0b6      	beq.n	8004932 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b084      	sub	sp, #16
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
 80049da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049dc:	e051      	b.n	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ec:	d123      	bne.n	8004a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f043 0204 	orr.w	r2, r3, #4
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e046      	b.n	8004ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d021      	beq.n	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3e:	f7fe fe13 	bl	8003668 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d302      	bcc.n	8004a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d116      	bne.n	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f043 0220 	orr.w	r2, r3, #32
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e020      	b.n	8004ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	0c1b      	lsrs	r3, r3, #16
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d10c      	bne.n	8004aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	43da      	mvns	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4013      	ands	r3, r2
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bf14      	ite	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	2300      	moveq	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	e00b      	b.n	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	43da      	mvns	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf14      	ite	ne
 8004ab8:	2301      	movne	r3, #1
 8004aba:	2300      	moveq	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d18d      	bne.n	80049de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ad8:	e02d      	b.n	8004b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f8ce 	bl	8004c7c <I2C_IsAcknowledgeFailed>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e02d      	b.n	8004b46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d021      	beq.n	8004b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af2:	f7fe fdb9 	bl	8003668 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d302      	bcc.n	8004b08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d116      	bne.n	8004b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f043 0220 	orr.w	r2, r3, #32
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e007      	b.n	8004b46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b40:	2b80      	cmp	r3, #128	; 0x80
 8004b42:	d1ca      	bne.n	8004ada <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b5a:	e02d      	b.n	8004bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f88d 	bl	8004c7c <I2C_IsAcknowledgeFailed>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e02d      	b.n	8004bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b72:	d021      	beq.n	8004bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b74:	f7fe fd78 	bl	8003668 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d302      	bcc.n	8004b8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	f043 0220 	orr.w	r2, r3, #32
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e007      	b.n	8004bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d1ca      	bne.n	8004b5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bdc:	e042      	b.n	8004c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2b10      	cmp	r3, #16
 8004bea:	d119      	bne.n	8004c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0210 	mvn.w	r2, #16
 8004bf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e029      	b.n	8004c74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c20:	f7fe fd22 	bl	8003668 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d302      	bcc.n	8004c36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d116      	bne.n	8004c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	f043 0220 	orr.w	r2, r3, #32
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e007      	b.n	8004c74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6e:	2b40      	cmp	r3, #64	; 0x40
 8004c70:	d1b5      	bne.n	8004bde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c92:	d11b      	bne.n	8004ccc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	f043 0204 	orr.w	r2, r3, #4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_PWR_EnableBkUpAccess+0x20>)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <HAL_PWR_EnableBkUpAccess+0x24>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004cee:	687b      	ldr	r3, [r7, #4]
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	420e0020 	.word	0x420e0020
 8004d00:	40007000 	.word	0x40007000

08004d04 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <HAL_PWR_DisableBkUpAccess+0x20>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004d16:	687b      	ldr	r3, [r7, #4]
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	420e0020 	.word	0x420e0020
 8004d28:	40007000 	.word	0x40007000

08004d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e267      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d075      	beq.n	8004e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d4a:	4b88      	ldr	r3, [pc, #544]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d00c      	beq.n	8004d70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d56:	4b85      	ldr	r3, [pc, #532]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d112      	bne.n	8004d88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d62:	4b82      	ldr	r3, [pc, #520]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d6e:	d10b      	bne.n	8004d88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d70:	4b7e      	ldr	r3, [pc, #504]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d05b      	beq.n	8004e34 <HAL_RCC_OscConfig+0x108>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d157      	bne.n	8004e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e242      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d106      	bne.n	8004da0 <HAL_RCC_OscConfig+0x74>
 8004d92:	4b76      	ldr	r3, [pc, #472]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a75      	ldr	r2, [pc, #468]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e01d      	b.n	8004ddc <HAL_RCC_OscConfig+0xb0>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x98>
 8004daa:	4b70      	ldr	r3, [pc, #448]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a6f      	ldr	r2, [pc, #444]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	4b6d      	ldr	r3, [pc, #436]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a6c      	ldr	r2, [pc, #432]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCC_OscConfig+0xb0>
 8004dc4:	4b69      	ldr	r3, [pc, #420]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a68      	ldr	r2, [pc, #416]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	4b66      	ldr	r3, [pc, #408]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a65      	ldr	r2, [pc, #404]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d013      	beq.n	8004e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7fe fc40 	bl	8003668 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dec:	f7fe fc3c 	bl	8003668 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	; 0x64
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e207      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	4b5b      	ldr	r3, [pc, #364]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0xc0>
 8004e0a:	e014      	b.n	8004e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fe fc2c 	bl	8003668 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e14:	f7fe fc28 	bl	8003668 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	; 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e1f3      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e26:	4b51      	ldr	r3, [pc, #324]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0xe8>
 8004e32:	e000      	b.n	8004e36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d063      	beq.n	8004f0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e42:	4b4a      	ldr	r3, [pc, #296]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e4e:	4b47      	ldr	r3, [pc, #284]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d11c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e5a:	4b44      	ldr	r3, [pc, #272]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d116      	bne.n	8004e94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e66:	4b41      	ldr	r3, [pc, #260]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_RCC_OscConfig+0x152>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d001      	beq.n	8004e7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e1c7      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7e:	4b3b      	ldr	r3, [pc, #236]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4937      	ldr	r1, [pc, #220]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e92:	e03a      	b.n	8004f0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d020      	beq.n	8004ede <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e9c:	4b34      	ldr	r3, [pc, #208]	; (8004f70 <HAL_RCC_OscConfig+0x244>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea2:	f7fe fbe1 	bl	8003668 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eaa:	f7fe fbdd 	bl	8003668 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e1a8      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebc:	4b2b      	ldr	r3, [pc, #172]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f0      	beq.n	8004eaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec8:	4b28      	ldr	r3, [pc, #160]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4925      	ldr	r1, [pc, #148]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	600b      	str	r3, [r1, #0]
 8004edc:	e015      	b.n	8004f0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ede:	4b24      	ldr	r3, [pc, #144]	; (8004f70 <HAL_RCC_OscConfig+0x244>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee4:	f7fe fbc0 	bl	8003668 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eec:	f7fe fbbc 	bl	8003668 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e187      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efe:	4b1b      	ldr	r3, [pc, #108]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d036      	beq.n	8004f84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d016      	beq.n	8004f4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1e:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <HAL_RCC_OscConfig+0x248>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f24:	f7fe fba0 	bl	8003668 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f2c:	f7fe fb9c 	bl	8003668 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e167      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <HAL_RCC_OscConfig+0x240>)
 8004f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x200>
 8004f4a:	e01b      	b.n	8004f84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f4c:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <HAL_RCC_OscConfig+0x248>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f52:	f7fe fb89 	bl	8003668 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f58:	e00e      	b.n	8004f78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f5a:	f7fe fb85 	bl	8003668 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d907      	bls.n	8004f78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e150      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	42470000 	.word	0x42470000
 8004f74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f78:	4b88      	ldr	r3, [pc, #544]	; (800519c <HAL_RCC_OscConfig+0x470>)
 8004f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1ea      	bne.n	8004f5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 8097 	beq.w	80050c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f92:	2300      	movs	r3, #0
 8004f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f96:	4b81      	ldr	r3, [pc, #516]	; (800519c <HAL_RCC_OscConfig+0x470>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10f      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	4b7d      	ldr	r3, [pc, #500]	; (800519c <HAL_RCC_OscConfig+0x470>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	4a7c      	ldr	r2, [pc, #496]	; (800519c <HAL_RCC_OscConfig+0x470>)
 8004fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fb2:	4b7a      	ldr	r3, [pc, #488]	; (800519c <HAL_RCC_OscConfig+0x470>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fba:	60bb      	str	r3, [r7, #8]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc2:	4b77      	ldr	r3, [pc, #476]	; (80051a0 <HAL_RCC_OscConfig+0x474>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d118      	bne.n	8005000 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fce:	4b74      	ldr	r3, [pc, #464]	; (80051a0 <HAL_RCC_OscConfig+0x474>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a73      	ldr	r2, [pc, #460]	; (80051a0 <HAL_RCC_OscConfig+0x474>)
 8004fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fda:	f7fe fb45 	bl	8003668 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe2:	f7fe fb41 	bl	8003668 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e10c      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff4:	4b6a      	ldr	r3, [pc, #424]	; (80051a0 <HAL_RCC_OscConfig+0x474>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f0      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d106      	bne.n	8005016 <HAL_RCC_OscConfig+0x2ea>
 8005008:	4b64      	ldr	r3, [pc, #400]	; (800519c <HAL_RCC_OscConfig+0x470>)
 800500a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500c:	4a63      	ldr	r2, [pc, #396]	; (800519c <HAL_RCC_OscConfig+0x470>)
 800500e:	f043 0301 	orr.w	r3, r3, #1
 8005012:	6713      	str	r3, [r2, #112]	; 0x70
 8005014:	e01c      	b.n	8005050 <HAL_RCC_OscConfig+0x324>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b05      	cmp	r3, #5
 800501c:	d10c      	bne.n	8005038 <HAL_RCC_OscConfig+0x30c>
 800501e:	4b5f      	ldr	r3, [pc, #380]	; (800519c <HAL_RCC_OscConfig+0x470>)
 8005020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005022:	4a5e      	ldr	r2, [pc, #376]	; (800519c <HAL_RCC_OscConfig+0x470>)
 8005024:	f043 0304 	orr.w	r3, r3, #4
 8005028:	6713      	str	r3, [r2, #112]	; 0x70
 800502a:	4b5c      	ldr	r3, [pc, #368]	; (800519c <HAL_RCC_OscConfig+0x470>)
 800502c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502e:	4a5b      	ldr	r2, [pc, #364]	; (800519c <HAL_RCC_OscConfig+0x470>)
 8005030:	f043 0301 	orr.w	r3, r3, #1
 8005034:	6713      	str	r3, [r2, #112]	; 0x70
 8005036:	e00b      	b.n	8005050 <HAL_RCC_OscConfig+0x324>
 8005038:	4b58      	ldr	r3, [pc, #352]	; (800519c <HAL_RCC_OscConfig+0x470>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503c:	4a57      	ldr	r2, [pc, #348]	; (800519c <HAL_RCC_OscConfig+0x470>)
 800503e:	f023 0301 	bic.w	r3, r3, #1
 8005042:	6713      	str	r3, [r2, #112]	; 0x70
 8005044:	4b55      	ldr	r3, [pc, #340]	; (800519c <HAL_RCC_OscConfig+0x470>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	4a54      	ldr	r2, [pc, #336]	; (800519c <HAL_RCC_OscConfig+0x470>)
 800504a:	f023 0304 	bic.w	r3, r3, #4
 800504e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d015      	beq.n	8005084 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005058:	f7fe fb06 	bl	8003668 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505e:	e00a      	b.n	8005076 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005060:	f7fe fb02 	bl	8003668 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	f241 3288 	movw	r2, #5000	; 0x1388
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e0cb      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005076:	4b49      	ldr	r3, [pc, #292]	; (800519c <HAL_RCC_OscConfig+0x470>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0ee      	beq.n	8005060 <HAL_RCC_OscConfig+0x334>
 8005082:	e014      	b.n	80050ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005084:	f7fe faf0 	bl	8003668 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800508a:	e00a      	b.n	80050a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800508c:	f7fe faec 	bl	8003668 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	f241 3288 	movw	r2, #5000	; 0x1388
 800509a:	4293      	cmp	r3, r2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e0b5      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050a2:	4b3e      	ldr	r3, [pc, #248]	; (800519c <HAL_RCC_OscConfig+0x470>)
 80050a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1ee      	bne.n	800508c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d105      	bne.n	80050c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050b4:	4b39      	ldr	r3, [pc, #228]	; (800519c <HAL_RCC_OscConfig+0x470>)
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	4a38      	ldr	r2, [pc, #224]	; (800519c <HAL_RCC_OscConfig+0x470>)
 80050ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 80a1 	beq.w	800520c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050ca:	4b34      	ldr	r3, [pc, #208]	; (800519c <HAL_RCC_OscConfig+0x470>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 030c 	and.w	r3, r3, #12
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d05c      	beq.n	8005190 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d141      	bne.n	8005162 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050de:	4b31      	ldr	r3, [pc, #196]	; (80051a4 <HAL_RCC_OscConfig+0x478>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e4:	f7fe fac0 	bl	8003668 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fe fabc 	bl	8003668 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e087      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fe:	4b27      	ldr	r3, [pc, #156]	; (800519c <HAL_RCC_OscConfig+0x470>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	019b      	lsls	r3, r3, #6
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	085b      	lsrs	r3, r3, #1
 8005122:	3b01      	subs	r3, #1
 8005124:	041b      	lsls	r3, r3, #16
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	061b      	lsls	r3, r3, #24
 800512e:	491b      	ldr	r1, [pc, #108]	; (800519c <HAL_RCC_OscConfig+0x470>)
 8005130:	4313      	orrs	r3, r2
 8005132:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005134:	4b1b      	ldr	r3, [pc, #108]	; (80051a4 <HAL_RCC_OscConfig+0x478>)
 8005136:	2201      	movs	r2, #1
 8005138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513a:	f7fe fa95 	bl	8003668 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005142:	f7fe fa91 	bl	8003668 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e05c      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005154:	4b11      	ldr	r3, [pc, #68]	; (800519c <HAL_RCC_OscConfig+0x470>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCC_OscConfig+0x416>
 8005160:	e054      	b.n	800520c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005162:	4b10      	ldr	r3, [pc, #64]	; (80051a4 <HAL_RCC_OscConfig+0x478>)
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005168:	f7fe fa7e 	bl	8003668 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005170:	f7fe fa7a 	bl	8003668 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e045      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005182:	4b06      	ldr	r3, [pc, #24]	; (800519c <HAL_RCC_OscConfig+0x470>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1f0      	bne.n	8005170 <HAL_RCC_OscConfig+0x444>
 800518e:	e03d      	b.n	800520c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d107      	bne.n	80051a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e038      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
 800519c:	40023800 	.word	0x40023800
 80051a0:	40007000 	.word	0x40007000
 80051a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051a8:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <HAL_RCC_OscConfig+0x4ec>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d028      	beq.n	8005208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d121      	bne.n	8005208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d11a      	bne.n	8005208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051d8:	4013      	ands	r3, r2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d111      	bne.n	8005208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	085b      	lsrs	r3, r3, #1
 80051f0:	3b01      	subs	r3, #1
 80051f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d107      	bne.n	8005208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005204:	429a      	cmp	r2, r3
 8005206:	d001      	beq.n	800520c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e000      	b.n	800520e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	40023800 	.word	0x40023800

0800521c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0cc      	b.n	80053ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005230:	4b68      	ldr	r3, [pc, #416]	; (80053d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d90c      	bls.n	8005258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523e:	4b65      	ldr	r3, [pc, #404]	; (80053d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005246:	4b63      	ldr	r3, [pc, #396]	; (80053d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d001      	beq.n	8005258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e0b8      	b.n	80053ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d020      	beq.n	80052a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d005      	beq.n	800527c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005270:	4b59      	ldr	r3, [pc, #356]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	4a58      	ldr	r2, [pc, #352]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800527a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005288:	4b53      	ldr	r3, [pc, #332]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	4a52      	ldr	r2, [pc, #328]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005294:	4b50      	ldr	r3, [pc, #320]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	494d      	ldr	r1, [pc, #308]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d044      	beq.n	800533c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d107      	bne.n	80052ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ba:	4b47      	ldr	r3, [pc, #284]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d119      	bne.n	80052fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e07f      	b.n	80053ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d003      	beq.n	80052da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d107      	bne.n	80052ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052da:	4b3f      	ldr	r3, [pc, #252]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e06f      	b.n	80053ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ea:	4b3b      	ldr	r3, [pc, #236]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e067      	b.n	80053ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052fa:	4b37      	ldr	r3, [pc, #220]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f023 0203 	bic.w	r2, r3, #3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	4934      	ldr	r1, [pc, #208]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005308:	4313      	orrs	r3, r2
 800530a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800530c:	f7fe f9ac 	bl	8003668 <HAL_GetTick>
 8005310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005312:	e00a      	b.n	800532a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005314:	f7fe f9a8 	bl	8003668 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005322:	4293      	cmp	r3, r2
 8005324:	d901      	bls.n	800532a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e04f      	b.n	80053ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800532a:	4b2b      	ldr	r3, [pc, #172]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 020c 	and.w	r2, r3, #12
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	429a      	cmp	r2, r3
 800533a:	d1eb      	bne.n	8005314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800533c:	4b25      	ldr	r3, [pc, #148]	; (80053d4 <HAL_RCC_ClockConfig+0x1b8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d20c      	bcs.n	8005364 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800534a:	4b22      	ldr	r3, [pc, #136]	; (80053d4 <HAL_RCC_ClockConfig+0x1b8>)
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005352:	4b20      	ldr	r3, [pc, #128]	; (80053d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d001      	beq.n	8005364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e032      	b.n	80053ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d008      	beq.n	8005382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005370:	4b19      	ldr	r3, [pc, #100]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4916      	ldr	r1, [pc, #88]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	4313      	orrs	r3, r2
 8005380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d009      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800538e:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	490e      	ldr	r1, [pc, #56]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053a2:	f000 f821 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 80053a6:	4602      	mov	r2, r0
 80053a8:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	091b      	lsrs	r3, r3, #4
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	490a      	ldr	r1, [pc, #40]	; (80053dc <HAL_RCC_ClockConfig+0x1c0>)
 80053b4:	5ccb      	ldrb	r3, [r1, r3]
 80053b6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ba:	4a09      	ldr	r2, [pc, #36]	; (80053e0 <HAL_RCC_ClockConfig+0x1c4>)
 80053bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053be:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <HAL_RCC_ClockConfig+0x1c8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fe f90c 	bl	80035e0 <HAL_InitTick>

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40023c00 	.word	0x40023c00
 80053d8:	40023800 	.word	0x40023800
 80053dc:	0800b7c8 	.word	0x0800b7c8
 80053e0:	20000004 	.word	0x20000004
 80053e4:	20000008 	.word	0x20000008

080053e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053ec:	b090      	sub	sp, #64	; 0x40
 80053ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34
 80053f4:	2300      	movs	r3, #0
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f8:	2300      	movs	r3, #0
 80053fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005400:	4b59      	ldr	r3, [pc, #356]	; (8005568 <HAL_RCC_GetSysClockFreq+0x180>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 030c 	and.w	r3, r3, #12
 8005408:	2b08      	cmp	r3, #8
 800540a:	d00d      	beq.n	8005428 <HAL_RCC_GetSysClockFreq+0x40>
 800540c:	2b08      	cmp	r3, #8
 800540e:	f200 80a1 	bhi.w	8005554 <HAL_RCC_GetSysClockFreq+0x16c>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <HAL_RCC_GetSysClockFreq+0x34>
 8005416:	2b04      	cmp	r3, #4
 8005418:	d003      	beq.n	8005422 <HAL_RCC_GetSysClockFreq+0x3a>
 800541a:	e09b      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800541c:	4b53      	ldr	r3, [pc, #332]	; (800556c <HAL_RCC_GetSysClockFreq+0x184>)
 800541e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005420:	e09b      	b.n	800555a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005422:	4b53      	ldr	r3, [pc, #332]	; (8005570 <HAL_RCC_GetSysClockFreq+0x188>)
 8005424:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005426:	e098      	b.n	800555a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005428:	4b4f      	ldr	r3, [pc, #316]	; (8005568 <HAL_RCC_GetSysClockFreq+0x180>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005430:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005432:	4b4d      	ldr	r3, [pc, #308]	; (8005568 <HAL_RCC_GetSysClockFreq+0x180>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d028      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800543e:	4b4a      	ldr	r3, [pc, #296]	; (8005568 <HAL_RCC_GetSysClockFreq+0x180>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	099b      	lsrs	r3, r3, #6
 8005444:	2200      	movs	r2, #0
 8005446:	623b      	str	r3, [r7, #32]
 8005448:	627a      	str	r2, [r7, #36]	; 0x24
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005450:	2100      	movs	r1, #0
 8005452:	4b47      	ldr	r3, [pc, #284]	; (8005570 <HAL_RCC_GetSysClockFreq+0x188>)
 8005454:	fb03 f201 	mul.w	r2, r3, r1
 8005458:	2300      	movs	r3, #0
 800545a:	fb00 f303 	mul.w	r3, r0, r3
 800545e:	4413      	add	r3, r2
 8005460:	4a43      	ldr	r2, [pc, #268]	; (8005570 <HAL_RCC_GetSysClockFreq+0x188>)
 8005462:	fba0 1202 	umull	r1, r2, r0, r2
 8005466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005468:	460a      	mov	r2, r1
 800546a:	62ba      	str	r2, [r7, #40]	; 0x28
 800546c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800546e:	4413      	add	r3, r2
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005474:	2200      	movs	r2, #0
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	61fa      	str	r2, [r7, #28]
 800547a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800547e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005482:	f7fb fb93 	bl	8000bac <__aeabi_uldivmod>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4613      	mov	r3, r2
 800548c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800548e:	e053      	b.n	8005538 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005490:	4b35      	ldr	r3, [pc, #212]	; (8005568 <HAL_RCC_GetSysClockFreq+0x180>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	099b      	lsrs	r3, r3, #6
 8005496:	2200      	movs	r2, #0
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	617a      	str	r2, [r7, #20]
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80054a2:	f04f 0b00 	mov.w	fp, #0
 80054a6:	4652      	mov	r2, sl
 80054a8:	465b      	mov	r3, fp
 80054aa:	f04f 0000 	mov.w	r0, #0
 80054ae:	f04f 0100 	mov.w	r1, #0
 80054b2:	0159      	lsls	r1, r3, #5
 80054b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054b8:	0150      	lsls	r0, r2, #5
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	ebb2 080a 	subs.w	r8, r2, sl
 80054c2:	eb63 090b 	sbc.w	r9, r3, fp
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80054d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80054d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80054da:	ebb2 0408 	subs.w	r4, r2, r8
 80054de:	eb63 0509 	sbc.w	r5, r3, r9
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	00eb      	lsls	r3, r5, #3
 80054ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054f0:	00e2      	lsls	r2, r4, #3
 80054f2:	4614      	mov	r4, r2
 80054f4:	461d      	mov	r5, r3
 80054f6:	eb14 030a 	adds.w	r3, r4, sl
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	eb45 030b 	adc.w	r3, r5, fp
 8005500:	607b      	str	r3, [r7, #4]
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800550e:	4629      	mov	r1, r5
 8005510:	028b      	lsls	r3, r1, #10
 8005512:	4621      	mov	r1, r4
 8005514:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005518:	4621      	mov	r1, r4
 800551a:	028a      	lsls	r2, r1, #10
 800551c:	4610      	mov	r0, r2
 800551e:	4619      	mov	r1, r3
 8005520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005522:	2200      	movs	r2, #0
 8005524:	60bb      	str	r3, [r7, #8]
 8005526:	60fa      	str	r2, [r7, #12]
 8005528:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800552c:	f7fb fb3e 	bl	8000bac <__aeabi_uldivmod>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4613      	mov	r3, r2
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005538:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <HAL_RCC_GetSysClockFreq+0x180>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	3301      	adds	r3, #1
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005548:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005550:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005552:	e002      	b.n	800555a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005554:	4b05      	ldr	r3, [pc, #20]	; (800556c <HAL_RCC_GetSysClockFreq+0x184>)
 8005556:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800555c:	4618      	mov	r0, r3
 800555e:	3740      	adds	r7, #64	; 0x40
 8005560:	46bd      	mov	sp, r7
 8005562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005566:	bf00      	nop
 8005568:	40023800 	.word	0x40023800
 800556c:	00f42400 	.word	0x00f42400
 8005570:	017d7840 	.word	0x017d7840

08005574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005578:	4b03      	ldr	r3, [pc, #12]	; (8005588 <HAL_RCC_GetHCLKFreq+0x14>)
 800557a:	681b      	ldr	r3, [r3, #0]
}
 800557c:	4618      	mov	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	20000004 	.word	0x20000004

0800558c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005590:	f7ff fff0 	bl	8005574 <HAL_RCC_GetHCLKFreq>
 8005594:	4602      	mov	r2, r0
 8005596:	4b05      	ldr	r3, [pc, #20]	; (80055ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	0a9b      	lsrs	r3, r3, #10
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	4903      	ldr	r1, [pc, #12]	; (80055b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055a2:	5ccb      	ldrb	r3, [r1, r3]
 80055a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40023800 	.word	0x40023800
 80055b0:	0800b7d8 	.word	0x0800b7d8

080055b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055b8:	f7ff ffdc 	bl	8005574 <HAL_RCC_GetHCLKFreq>
 80055bc:	4602      	mov	r2, r0
 80055be:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	0b5b      	lsrs	r3, r3, #13
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	4903      	ldr	r1, [pc, #12]	; (80055d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ca:	5ccb      	ldrb	r3, [r1, r3]
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40023800 	.word	0x40023800
 80055d8:	0800b7d8 	.word	0x0800b7d8

080055dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e041      	b.n	8005672 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fd fae0 	bl	8002bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f000 ff94 	bl	8006548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e041      	b.n	8005710 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d106      	bne.n	80056a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f839 	bl	8005718 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3304      	adds	r3, #4
 80056b6:	4619      	mov	r1, r3
 80056b8:	4610      	mov	r0, r2
 80056ba:	f000 ff45 	bl	8006548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d109      	bne.n	8005750 <HAL_TIM_PWM_Start+0x24>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	bf14      	ite	ne
 8005748:	2301      	movne	r3, #1
 800574a:	2300      	moveq	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e022      	b.n	8005796 <HAL_TIM_PWM_Start+0x6a>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b04      	cmp	r3, #4
 8005754:	d109      	bne.n	800576a <HAL_TIM_PWM_Start+0x3e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b01      	cmp	r3, #1
 8005760:	bf14      	ite	ne
 8005762:	2301      	movne	r3, #1
 8005764:	2300      	moveq	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	e015      	b.n	8005796 <HAL_TIM_PWM_Start+0x6a>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d109      	bne.n	8005784 <HAL_TIM_PWM_Start+0x58>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	bf14      	ite	ne
 800577c:	2301      	movne	r3, #1
 800577e:	2300      	moveq	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	e008      	b.n	8005796 <HAL_TIM_PWM_Start+0x6a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	bf14      	ite	ne
 8005790:	2301      	movne	r3, #1
 8005792:	2300      	moveq	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e07c      	b.n	8005898 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d104      	bne.n	80057ae <HAL_TIM_PWM_Start+0x82>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ac:	e013      	b.n	80057d6 <HAL_TIM_PWM_Start+0xaa>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d104      	bne.n	80057be <HAL_TIM_PWM_Start+0x92>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057bc:	e00b      	b.n	80057d6 <HAL_TIM_PWM_Start+0xaa>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d104      	bne.n	80057ce <HAL_TIM_PWM_Start+0xa2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057cc:	e003      	b.n	80057d6 <HAL_TIM_PWM_Start+0xaa>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2202      	movs	r2, #2
 80057d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2201      	movs	r2, #1
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 fac6 	bl	8006d70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a2d      	ldr	r2, [pc, #180]	; (80058a0 <HAL_TIM_PWM_Start+0x174>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d004      	beq.n	80057f8 <HAL_TIM_PWM_Start+0xcc>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a2c      	ldr	r2, [pc, #176]	; (80058a4 <HAL_TIM_PWM_Start+0x178>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d101      	bne.n	80057fc <HAL_TIM_PWM_Start+0xd0>
 80057f8:	2301      	movs	r3, #1
 80057fa:	e000      	b.n	80057fe <HAL_TIM_PWM_Start+0xd2>
 80057fc:	2300      	movs	r3, #0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005810:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a22      	ldr	r2, [pc, #136]	; (80058a0 <HAL_TIM_PWM_Start+0x174>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d022      	beq.n	8005862 <HAL_TIM_PWM_Start+0x136>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005824:	d01d      	beq.n	8005862 <HAL_TIM_PWM_Start+0x136>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1f      	ldr	r2, [pc, #124]	; (80058a8 <HAL_TIM_PWM_Start+0x17c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d018      	beq.n	8005862 <HAL_TIM_PWM_Start+0x136>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a1d      	ldr	r2, [pc, #116]	; (80058ac <HAL_TIM_PWM_Start+0x180>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d013      	beq.n	8005862 <HAL_TIM_PWM_Start+0x136>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1c      	ldr	r2, [pc, #112]	; (80058b0 <HAL_TIM_PWM_Start+0x184>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00e      	beq.n	8005862 <HAL_TIM_PWM_Start+0x136>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <HAL_TIM_PWM_Start+0x178>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d009      	beq.n	8005862 <HAL_TIM_PWM_Start+0x136>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a18      	ldr	r2, [pc, #96]	; (80058b4 <HAL_TIM_PWM_Start+0x188>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d004      	beq.n	8005862 <HAL_TIM_PWM_Start+0x136>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a16      	ldr	r2, [pc, #88]	; (80058b8 <HAL_TIM_PWM_Start+0x18c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d111      	bne.n	8005886 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b06      	cmp	r3, #6
 8005872:	d010      	beq.n	8005896 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005884:	e007      	b.n	8005896 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40010400 	.word	0x40010400
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40000c00 	.word	0x40000c00
 80058b4:	40014000 	.word	0x40014000
 80058b8:	40001800 	.word	0x40001800

080058bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e041      	b.n	8005952 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fd fa80 	bl	8002de8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	4619      	mov	r1, r3
 80058fa:	4610      	mov	r0, r2
 80058fc:	f000 fe24 	bl	8006548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <HAL_TIM_IC_Start_IT+0x1e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005976:	b2db      	uxtb	r3, r3
 8005978:	e013      	b.n	80059a2 <HAL_TIM_IC_Start_IT+0x46>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b04      	cmp	r3, #4
 800597e:	d104      	bne.n	800598a <HAL_TIM_IC_Start_IT+0x2e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005986:	b2db      	uxtb	r3, r3
 8005988:	e00b      	b.n	80059a2 <HAL_TIM_IC_Start_IT+0x46>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b08      	cmp	r3, #8
 800598e:	d104      	bne.n	800599a <HAL_TIM_IC_Start_IT+0x3e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005996:	b2db      	uxtb	r3, r3
 8005998:	e003      	b.n	80059a2 <HAL_TIM_IC_Start_IT+0x46>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d104      	bne.n	80059b4 <HAL_TIM_IC_Start_IT+0x58>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e013      	b.n	80059dc <HAL_TIM_IC_Start_IT+0x80>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d104      	bne.n	80059c4 <HAL_TIM_IC_Start_IT+0x68>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	e00b      	b.n	80059dc <HAL_TIM_IC_Start_IT+0x80>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d104      	bne.n	80059d4 <HAL_TIM_IC_Start_IT+0x78>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	e003      	b.n	80059dc <HAL_TIM_IC_Start_IT+0x80>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d102      	bne.n	80059ea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80059e4:	7b7b      	ldrb	r3, [r7, #13]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d001      	beq.n	80059ee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e0cc      	b.n	8005b88 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_IC_Start_IT+0xa2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059fc:	e013      	b.n	8005a26 <HAL_TIM_IC_Start_IT+0xca>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_IC_Start_IT+0xb2>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a0c:	e00b      	b.n	8005a26 <HAL_TIM_IC_Start_IT+0xca>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d104      	bne.n	8005a1e <HAL_TIM_IC_Start_IT+0xc2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a1c:	e003      	b.n	8005a26 <HAL_TIM_IC_Start_IT+0xca>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2202      	movs	r2, #2
 8005a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d104      	bne.n	8005a36 <HAL_TIM_IC_Start_IT+0xda>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a34:	e013      	b.n	8005a5e <HAL_TIM_IC_Start_IT+0x102>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d104      	bne.n	8005a46 <HAL_TIM_IC_Start_IT+0xea>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a44:	e00b      	b.n	8005a5e <HAL_TIM_IC_Start_IT+0x102>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d104      	bne.n	8005a56 <HAL_TIM_IC_Start_IT+0xfa>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a54:	e003      	b.n	8005a5e <HAL_TIM_IC_Start_IT+0x102>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b0c      	cmp	r3, #12
 8005a62:	d841      	bhi.n	8005ae8 <HAL_TIM_IC_Start_IT+0x18c>
 8005a64:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <HAL_TIM_IC_Start_IT+0x110>)
 8005a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6a:	bf00      	nop
 8005a6c:	08005aa1 	.word	0x08005aa1
 8005a70:	08005ae9 	.word	0x08005ae9
 8005a74:	08005ae9 	.word	0x08005ae9
 8005a78:	08005ae9 	.word	0x08005ae9
 8005a7c:	08005ab3 	.word	0x08005ab3
 8005a80:	08005ae9 	.word	0x08005ae9
 8005a84:	08005ae9 	.word	0x08005ae9
 8005a88:	08005ae9 	.word	0x08005ae9
 8005a8c:	08005ac5 	.word	0x08005ac5
 8005a90:	08005ae9 	.word	0x08005ae9
 8005a94:	08005ae9 	.word	0x08005ae9
 8005a98:	08005ae9 	.word	0x08005ae9
 8005a9c:	08005ad7 	.word	0x08005ad7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0202 	orr.w	r2, r2, #2
 8005aae:	60da      	str	r2, [r3, #12]
      break;
 8005ab0:	e01d      	b.n	8005aee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0204 	orr.w	r2, r2, #4
 8005ac0:	60da      	str	r2, [r3, #12]
      break;
 8005ac2:	e014      	b.n	8005aee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0208 	orr.w	r2, r2, #8
 8005ad2:	60da      	str	r2, [r3, #12]
      break;
 8005ad4:	e00b      	b.n	8005aee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0210 	orr.w	r2, r2, #16
 8005ae4:	60da      	str	r2, [r3, #12]
      break;
 8005ae6:	e002      	b.n	8005aee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	73fb      	strb	r3, [r7, #15]
      break;
 8005aec:	bf00      	nop
  }

  if (status == HAL_OK)
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d148      	bne.n	8005b86 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2201      	movs	r2, #1
 8005afa:	6839      	ldr	r1, [r7, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 f937 	bl	8006d70 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a22      	ldr	r2, [pc, #136]	; (8005b90 <HAL_TIM_IC_Start_IT+0x234>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d022      	beq.n	8005b52 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b14:	d01d      	beq.n	8005b52 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1e      	ldr	r2, [pc, #120]	; (8005b94 <HAL_TIM_IC_Start_IT+0x238>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d018      	beq.n	8005b52 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1c      	ldr	r2, [pc, #112]	; (8005b98 <HAL_TIM_IC_Start_IT+0x23c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a1b      	ldr	r2, [pc, #108]	; (8005b9c <HAL_TIM_IC_Start_IT+0x240>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00e      	beq.n	8005b52 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a19      	ldr	r2, [pc, #100]	; (8005ba0 <HAL_TIM_IC_Start_IT+0x244>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d009      	beq.n	8005b52 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <HAL_TIM_IC_Start_IT+0x248>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d004      	beq.n	8005b52 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <HAL_TIM_IC_Start_IT+0x24c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d111      	bne.n	8005b76 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b06      	cmp	r3, #6
 8005b62:	d010      	beq.n	8005b86 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b74:	e007      	b.n	8005b86 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0201 	orr.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40010000 	.word	0x40010000
 8005b94:	40000400 	.word	0x40000400
 8005b98:	40000800 	.word	0x40000800
 8005b9c:	40000c00 	.word	0x40000c00
 8005ba0:	40010400 	.word	0x40010400
 8005ba4:	40014000 	.word	0x40014000
 8005ba8:	40001800 	.word	0x40001800

08005bac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e097      	b.n	8005cf0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d106      	bne.n	8005bda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7fd f86d 	bl	8002cb4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6812      	ldr	r2, [r2, #0]
 8005bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf0:	f023 0307 	bic.w	r3, r3, #7
 8005bf4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f000 fca1 	bl	8006548 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2e:	f023 0303 	bic.w	r3, r3, #3
 8005c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	021b      	lsls	r3, r3, #8
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c4c:	f023 030c 	bic.w	r3, r3, #12
 8005c50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	011a      	lsls	r2, r3, #4
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	031b      	lsls	r3, r3, #12
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d110      	bne.n	8005d4a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d102      	bne.n	8005d34 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d2e:	7b7b      	ldrb	r3, [r7, #13]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d001      	beq.n	8005d38 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e069      	b.n	8005e0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d48:	e031      	b.n	8005dae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d110      	bne.n	8005d72 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d50:	7bbb      	ldrb	r3, [r7, #14]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d102      	bne.n	8005d5c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d56:	7b3b      	ldrb	r3, [r7, #12]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d001      	beq.n	8005d60 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e055      	b.n	8005e0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d70:	e01d      	b.n	8005dae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d108      	bne.n	8005d8a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d105      	bne.n	8005d8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d7e:	7b7b      	ldrb	r3, [r7, #13]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d102      	bne.n	8005d8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d84:	7b3b      	ldrb	r3, [r7, #12]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d001      	beq.n	8005d8e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e03e      	b.n	8005e0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2202      	movs	r2, #2
 8005d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2202      	movs	r2, #2
 8005daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_TIM_Encoder_Start+0xc4>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d008      	beq.n	8005dcc <HAL_TIM_Encoder_Start+0xd4>
 8005dba:	e00f      	b.n	8005ddc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 ffd3 	bl	8006d70 <TIM_CCxChannelCmd>
      break;
 8005dca:	e016      	b.n	8005dfa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	2104      	movs	r1, #4
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 ffcb 	bl	8006d70 <TIM_CCxChannelCmd>
      break;
 8005dda:	e00e      	b.n	8005dfa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2201      	movs	r2, #1
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 ffc3 	bl	8006d70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2201      	movs	r2, #1
 8005df0:	2104      	movs	r1, #4
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 ffbc 	bl	8006d70 <TIM_CCxChannelCmd>
      break;
 8005df8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0201 	orr.w	r2, r2, #1
 8005e08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d122      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d11b      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0202 	mvn.w	r2, #2
 8005e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fb fcb2 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8005e5c:	e005      	b.n	8005e6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fb54 	bl	800650c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fb5b 	bl	8006520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d122      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b04      	cmp	r3, #4
 8005e8a:	d11b      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0204 	mvn.w	r2, #4
 8005e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fb fc88 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8005eb0:	e005      	b.n	8005ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fb2a 	bl	800650c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fb31 	bl	8006520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d122      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d11b      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0208 	mvn.w	r2, #8
 8005ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2204      	movs	r2, #4
 8005eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fb fc5e 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8005f04:	e005      	b.n	8005f12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fb00 	bl	800650c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fb07 	bl	8006520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0310 	and.w	r3, r3, #16
 8005f22:	2b10      	cmp	r3, #16
 8005f24:	d122      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0310 	and.w	r3, r3, #16
 8005f30:	2b10      	cmp	r3, #16
 8005f32:	d11b      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0210 	mvn.w	r2, #16
 8005f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2208      	movs	r2, #8
 8005f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fb fc34 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8005f58:	e005      	b.n	8005f66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fad6 	bl	800650c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fadd 	bl	8006520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d10e      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d107      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0201 	mvn.w	r2, #1
 8005f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fab0 	bl	80064f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa2:	2b80      	cmp	r3, #128	; 0x80
 8005fa4:	d10e      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb0:	2b80      	cmp	r3, #128	; 0x80
 8005fb2:	d107      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 ffd4 	bl	8006f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fce:	2b40      	cmp	r3, #64	; 0x40
 8005fd0:	d10e      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fdc:	2b40      	cmp	r3, #64	; 0x40
 8005fde:	d107      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 faa2 	bl	8006534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0320 	and.w	r3, r3, #32
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d10e      	bne.n	800601c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b20      	cmp	r3, #32
 800600a:	d107      	bne.n	800601c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0220 	mvn.w	r2, #32
 8006014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 ff9e 	bl	8006f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800603a:	2b01      	cmp	r3, #1
 800603c:	d101      	bne.n	8006042 <HAL_TIM_IC_ConfigChannel+0x1e>
 800603e:	2302      	movs	r3, #2
 8006040:	e088      	b.n	8006154 <HAL_TIM_IC_ConfigChannel+0x130>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d11b      	bne.n	8006088 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	6819      	ldr	r1, [r3, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f000 fcc2 	bl	80069e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699a      	ldr	r2, [r3, #24]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 020c 	bic.w	r2, r2, #12
 8006072:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6999      	ldr	r1, [r3, #24]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	619a      	str	r2, [r3, #24]
 8006086:	e060      	b.n	800614a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b04      	cmp	r3, #4
 800608c:	d11c      	bne.n	80060c8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	6819      	ldr	r1, [r3, #0]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f000 fd46 	bl	8006b2e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699a      	ldr	r2, [r3, #24]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80060b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6999      	ldr	r1, [r3, #24]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	021a      	lsls	r2, r3, #8
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	619a      	str	r2, [r3, #24]
 80060c6:	e040      	b.n	800614a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d11b      	bne.n	8006106 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	6819      	ldr	r1, [r3, #0]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f000 fd93 	bl	8006c08 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 020c 	bic.w	r2, r2, #12
 80060f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69d9      	ldr	r1, [r3, #28]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	61da      	str	r2, [r3, #28]
 8006104:	e021      	b.n	800614a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b0c      	cmp	r3, #12
 800610a:	d11c      	bne.n	8006146 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	6819      	ldr	r1, [r3, #0]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f000 fdb0 	bl	8006c80 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69da      	ldr	r2, [r3, #28]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800612e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69d9      	ldr	r1, [r3, #28]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	021a      	lsls	r2, r3, #8
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	61da      	str	r2, [r3, #28]
 8006144:	e001      	b.n	800614a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006152:	7dfb      	ldrb	r3, [r7, #23]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006176:	2302      	movs	r3, #2
 8006178:	e0ae      	b.n	80062d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b0c      	cmp	r3, #12
 8006186:	f200 809f 	bhi.w	80062c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800618a:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	080061c5 	.word	0x080061c5
 8006194:	080062c9 	.word	0x080062c9
 8006198:	080062c9 	.word	0x080062c9
 800619c:	080062c9 	.word	0x080062c9
 80061a0:	08006205 	.word	0x08006205
 80061a4:	080062c9 	.word	0x080062c9
 80061a8:	080062c9 	.word	0x080062c9
 80061ac:	080062c9 	.word	0x080062c9
 80061b0:	08006247 	.word	0x08006247
 80061b4:	080062c9 	.word	0x080062c9
 80061b8:	080062c9 	.word	0x080062c9
 80061bc:	080062c9 	.word	0x080062c9
 80061c0:	08006287 	.word	0x08006287
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fa5c 	bl	8006688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0208 	orr.w	r2, r2, #8
 80061de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0204 	bic.w	r2, r2, #4
 80061ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6999      	ldr	r1, [r3, #24]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	619a      	str	r2, [r3, #24]
      break;
 8006202:	e064      	b.n	80062ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	4618      	mov	r0, r3
 800620c:	f000 faac 	bl	8006768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800621e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800622e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6999      	ldr	r1, [r3, #24]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	021a      	lsls	r2, r3, #8
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	619a      	str	r2, [r3, #24]
      break;
 8006244:	e043      	b.n	80062ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fb01 	bl	8006854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0208 	orr.w	r2, r2, #8
 8006260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0204 	bic.w	r2, r2, #4
 8006270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69d9      	ldr	r1, [r3, #28]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	61da      	str	r2, [r3, #28]
      break;
 8006284:	e023      	b.n	80062ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fb55 	bl	800693c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69d9      	ldr	r1, [r3, #28]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	021a      	lsls	r2, r3, #8
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	61da      	str	r2, [r3, #28]
      break;
 80062c6:	e002      	b.n	80062ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	75fb      	strb	r3, [r7, #23]
      break;
 80062cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_TIM_ConfigClockSource+0x1c>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e0b4      	b.n	8006466 <HAL_TIM_ConfigClockSource+0x186>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800631a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006334:	d03e      	beq.n	80063b4 <HAL_TIM_ConfigClockSource+0xd4>
 8006336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800633a:	f200 8087 	bhi.w	800644c <HAL_TIM_ConfigClockSource+0x16c>
 800633e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006342:	f000 8086 	beq.w	8006452 <HAL_TIM_ConfigClockSource+0x172>
 8006346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634a:	d87f      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x16c>
 800634c:	2b70      	cmp	r3, #112	; 0x70
 800634e:	d01a      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0xa6>
 8006350:	2b70      	cmp	r3, #112	; 0x70
 8006352:	d87b      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x16c>
 8006354:	2b60      	cmp	r3, #96	; 0x60
 8006356:	d050      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x11a>
 8006358:	2b60      	cmp	r3, #96	; 0x60
 800635a:	d877      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b50      	cmp	r3, #80	; 0x50
 800635e:	d03c      	beq.n	80063da <HAL_TIM_ConfigClockSource+0xfa>
 8006360:	2b50      	cmp	r3, #80	; 0x50
 8006362:	d873      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x16c>
 8006364:	2b40      	cmp	r3, #64	; 0x40
 8006366:	d058      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x13a>
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	d86f      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x16c>
 800636c:	2b30      	cmp	r3, #48	; 0x30
 800636e:	d064      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x15a>
 8006370:	2b30      	cmp	r3, #48	; 0x30
 8006372:	d86b      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x16c>
 8006374:	2b20      	cmp	r3, #32
 8006376:	d060      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x15a>
 8006378:	2b20      	cmp	r3, #32
 800637a:	d867      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x16c>
 800637c:	2b00      	cmp	r3, #0
 800637e:	d05c      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x15a>
 8006380:	2b10      	cmp	r3, #16
 8006382:	d05a      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x15a>
 8006384:	e062      	b.n	800644c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6899      	ldr	r1, [r3, #8]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f000 fccb 	bl	8006d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	609a      	str	r2, [r3, #8]
      break;
 80063b2:	e04f      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	6899      	ldr	r1, [r3, #8]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f000 fcb4 	bl	8006d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063d6:	609a      	str	r2, [r3, #8]
      break;
 80063d8:	e03c      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6859      	ldr	r1, [r3, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	461a      	mov	r2, r3
 80063e8:	f000 fb72 	bl	8006ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2150      	movs	r1, #80	; 0x50
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fc81 	bl	8006cfa <TIM_ITRx_SetConfig>
      break;
 80063f8:	e02c      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	6859      	ldr	r1, [r3, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	461a      	mov	r2, r3
 8006408:	f000 fbce 	bl	8006ba8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2160      	movs	r1, #96	; 0x60
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fc71 	bl	8006cfa <TIM_ITRx_SetConfig>
      break;
 8006418:	e01c      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	6859      	ldr	r1, [r3, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	461a      	mov	r2, r3
 8006428:	f000 fb52 	bl	8006ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2140      	movs	r1, #64	; 0x40
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fc61 	bl	8006cfa <TIM_ITRx_SetConfig>
      break;
 8006438:	e00c      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4619      	mov	r1, r3
 8006444:	4610      	mov	r0, r2
 8006446:	f000 fc58 	bl	8006cfa <TIM_ITRx_SetConfig>
      break;
 800644a:	e003      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	73fb      	strb	r3, [r7, #15]
      break;
 8006450:	e000      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006452:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006464:	7bfb      	ldrb	r3, [r7, #15]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b0c      	cmp	r3, #12
 8006482:	d831      	bhi.n	80064e8 <HAL_TIM_ReadCapturedValue+0x78>
 8006484:	a201      	add	r2, pc, #4	; (adr r2, 800648c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064c1 	.word	0x080064c1
 8006490:	080064e9 	.word	0x080064e9
 8006494:	080064e9 	.word	0x080064e9
 8006498:	080064e9 	.word	0x080064e9
 800649c:	080064cb 	.word	0x080064cb
 80064a0:	080064e9 	.word	0x080064e9
 80064a4:	080064e9 	.word	0x080064e9
 80064a8:	080064e9 	.word	0x080064e9
 80064ac:	080064d5 	.word	0x080064d5
 80064b0:	080064e9 	.word	0x080064e9
 80064b4:	080064e9 	.word	0x080064e9
 80064b8:	080064e9 	.word	0x080064e9
 80064bc:	080064df 	.word	0x080064df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c6:	60fb      	str	r3, [r7, #12]

      break;
 80064c8:	e00f      	b.n	80064ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	60fb      	str	r3, [r7, #12]

      break;
 80064d2:	e00a      	b.n	80064ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064da:	60fb      	str	r3, [r7, #12]

      break;
 80064dc:	e005      	b.n	80064ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	60fb      	str	r3, [r7, #12]

      break;
 80064e6:	e000      	b.n	80064ea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80064e8:	bf00      	nop
  }

  return tmpreg;
 80064ea:	68fb      	ldr	r3, [r7, #12]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a40      	ldr	r2, [pc, #256]	; (800665c <TIM_Base_SetConfig+0x114>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d013      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006566:	d00f      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a3d      	ldr	r2, [pc, #244]	; (8006660 <TIM_Base_SetConfig+0x118>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00b      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a3c      	ldr	r2, [pc, #240]	; (8006664 <TIM_Base_SetConfig+0x11c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d007      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a3b      	ldr	r2, [pc, #236]	; (8006668 <TIM_Base_SetConfig+0x120>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d003      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a3a      	ldr	r2, [pc, #232]	; (800666c <TIM_Base_SetConfig+0x124>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d108      	bne.n	800659a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a2f      	ldr	r2, [pc, #188]	; (800665c <TIM_Base_SetConfig+0x114>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d02b      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a8:	d027      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a2c      	ldr	r2, [pc, #176]	; (8006660 <TIM_Base_SetConfig+0x118>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d023      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a2b      	ldr	r2, [pc, #172]	; (8006664 <TIM_Base_SetConfig+0x11c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d01f      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a2a      	ldr	r2, [pc, #168]	; (8006668 <TIM_Base_SetConfig+0x120>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d01b      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a29      	ldr	r2, [pc, #164]	; (800666c <TIM_Base_SetConfig+0x124>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d017      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a28      	ldr	r2, [pc, #160]	; (8006670 <TIM_Base_SetConfig+0x128>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a27      	ldr	r2, [pc, #156]	; (8006674 <TIM_Base_SetConfig+0x12c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00f      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a26      	ldr	r2, [pc, #152]	; (8006678 <TIM_Base_SetConfig+0x130>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00b      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a25      	ldr	r2, [pc, #148]	; (800667c <TIM_Base_SetConfig+0x134>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d007      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a24      	ldr	r2, [pc, #144]	; (8006680 <TIM_Base_SetConfig+0x138>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d003      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a23      	ldr	r2, [pc, #140]	; (8006684 <TIM_Base_SetConfig+0x13c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d108      	bne.n	800660c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a0a      	ldr	r2, [pc, #40]	; (800665c <TIM_Base_SetConfig+0x114>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d003      	beq.n	8006640 <TIM_Base_SetConfig+0xf8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a0c      	ldr	r2, [pc, #48]	; (800666c <TIM_Base_SetConfig+0x124>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d103      	bne.n	8006648 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	615a      	str	r2, [r3, #20]
}
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40010000 	.word	0x40010000
 8006660:	40000400 	.word	0x40000400
 8006664:	40000800 	.word	0x40000800
 8006668:	40000c00 	.word	0x40000c00
 800666c:	40010400 	.word	0x40010400
 8006670:	40014000 	.word	0x40014000
 8006674:	40014400 	.word	0x40014400
 8006678:	40014800 	.word	0x40014800
 800667c:	40001800 	.word	0x40001800
 8006680:	40001c00 	.word	0x40001c00
 8006684:	40002000 	.word	0x40002000

08006688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	f023 0201 	bic.w	r2, r3, #1
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0303 	bic.w	r3, r3, #3
 80066be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f023 0302 	bic.w	r3, r3, #2
 80066d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4313      	orrs	r3, r2
 80066da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a20      	ldr	r2, [pc, #128]	; (8006760 <TIM_OC1_SetConfig+0xd8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_OC1_SetConfig+0x64>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a1f      	ldr	r2, [pc, #124]	; (8006764 <TIM_OC1_SetConfig+0xdc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d10c      	bne.n	8006706 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f023 0308 	bic.w	r3, r3, #8
 80066f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f023 0304 	bic.w	r3, r3, #4
 8006704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a15      	ldr	r2, [pc, #84]	; (8006760 <TIM_OC1_SetConfig+0xd8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <TIM_OC1_SetConfig+0x8e>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a14      	ldr	r2, [pc, #80]	; (8006764 <TIM_OC1_SetConfig+0xdc>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d111      	bne.n	800673a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800671c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	621a      	str	r2, [r3, #32]
}
 8006754:	bf00      	nop
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	40010000 	.word	0x40010000
 8006764:	40010400 	.word	0x40010400

08006768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	f023 0210 	bic.w	r2, r3, #16
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f023 0320 	bic.w	r3, r3, #32
 80067b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	011b      	lsls	r3, r3, #4
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a22      	ldr	r2, [pc, #136]	; (800684c <TIM_OC2_SetConfig+0xe4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_OC2_SetConfig+0x68>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a21      	ldr	r2, [pc, #132]	; (8006850 <TIM_OC2_SetConfig+0xe8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d10d      	bne.n	80067ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a17      	ldr	r2, [pc, #92]	; (800684c <TIM_OC2_SetConfig+0xe4>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_OC2_SetConfig+0x94>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a16      	ldr	r2, [pc, #88]	; (8006850 <TIM_OC2_SetConfig+0xe8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d113      	bne.n	8006824 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800680a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	621a      	str	r2, [r3, #32]
}
 800683e:	bf00      	nop
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	40010000 	.word	0x40010000
 8006850:	40010400 	.word	0x40010400

08006854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0303 	bic.w	r3, r3, #3
 800688a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800689c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a21      	ldr	r2, [pc, #132]	; (8006934 <TIM_OC3_SetConfig+0xe0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d003      	beq.n	80068ba <TIM_OC3_SetConfig+0x66>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a20      	ldr	r2, [pc, #128]	; (8006938 <TIM_OC3_SetConfig+0xe4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d10d      	bne.n	80068d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	021b      	lsls	r3, r3, #8
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a16      	ldr	r2, [pc, #88]	; (8006934 <TIM_OC3_SetConfig+0xe0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d003      	beq.n	80068e6 <TIM_OC3_SetConfig+0x92>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a15      	ldr	r2, [pc, #84]	; (8006938 <TIM_OC3_SetConfig+0xe4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d113      	bne.n	800690e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4313      	orrs	r3, r2
 800690c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	621a      	str	r2, [r3, #32]
}
 8006928:	bf00      	nop
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	40010000 	.word	0x40010000
 8006938:	40010400 	.word	0x40010400

0800693c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4313      	orrs	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	031b      	lsls	r3, r3, #12
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a12      	ldr	r2, [pc, #72]	; (80069e0 <TIM_OC4_SetConfig+0xa4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d003      	beq.n	80069a4 <TIM_OC4_SetConfig+0x68>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a11      	ldr	r2, [pc, #68]	; (80069e4 <TIM_OC4_SetConfig+0xa8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d109      	bne.n	80069b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	019b      	lsls	r3, r3, #6
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40010400 	.word	0x40010400

080069e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	f023 0201 	bic.w	r2, r3, #1
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4a28      	ldr	r2, [pc, #160]	; (8006ab4 <TIM_TI1_SetConfig+0xcc>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01b      	beq.n	8006a4e <TIM_TI1_SetConfig+0x66>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1c:	d017      	beq.n	8006a4e <TIM_TI1_SetConfig+0x66>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4a25      	ldr	r2, [pc, #148]	; (8006ab8 <TIM_TI1_SetConfig+0xd0>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <TIM_TI1_SetConfig+0x66>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4a24      	ldr	r2, [pc, #144]	; (8006abc <TIM_TI1_SetConfig+0xd4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00f      	beq.n	8006a4e <TIM_TI1_SetConfig+0x66>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4a23      	ldr	r2, [pc, #140]	; (8006ac0 <TIM_TI1_SetConfig+0xd8>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00b      	beq.n	8006a4e <TIM_TI1_SetConfig+0x66>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4a22      	ldr	r2, [pc, #136]	; (8006ac4 <TIM_TI1_SetConfig+0xdc>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d007      	beq.n	8006a4e <TIM_TI1_SetConfig+0x66>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4a21      	ldr	r2, [pc, #132]	; (8006ac8 <TIM_TI1_SetConfig+0xe0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d003      	beq.n	8006a4e <TIM_TI1_SetConfig+0x66>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a20      	ldr	r2, [pc, #128]	; (8006acc <TIM_TI1_SetConfig+0xe4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d101      	bne.n	8006a52 <TIM_TI1_SetConfig+0x6a>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <TIM_TI1_SetConfig+0x6c>
 8006a52:	2300      	movs	r3, #0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d008      	beq.n	8006a6a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f023 0303 	bic.w	r3, r3, #3
 8006a5e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	e003      	b.n	8006a72 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f043 0301 	orr.w	r3, r3, #1
 8006a70:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f023 030a 	bic.w	r3, r3, #10
 8006a8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f003 030a 	and.w	r3, r3, #10
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	621a      	str	r2, [r3, #32]
}
 8006aa6:	bf00      	nop
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	40010000 	.word	0x40010000
 8006ab8:	40000400 	.word	0x40000400
 8006abc:	40000800 	.word	0x40000800
 8006ac0:	40000c00 	.word	0x40000c00
 8006ac4:	40010400 	.word	0x40010400
 8006ac8:	40014000 	.word	0x40014000
 8006acc:	40001800 	.word	0x40001800

08006ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f023 0201 	bic.w	r2, r3, #1
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f023 030a 	bic.w	r3, r3, #10
 8006b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	621a      	str	r2, [r3, #32]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b087      	sub	sp, #28
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	60f8      	str	r0, [r7, #12]
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	607a      	str	r2, [r7, #4]
 8006b3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	f023 0210 	bic.w	r2, r3, #16
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	031b      	lsls	r3, r3, #12
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	011b      	lsls	r3, r3, #4
 8006b86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	621a      	str	r2, [r3, #32]
}
 8006b9c:	bf00      	nop
 8006b9e:	371c      	adds	r7, #28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	f023 0210 	bic.w	r2, r3, #16
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	031b      	lsls	r3, r3, #12
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006be4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	621a      	str	r2, [r3, #32]
}
 8006bfc:	bf00      	nop
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f023 0303 	bic.w	r3, r3, #3
 8006c34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006c58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	621a      	str	r2, [r3, #32]
}
 8006c74:	bf00      	nop
 8006c76:	371c      	adds	r7, #28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	031b      	lsls	r3, r3, #12
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006cd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	031b      	lsls	r3, r3, #12
 8006cd8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	621a      	str	r2, [r3, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b085      	sub	sp, #20
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f043 0307 	orr.w	r3, r3, #7
 8006d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	609a      	str	r2, [r3, #8]
}
 8006d24:	bf00      	nop
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	021a      	lsls	r2, r3, #8
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	609a      	str	r2, [r3, #8]
}
 8006d64:	bf00      	nop
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	2201      	movs	r2, #1
 8006d84:	fa02 f303 	lsl.w	r3, r2, r3
 8006d88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a1a      	ldr	r2, [r3, #32]
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	43db      	mvns	r3, r3
 8006d92:	401a      	ands	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a1a      	ldr	r2, [r3, #32]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f003 031f 	and.w	r3, r3, #31
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	fa01 f303 	lsl.w	r3, r1, r3
 8006da8:	431a      	orrs	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	621a      	str	r2, [r3, #32]
}
 8006dae:	bf00      	nop
 8006db0:	371c      	adds	r7, #28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
	...

08006dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e05a      	b.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a21      	ldr	r2, [pc, #132]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d022      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e20:	d01d      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a1d      	ldr	r2, [pc, #116]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d018      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1b      	ldr	r2, [pc, #108]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d013      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00e      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a18      	ldr	r2, [pc, #96]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d009      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a17      	ldr	r2, [pc, #92]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d004      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a15      	ldr	r2, [pc, #84]	; (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d10c      	bne.n	8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	40010000 	.word	0x40010000
 8006e9c:	40000400 	.word	0x40000400
 8006ea0:	40000800 	.word	0x40000800
 8006ea4:	40000c00 	.word	0x40000c00
 8006ea8:	40010400 	.word	0x40010400
 8006eac:	40014000 	.word	0x40014000
 8006eb0:	40001800 	.word	0x40001800

08006eb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e03d      	b.n	8006f4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e03f      	b.n	8007012 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d106      	bne.n	8006fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fb ffa8 	bl	8002efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2224      	movs	r2, #36	; 0x24
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fddf 	bl	8007b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	691a      	ldr	r2, [r3, #16]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	695a      	ldr	r2, [r3, #20]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68da      	ldr	r2, [r3, #12]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2220      	movs	r2, #32
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b08a      	sub	sp, #40	; 0x28
 800701e:	af02      	add	r7, sp, #8
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	60b9      	str	r1, [r7, #8]
 8007024:	603b      	str	r3, [r7, #0]
 8007026:	4613      	mov	r3, r2
 8007028:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b20      	cmp	r3, #32
 8007038:	d17c      	bne.n	8007134 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <HAL_UART_Transmit+0x2c>
 8007040:	88fb      	ldrh	r3, [r7, #6]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e075      	b.n	8007136 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_UART_Transmit+0x3e>
 8007054:	2302      	movs	r3, #2
 8007056:	e06e      	b.n	8007136 <HAL_UART_Transmit+0x11c>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2221      	movs	r2, #33	; 0x21
 800706a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800706e:	f7fc fafb 	bl	8003668 <HAL_GetTick>
 8007072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	88fa      	ldrh	r2, [r7, #6]
 8007078:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	88fa      	ldrh	r2, [r7, #6]
 800707e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007088:	d108      	bne.n	800709c <HAL_UART_Transmit+0x82>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d104      	bne.n	800709c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007092:	2300      	movs	r3, #0
 8007094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	e003      	b.n	80070a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80070ac:	e02a      	b.n	8007104 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2200      	movs	r2, #0
 80070b6:	2180      	movs	r1, #128	; 0x80
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 fb1f 	bl	80076fc <UART_WaitOnFlagUntilTimeout>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e036      	b.n	8007136 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10b      	bne.n	80070e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	3302      	adds	r3, #2
 80070e2:	61bb      	str	r3, [r7, #24]
 80070e4:	e007      	b.n	80070f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	781a      	ldrb	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	3301      	adds	r3, #1
 80070f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b29a      	uxth	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1cf      	bne.n	80070ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2200      	movs	r2, #0
 8007116:	2140      	movs	r1, #64	; 0x40
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 faef 	bl	80076fc <UART_WaitOnFlagUntilTimeout>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e006      	b.n	8007136 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	e000      	b.n	8007136 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007134:	2302      	movs	r3, #2
  }
}
 8007136:	4618      	mov	r0, r3
 8007138:	3720      	adds	r7, #32
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	4613      	mov	r3, r2
 800714a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b20      	cmp	r3, #32
 8007156:	d11d      	bne.n	8007194 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <HAL_UART_Receive_IT+0x26>
 800715e:	88fb      	ldrh	r3, [r7, #6]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e016      	b.n	8007196 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800716e:	2b01      	cmp	r3, #1
 8007170:	d101      	bne.n	8007176 <HAL_UART_Receive_IT+0x38>
 8007172:	2302      	movs	r3, #2
 8007174:	e00f      	b.n	8007196 <HAL_UART_Receive_IT+0x58>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	461a      	mov	r2, r3
 8007188:	68b9      	ldr	r1, [r7, #8]
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fb24 	bl	80077d8 <UART_Start_Receive_IT>
 8007190:	4603      	mov	r3, r0
 8007192:	e000      	b.n	8007196 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007194:	2302      	movs	r3, #2
  }
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b0ba      	sub	sp, #232	; 0xe8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10f      	bne.n	8007206 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ea:	f003 0320 	and.w	r3, r3, #32
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d009      	beq.n	8007206 <HAL_UART_IRQHandler+0x66>
 80071f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fc07 	bl	8007a12 <UART_Receive_IT>
      return;
 8007204:	e256      	b.n	80076b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007206:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 80de 	beq.w	80073cc <HAL_UART_IRQHandler+0x22c>
 8007210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d106      	bne.n	800722a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800721c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007220:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 80d1 	beq.w	80073cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800722a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00b      	beq.n	800724e <HAL_UART_IRQHandler+0xae>
 8007236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	f043 0201 	orr.w	r2, r3, #1
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800724e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007252:	f003 0304 	and.w	r3, r3, #4
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00b      	beq.n	8007272 <HAL_UART_IRQHandler+0xd2>
 800725a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d005      	beq.n	8007272 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	f043 0202 	orr.w	r2, r3, #2
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00b      	beq.n	8007296 <HAL_UART_IRQHandler+0xf6>
 800727e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d005      	beq.n	8007296 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	f043 0204 	orr.w	r2, r3, #4
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729a:	f003 0308 	and.w	r3, r3, #8
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d011      	beq.n	80072c6 <HAL_UART_IRQHandler+0x126>
 80072a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d105      	bne.n	80072ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d005      	beq.n	80072c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	f043 0208 	orr.w	r2, r3, #8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 81ed 	beq.w	80076aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d4:	f003 0320 	and.w	r3, r3, #32
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d008      	beq.n	80072ee <HAL_UART_IRQHandler+0x14e>
 80072dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fb92 	bl	8007a12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f8:	2b40      	cmp	r3, #64	; 0x40
 80072fa:	bf0c      	ite	eq
 80072fc:	2301      	moveq	r3, #1
 80072fe:	2300      	movne	r3, #0
 8007300:	b2db      	uxtb	r3, r3
 8007302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d103      	bne.n	800731a <HAL_UART_IRQHandler+0x17a>
 8007312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007316:	2b00      	cmp	r3, #0
 8007318:	d04f      	beq.n	80073ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa9a 	bl	8007854 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732a:	2b40      	cmp	r3, #64	; 0x40
 800732c:	d141      	bne.n	80073b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3314      	adds	r3, #20
 8007334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800734c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3314      	adds	r3, #20
 8007356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800735a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800735e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007366:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1d9      	bne.n	800732e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737e:	2b00      	cmp	r3, #0
 8007380:	d013      	beq.n	80073aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	4a7d      	ldr	r2, [pc, #500]	; (800757c <HAL_UART_IRQHandler+0x3dc>)
 8007388:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	4618      	mov	r0, r3
 8007390:	f7fc fb1b 	bl	80039ca <HAL_DMA_Abort_IT>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d016      	beq.n	80073c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073a4:	4610      	mov	r0, r2
 80073a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a8:	e00e      	b.n	80073c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f990 	bl	80076d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b0:	e00a      	b.n	80073c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f98c 	bl	80076d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b8:	e006      	b.n	80073c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f988 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80073c6:	e170      	b.n	80076aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c8:	bf00      	nop
    return;
 80073ca:	e16e      	b.n	80076aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	f040 814a 	bne.w	800766a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073da:	f003 0310 	and.w	r3, r3, #16
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 8143 	beq.w	800766a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e8:	f003 0310 	and.w	r3, r3, #16
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 813c 	beq.w	800766a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073f2:	2300      	movs	r3, #0
 80073f4:	60bb      	str	r3, [r7, #8]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60bb      	str	r3, [r7, #8]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	60bb      	str	r3, [r7, #8]
 8007406:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007412:	2b40      	cmp	r3, #64	; 0x40
 8007414:	f040 80b4 	bne.w	8007580 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007424:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 8140 	beq.w	80076ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007436:	429a      	cmp	r2, r3
 8007438:	f080 8139 	bcs.w	80076ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007442:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800744e:	f000 8088 	beq.w	8007562 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	330c      	adds	r3, #12
 8007458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007468:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800746c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	330c      	adds	r3, #12
 800747a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800747e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800748a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1d9      	bne.n	8007452 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3314      	adds	r3, #20
 80074a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074b0:	f023 0301 	bic.w	r3, r3, #1
 80074b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3314      	adds	r3, #20
 80074be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e1      	bne.n	800749e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3314      	adds	r3, #20
 80074e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3314      	adds	r3, #20
 80074fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007500:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007504:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800750c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e3      	bne.n	80074da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2220      	movs	r2, #32
 8007516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	330c      	adds	r3, #12
 8007526:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752a:	e853 3f00 	ldrex	r3, [r3]
 800752e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007532:	f023 0310 	bic.w	r3, r3, #16
 8007536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	330c      	adds	r3, #12
 8007540:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007544:	65ba      	str	r2, [r7, #88]	; 0x58
 8007546:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800754a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e3      	bne.n	8007520 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	4618      	mov	r0, r3
 800755e:	f7fc f9c4 	bl	80038ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800756a:	b29b      	uxth	r3, r3
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	b29b      	uxth	r3, r3
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f8b6 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007578:	e099      	b.n	80076ae <HAL_UART_IRQHandler+0x50e>
 800757a:	bf00      	nop
 800757c:	0800791b 	.word	0x0800791b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007588:	b29b      	uxth	r3, r3
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 808b 	beq.w	80076b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800759c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 8086 	beq.w	80076b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	330c      	adds	r3, #12
 80075ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	330c      	adds	r3, #12
 80075c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075ca:	647a      	str	r2, [r7, #68]	; 0x44
 80075cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e3      	bne.n	80075a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3314      	adds	r3, #20
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	e853 3f00 	ldrex	r3, [r3]
 80075ec:	623b      	str	r3, [r7, #32]
   return(result);
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	f023 0301 	bic.w	r3, r3, #1
 80075f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3314      	adds	r3, #20
 80075fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007602:	633a      	str	r2, [r7, #48]	; 0x30
 8007604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e3      	bne.n	80075de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2220      	movs	r2, #32
 800761a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	330c      	adds	r3, #12
 800762a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	60fb      	str	r3, [r7, #12]
   return(result);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0310 	bic.w	r3, r3, #16
 800763a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	330c      	adds	r3, #12
 8007644:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007648:	61fa      	str	r2, [r7, #28]
 800764a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	69b9      	ldr	r1, [r7, #24]
 800764e:	69fa      	ldr	r2, [r7, #28]
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	617b      	str	r3, [r7, #20]
   return(result);
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e3      	bne.n	8007624 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800765c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f83e 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007668:	e023      	b.n	80076b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800766a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <HAL_UART_IRQHandler+0x4ea>
 8007676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f95d 	bl	8007942 <UART_Transmit_IT>
    return;
 8007688:	e014      	b.n	80076b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800768a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00e      	beq.n	80076b4 <HAL_UART_IRQHandler+0x514>
 8007696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800769a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d008      	beq.n	80076b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f99d 	bl	80079e2 <UART_EndTransmit_IT>
    return;
 80076a8:	e004      	b.n	80076b4 <HAL_UART_IRQHandler+0x514>
    return;
 80076aa:	bf00      	nop
 80076ac:	e002      	b.n	80076b4 <HAL_UART_IRQHandler+0x514>
      return;
 80076ae:	bf00      	nop
 80076b0:	e000      	b.n	80076b4 <HAL_UART_IRQHandler+0x514>
      return;
 80076b2:	bf00      	nop
  }
}
 80076b4:	37e8      	adds	r7, #232	; 0xe8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop

080076bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b090      	sub	sp, #64	; 0x40
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	603b      	str	r3, [r7, #0]
 8007708:	4613      	mov	r3, r2
 800770a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800770c:	e050      	b.n	80077b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800770e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007714:	d04c      	beq.n	80077b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <UART_WaitOnFlagUntilTimeout+0x30>
 800771c:	f7fb ffa4 	bl	8003668 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007728:	429a      	cmp	r2, r3
 800772a:	d241      	bcs.n	80077b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	330c      	adds	r3, #12
 8007732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	330c      	adds	r3, #12
 800774a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800774c:	637a      	str	r2, [r7, #52]	; 0x34
 800774e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e5      	bne.n	800772c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3314      	adds	r3, #20
 8007766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	613b      	str	r3, [r7, #16]
   return(result);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f023 0301 	bic.w	r3, r3, #1
 8007776:	63bb      	str	r3, [r7, #56]	; 0x38
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3314      	adds	r3, #20
 800777e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007780:	623a      	str	r2, [r7, #32]
 8007782:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	69f9      	ldr	r1, [r7, #28]
 8007786:	6a3a      	ldr	r2, [r7, #32]
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	61bb      	str	r3, [r7, #24]
   return(result);
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e5      	bne.n	8007760 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2220      	movs	r2, #32
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e00f      	b.n	80077d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	4013      	ands	r3, r2
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	429a      	cmp	r2, r3
 80077be:	bf0c      	ite	eq
 80077c0:	2301      	moveq	r3, #1
 80077c2:	2300      	movne	r3, #0
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	79fb      	ldrb	r3, [r7, #7]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d09f      	beq.n	800770e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3740      	adds	r7, #64	; 0x40
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	4613      	mov	r3, r2
 80077e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	88fa      	ldrh	r2, [r7, #6]
 80077f0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	88fa      	ldrh	r2, [r7, #6]
 80077f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2222      	movs	r2, #34	; 0x22
 8007802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d007      	beq.n	8007826 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007824:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	695a      	ldr	r2, [r3, #20]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f042 0201 	orr.w	r2, r2, #1
 8007834:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f042 0220 	orr.w	r2, r2, #32
 8007844:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007854:	b480      	push	{r7}
 8007856:	b095      	sub	sp, #84	; 0x54
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	330c      	adds	r3, #12
 8007862:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007866:	e853 3f00 	ldrex	r3, [r3]
 800786a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	330c      	adds	r3, #12
 800787a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800787c:	643a      	str	r2, [r7, #64]	; 0x40
 800787e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007882:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e5      	bne.n	800785c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3314      	adds	r3, #20
 8007896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	e853 3f00 	ldrex	r3, [r3]
 800789e:	61fb      	str	r3, [r7, #28]
   return(result);
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	f023 0301 	bic.w	r3, r3, #1
 80078a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3314      	adds	r3, #20
 80078ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b8:	e841 2300 	strex	r3, r2, [r1]
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1e5      	bne.n	8007890 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d119      	bne.n	8007900 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	330c      	adds	r3, #12
 80078d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	e853 3f00 	ldrex	r3, [r3]
 80078da:	60bb      	str	r3, [r7, #8]
   return(result);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	f023 0310 	bic.w	r3, r3, #16
 80078e2:	647b      	str	r3, [r7, #68]	; 0x44
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	330c      	adds	r3, #12
 80078ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078ec:	61ba      	str	r2, [r7, #24]
 80078ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f0:	6979      	ldr	r1, [r7, #20]
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	e841 2300 	strex	r3, r2, [r1]
 80078f8:	613b      	str	r3, [r7, #16]
   return(result);
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1e5      	bne.n	80078cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800790e:	bf00      	nop
 8007910:	3754      	adds	r7, #84	; 0x54
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7ff fecb 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800793a:	bf00      	nop
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007942:	b480      	push	{r7}
 8007944:	b085      	sub	sp, #20
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b21      	cmp	r3, #33	; 0x21
 8007954:	d13e      	bne.n	80079d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795e:	d114      	bne.n	800798a <UART_Transmit_IT+0x48>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d110      	bne.n	800798a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800797c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	1c9a      	adds	r2, r3, #2
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	621a      	str	r2, [r3, #32]
 8007988:	e008      	b.n	800799c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	1c59      	adds	r1, r3, #1
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6211      	str	r1, [r2, #32]
 8007994:	781a      	ldrb	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	4619      	mov	r1, r3
 80079aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10f      	bne.n	80079d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	e000      	b.n	80079d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079d4:	2302      	movs	r3, #2
  }
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fe5a 	bl	80076bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b08c      	sub	sp, #48	; 0x30
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b22      	cmp	r3, #34	; 0x22
 8007a24:	f040 80ab 	bne.w	8007b7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a30:	d117      	bne.n	8007a62 <UART_Receive_IT+0x50>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d113      	bne.n	8007a62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5a:	1c9a      	adds	r2, r3, #2
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a60:	e026      	b.n	8007ab0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a74:	d007      	beq.n	8007a86 <UART_Receive_IT+0x74>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10a      	bne.n	8007a94 <UART_Receive_IT+0x82>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d106      	bne.n	8007a94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	e008      	b.n	8007aa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	4619      	mov	r1, r3
 8007abe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d15a      	bne.n	8007b7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0220 	bic.w	r2, r2, #32
 8007ad2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	695a      	ldr	r2, [r3, #20]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0201 	bic.w	r2, r2, #1
 8007af2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d135      	bne.n	8007b70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	330c      	adds	r3, #12
 8007b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	613b      	str	r3, [r7, #16]
   return(result);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f023 0310 	bic.w	r3, r3, #16
 8007b20:	627b      	str	r3, [r7, #36]	; 0x24
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	330c      	adds	r3, #12
 8007b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2a:	623a      	str	r2, [r7, #32]
 8007b2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	69f9      	ldr	r1, [r7, #28]
 8007b30:	6a3a      	ldr	r2, [r7, #32]
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e5      	bne.n	8007b0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0310 	and.w	r3, r3, #16
 8007b48:	2b10      	cmp	r3, #16
 8007b4a:	d10a      	bne.n	8007b62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff fdbb 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
 8007b6e:	e002      	b.n	8007b76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7f9 fdf7 	bl	8001764 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e002      	b.n	8007b80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	e000      	b.n	8007b80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b7e:	2302      	movs	r3, #2
  }
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3730      	adds	r7, #48	; 0x30
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b8c:	b0c0      	sub	sp, #256	; 0x100
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba4:	68d9      	ldr	r1, [r3, #12]
 8007ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	ea40 0301 	orr.w	r3, r0, r1
 8007bb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007be0:	f021 010c 	bic.w	r1, r1, #12
 8007be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bee:	430b      	orrs	r3, r1
 8007bf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c02:	6999      	ldr	r1, [r3, #24]
 8007c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	ea40 0301 	orr.w	r3, r0, r1
 8007c0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	4b8f      	ldr	r3, [pc, #572]	; (8007e54 <UART_SetConfig+0x2cc>)
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d005      	beq.n	8007c28 <UART_SetConfig+0xa0>
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b8d      	ldr	r3, [pc, #564]	; (8007e58 <UART_SetConfig+0x2d0>)
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d104      	bne.n	8007c32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c28:	f7fd fcc4 	bl	80055b4 <HAL_RCC_GetPCLK2Freq>
 8007c2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c30:	e003      	b.n	8007c3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c32:	f7fd fcab 	bl	800558c <HAL_RCC_GetPCLK1Freq>
 8007c36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c44:	f040 810c 	bne.w	8007e60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	462b      	mov	r3, r5
 8007c5e:	1891      	adds	r1, r2, r2
 8007c60:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c62:	415b      	adcs	r3, r3
 8007c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	eb12 0801 	adds.w	r8, r2, r1
 8007c70:	4629      	mov	r1, r5
 8007c72:	eb43 0901 	adc.w	r9, r3, r1
 8007c76:	f04f 0200 	mov.w	r2, #0
 8007c7a:	f04f 0300 	mov.w	r3, #0
 8007c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c8a:	4690      	mov	r8, r2
 8007c8c:	4699      	mov	r9, r3
 8007c8e:	4623      	mov	r3, r4
 8007c90:	eb18 0303 	adds.w	r3, r8, r3
 8007c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c98:	462b      	mov	r3, r5
 8007c9a:	eb49 0303 	adc.w	r3, r9, r3
 8007c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007cae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007cb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	18db      	adds	r3, r3, r3
 8007cba:	653b      	str	r3, [r7, #80]	; 0x50
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	eb42 0303 	adc.w	r3, r2, r3
 8007cc2:	657b      	str	r3, [r7, #84]	; 0x54
 8007cc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007cc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ccc:	f7f8 ff6e 	bl	8000bac <__aeabi_uldivmod>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4b61      	ldr	r3, [pc, #388]	; (8007e5c <UART_SetConfig+0x2d4>)
 8007cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cda:	095b      	lsrs	r3, r3, #5
 8007cdc:	011c      	lsls	r4, r3, #4
 8007cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ce8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007cec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	464b      	mov	r3, r9
 8007cf4:	1891      	adds	r1, r2, r2
 8007cf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007cf8:	415b      	adcs	r3, r3
 8007cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d00:	4641      	mov	r1, r8
 8007d02:	eb12 0a01 	adds.w	sl, r2, r1
 8007d06:	4649      	mov	r1, r9
 8007d08:	eb43 0b01 	adc.w	fp, r3, r1
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	f04f 0300 	mov.w	r3, #0
 8007d14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d20:	4692      	mov	sl, r2
 8007d22:	469b      	mov	fp, r3
 8007d24:	4643      	mov	r3, r8
 8007d26:	eb1a 0303 	adds.w	r3, sl, r3
 8007d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d2e:	464b      	mov	r3, r9
 8007d30:	eb4b 0303 	adc.w	r3, fp, r3
 8007d34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	18db      	adds	r3, r3, r3
 8007d50:	643b      	str	r3, [r7, #64]	; 0x40
 8007d52:	4613      	mov	r3, r2
 8007d54:	eb42 0303 	adc.w	r3, r2, r3
 8007d58:	647b      	str	r3, [r7, #68]	; 0x44
 8007d5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d62:	f7f8 ff23 	bl	8000bac <__aeabi_uldivmod>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4b3b      	ldr	r3, [pc, #236]	; (8007e5c <UART_SetConfig+0x2d4>)
 8007d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8007d72:	095b      	lsrs	r3, r3, #5
 8007d74:	2264      	movs	r2, #100	; 0x64
 8007d76:	fb02 f303 	mul.w	r3, r2, r3
 8007d7a:	1acb      	subs	r3, r1, r3
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d82:	4b36      	ldr	r3, [pc, #216]	; (8007e5c <UART_SetConfig+0x2d4>)
 8007d84:	fba3 2302 	umull	r2, r3, r3, r2
 8007d88:	095b      	lsrs	r3, r3, #5
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d90:	441c      	add	r4, r3
 8007d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007da0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007da4:	4642      	mov	r2, r8
 8007da6:	464b      	mov	r3, r9
 8007da8:	1891      	adds	r1, r2, r2
 8007daa:	63b9      	str	r1, [r7, #56]	; 0x38
 8007dac:	415b      	adcs	r3, r3
 8007dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007db0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007db4:	4641      	mov	r1, r8
 8007db6:	1851      	adds	r1, r2, r1
 8007db8:	6339      	str	r1, [r7, #48]	; 0x30
 8007dba:	4649      	mov	r1, r9
 8007dbc:	414b      	adcs	r3, r1
 8007dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	f04f 0300 	mov.w	r3, #0
 8007dc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007dcc:	4659      	mov	r1, fp
 8007dce:	00cb      	lsls	r3, r1, #3
 8007dd0:	4651      	mov	r1, sl
 8007dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dd6:	4651      	mov	r1, sl
 8007dd8:	00ca      	lsls	r2, r1, #3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4603      	mov	r3, r0
 8007de0:	4642      	mov	r2, r8
 8007de2:	189b      	adds	r3, r3, r2
 8007de4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007de8:	464b      	mov	r3, r9
 8007dea:	460a      	mov	r2, r1
 8007dec:	eb42 0303 	adc.w	r3, r2, r3
 8007df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e08:	460b      	mov	r3, r1
 8007e0a:	18db      	adds	r3, r3, r3
 8007e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e0e:	4613      	mov	r3, r2
 8007e10:	eb42 0303 	adc.w	r3, r2, r3
 8007e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e1e:	f7f8 fec5 	bl	8000bac <__aeabi_uldivmod>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4b0d      	ldr	r3, [pc, #52]	; (8007e5c <UART_SetConfig+0x2d4>)
 8007e28:	fba3 1302 	umull	r1, r3, r3, r2
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	2164      	movs	r1, #100	; 0x64
 8007e30:	fb01 f303 	mul.w	r3, r1, r3
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	3332      	adds	r3, #50	; 0x32
 8007e3a:	4a08      	ldr	r2, [pc, #32]	; (8007e5c <UART_SetConfig+0x2d4>)
 8007e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e40:	095b      	lsrs	r3, r3, #5
 8007e42:	f003 0207 	and.w	r2, r3, #7
 8007e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4422      	add	r2, r4
 8007e4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e50:	e106      	b.n	8008060 <UART_SetConfig+0x4d8>
 8007e52:	bf00      	nop
 8007e54:	40011000 	.word	0x40011000
 8007e58:	40011400 	.word	0x40011400
 8007e5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e64:	2200      	movs	r2, #0
 8007e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e72:	4642      	mov	r2, r8
 8007e74:	464b      	mov	r3, r9
 8007e76:	1891      	adds	r1, r2, r2
 8007e78:	6239      	str	r1, [r7, #32]
 8007e7a:	415b      	adcs	r3, r3
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e82:	4641      	mov	r1, r8
 8007e84:	1854      	adds	r4, r2, r1
 8007e86:	4649      	mov	r1, r9
 8007e88:	eb43 0501 	adc.w	r5, r3, r1
 8007e8c:	f04f 0200 	mov.w	r2, #0
 8007e90:	f04f 0300 	mov.w	r3, #0
 8007e94:	00eb      	lsls	r3, r5, #3
 8007e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e9a:	00e2      	lsls	r2, r4, #3
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	461d      	mov	r5, r3
 8007ea0:	4643      	mov	r3, r8
 8007ea2:	18e3      	adds	r3, r4, r3
 8007ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	eb45 0303 	adc.w	r3, r5, r3
 8007eae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ebe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ec2:	f04f 0200 	mov.w	r2, #0
 8007ec6:	f04f 0300 	mov.w	r3, #0
 8007eca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007ece:	4629      	mov	r1, r5
 8007ed0:	008b      	lsls	r3, r1, #2
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ed8:	4621      	mov	r1, r4
 8007eda:	008a      	lsls	r2, r1, #2
 8007edc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ee0:	f7f8 fe64 	bl	8000bac <__aeabi_uldivmod>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4b60      	ldr	r3, [pc, #384]	; (800806c <UART_SetConfig+0x4e4>)
 8007eea:	fba3 2302 	umull	r2, r3, r3, r2
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	011c      	lsls	r4, r3, #4
 8007ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007efc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f04:	4642      	mov	r2, r8
 8007f06:	464b      	mov	r3, r9
 8007f08:	1891      	adds	r1, r2, r2
 8007f0a:	61b9      	str	r1, [r7, #24]
 8007f0c:	415b      	adcs	r3, r3
 8007f0e:	61fb      	str	r3, [r7, #28]
 8007f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f14:	4641      	mov	r1, r8
 8007f16:	1851      	adds	r1, r2, r1
 8007f18:	6139      	str	r1, [r7, #16]
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	414b      	adcs	r3, r1
 8007f1e:	617b      	str	r3, [r7, #20]
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	f04f 0300 	mov.w	r3, #0
 8007f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	00cb      	lsls	r3, r1, #3
 8007f30:	4651      	mov	r1, sl
 8007f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f36:	4651      	mov	r1, sl
 8007f38:	00ca      	lsls	r2, r1, #3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4603      	mov	r3, r0
 8007f40:	4642      	mov	r2, r8
 8007f42:	189b      	adds	r3, r3, r2
 8007f44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f48:	464b      	mov	r3, r9
 8007f4a:	460a      	mov	r2, r1
 8007f4c:	eb42 0303 	adc.w	r3, r2, r3
 8007f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f60:	f04f 0200 	mov.w	r2, #0
 8007f64:	f04f 0300 	mov.w	r3, #0
 8007f68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f6c:	4649      	mov	r1, r9
 8007f6e:	008b      	lsls	r3, r1, #2
 8007f70:	4641      	mov	r1, r8
 8007f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f76:	4641      	mov	r1, r8
 8007f78:	008a      	lsls	r2, r1, #2
 8007f7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f7e:	f7f8 fe15 	bl	8000bac <__aeabi_uldivmod>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4611      	mov	r1, r2
 8007f88:	4b38      	ldr	r3, [pc, #224]	; (800806c <UART_SetConfig+0x4e4>)
 8007f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f8e:	095b      	lsrs	r3, r3, #5
 8007f90:	2264      	movs	r2, #100	; 0x64
 8007f92:	fb02 f303 	mul.w	r3, r2, r3
 8007f96:	1acb      	subs	r3, r1, r3
 8007f98:	011b      	lsls	r3, r3, #4
 8007f9a:	3332      	adds	r3, #50	; 0x32
 8007f9c:	4a33      	ldr	r2, [pc, #204]	; (800806c <UART_SetConfig+0x4e4>)
 8007f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa2:	095b      	lsrs	r3, r3, #5
 8007fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fa8:	441c      	add	r4, r3
 8007faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fae:	2200      	movs	r2, #0
 8007fb0:	673b      	str	r3, [r7, #112]	; 0x70
 8007fb2:	677a      	str	r2, [r7, #116]	; 0x74
 8007fb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007fb8:	4642      	mov	r2, r8
 8007fba:	464b      	mov	r3, r9
 8007fbc:	1891      	adds	r1, r2, r2
 8007fbe:	60b9      	str	r1, [r7, #8]
 8007fc0:	415b      	adcs	r3, r3
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fc8:	4641      	mov	r1, r8
 8007fca:	1851      	adds	r1, r2, r1
 8007fcc:	6039      	str	r1, [r7, #0]
 8007fce:	4649      	mov	r1, r9
 8007fd0:	414b      	adcs	r3, r1
 8007fd2:	607b      	str	r3, [r7, #4]
 8007fd4:	f04f 0200 	mov.w	r2, #0
 8007fd8:	f04f 0300 	mov.w	r3, #0
 8007fdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fe0:	4659      	mov	r1, fp
 8007fe2:	00cb      	lsls	r3, r1, #3
 8007fe4:	4651      	mov	r1, sl
 8007fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fea:	4651      	mov	r1, sl
 8007fec:	00ca      	lsls	r2, r1, #3
 8007fee:	4610      	mov	r0, r2
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4642      	mov	r2, r8
 8007ff6:	189b      	adds	r3, r3, r2
 8007ff8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ffa:	464b      	mov	r3, r9
 8007ffc:	460a      	mov	r2, r1
 8007ffe:	eb42 0303 	adc.w	r3, r2, r3
 8008002:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	663b      	str	r3, [r7, #96]	; 0x60
 800800e:	667a      	str	r2, [r7, #100]	; 0x64
 8008010:	f04f 0200 	mov.w	r2, #0
 8008014:	f04f 0300 	mov.w	r3, #0
 8008018:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800801c:	4649      	mov	r1, r9
 800801e:	008b      	lsls	r3, r1, #2
 8008020:	4641      	mov	r1, r8
 8008022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008026:	4641      	mov	r1, r8
 8008028:	008a      	lsls	r2, r1, #2
 800802a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800802e:	f7f8 fdbd 	bl	8000bac <__aeabi_uldivmod>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4b0d      	ldr	r3, [pc, #52]	; (800806c <UART_SetConfig+0x4e4>)
 8008038:	fba3 1302 	umull	r1, r3, r3, r2
 800803c:	095b      	lsrs	r3, r3, #5
 800803e:	2164      	movs	r1, #100	; 0x64
 8008040:	fb01 f303 	mul.w	r3, r1, r3
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	011b      	lsls	r3, r3, #4
 8008048:	3332      	adds	r3, #50	; 0x32
 800804a:	4a08      	ldr	r2, [pc, #32]	; (800806c <UART_SetConfig+0x4e4>)
 800804c:	fba2 2303 	umull	r2, r3, r2, r3
 8008050:	095b      	lsrs	r3, r3, #5
 8008052:	f003 020f 	and.w	r2, r3, #15
 8008056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4422      	add	r2, r4
 800805e:	609a      	str	r2, [r3, #8]
}
 8008060:	bf00      	nop
 8008062:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008066:	46bd      	mov	sp, r7
 8008068:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800806c:	51eb851f 	.word	0x51eb851f

08008070 <__NVIC_SetPriority>:
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	6039      	str	r1, [r7, #0]
 800807a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800807c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008080:	2b00      	cmp	r3, #0
 8008082:	db0a      	blt.n	800809a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	b2da      	uxtb	r2, r3
 8008088:	490c      	ldr	r1, [pc, #48]	; (80080bc <__NVIC_SetPriority+0x4c>)
 800808a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800808e:	0112      	lsls	r2, r2, #4
 8008090:	b2d2      	uxtb	r2, r2
 8008092:	440b      	add	r3, r1
 8008094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008098:	e00a      	b.n	80080b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	b2da      	uxtb	r2, r3
 800809e:	4908      	ldr	r1, [pc, #32]	; (80080c0 <__NVIC_SetPriority+0x50>)
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	f003 030f 	and.w	r3, r3, #15
 80080a6:	3b04      	subs	r3, #4
 80080a8:	0112      	lsls	r2, r2, #4
 80080aa:	b2d2      	uxtb	r2, r2
 80080ac:	440b      	add	r3, r1
 80080ae:	761a      	strb	r2, [r3, #24]
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	e000e100 	.word	0xe000e100
 80080c0:	e000ed00 	.word	0xe000ed00

080080c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80080c8:	2100      	movs	r1, #0
 80080ca:	f06f 0004 	mvn.w	r0, #4
 80080ce:	f7ff ffcf 	bl	8008070 <__NVIC_SetPriority>
#endif
}
 80080d2:	bf00      	nop
 80080d4:	bd80      	pop	{r7, pc}
	...

080080d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080de:	f3ef 8305 	mrs	r3, IPSR
 80080e2:	603b      	str	r3, [r7, #0]
  return(result);
 80080e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80080ea:	f06f 0305 	mvn.w	r3, #5
 80080ee:	607b      	str	r3, [r7, #4]
 80080f0:	e00c      	b.n	800810c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80080f2:	4b0a      	ldr	r3, [pc, #40]	; (800811c <osKernelInitialize+0x44>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d105      	bne.n	8008106 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80080fa:	4b08      	ldr	r3, [pc, #32]	; (800811c <osKernelInitialize+0x44>)
 80080fc:	2201      	movs	r2, #1
 80080fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008100:	2300      	movs	r3, #0
 8008102:	607b      	str	r3, [r7, #4]
 8008104:	e002      	b.n	800810c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008106:	f04f 33ff 	mov.w	r3, #4294967295
 800810a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800810c:	687b      	ldr	r3, [r7, #4]
}
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	2000071c 	.word	0x2000071c

08008120 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008126:	f3ef 8305 	mrs	r3, IPSR
 800812a:	603b      	str	r3, [r7, #0]
  return(result);
 800812c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008132:	f06f 0305 	mvn.w	r3, #5
 8008136:	607b      	str	r3, [r7, #4]
 8008138:	e010      	b.n	800815c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800813a:	4b0b      	ldr	r3, [pc, #44]	; (8008168 <osKernelStart+0x48>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d109      	bne.n	8008156 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008142:	f7ff ffbf 	bl	80080c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008146:	4b08      	ldr	r3, [pc, #32]	; (8008168 <osKernelStart+0x48>)
 8008148:	2202      	movs	r2, #2
 800814a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800814c:	f001 f87c 	bl	8009248 <vTaskStartScheduler>
      stat = osOK;
 8008150:	2300      	movs	r3, #0
 8008152:	607b      	str	r3, [r7, #4]
 8008154:	e002      	b.n	800815c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008156:	f04f 33ff 	mov.w	r3, #4294967295
 800815a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800815c:	687b      	ldr	r3, [r7, #4]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	2000071c 	.word	0x2000071c

0800816c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800816c:	b580      	push	{r7, lr}
 800816e:	b08e      	sub	sp, #56	; 0x38
 8008170:	af04      	add	r7, sp, #16
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008178:	2300      	movs	r3, #0
 800817a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800817c:	f3ef 8305 	mrs	r3, IPSR
 8008180:	617b      	str	r3, [r7, #20]
  return(result);
 8008182:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008184:	2b00      	cmp	r3, #0
 8008186:	d17e      	bne.n	8008286 <osThreadNew+0x11a>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d07b      	beq.n	8008286 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800818e:	2380      	movs	r3, #128	; 0x80
 8008190:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008192:	2318      	movs	r3, #24
 8008194:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008196:	2300      	movs	r3, #0
 8008198:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800819a:	f04f 33ff 	mov.w	r3, #4294967295
 800819e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d045      	beq.n	8008232 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <osThreadNew+0x48>
        name = attr->name;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d008      	beq.n	80081da <osThreadNew+0x6e>
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	2b38      	cmp	r3, #56	; 0x38
 80081cc:	d805      	bhi.n	80081da <osThreadNew+0x6e>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <osThreadNew+0x72>
        return (NULL);
 80081da:	2300      	movs	r3, #0
 80081dc:	e054      	b.n	8008288 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	089b      	lsrs	r3, r3, #2
 80081ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00e      	beq.n	8008214 <osThreadNew+0xa8>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	2ba7      	cmp	r3, #167	; 0xa7
 80081fc:	d90a      	bls.n	8008214 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008202:	2b00      	cmp	r3, #0
 8008204:	d006      	beq.n	8008214 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <osThreadNew+0xa8>
        mem = 1;
 800820e:	2301      	movs	r3, #1
 8008210:	61bb      	str	r3, [r7, #24]
 8008212:	e010      	b.n	8008236 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10c      	bne.n	8008236 <osThreadNew+0xca>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d108      	bne.n	8008236 <osThreadNew+0xca>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d104      	bne.n	8008236 <osThreadNew+0xca>
          mem = 0;
 800822c:	2300      	movs	r3, #0
 800822e:	61bb      	str	r3, [r7, #24]
 8008230:	e001      	b.n	8008236 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d110      	bne.n	800825e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008244:	9202      	str	r2, [sp, #8]
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	6a3a      	ldr	r2, [r7, #32]
 8008250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 fe0c 	bl	8008e70 <xTaskCreateStatic>
 8008258:	4603      	mov	r3, r0
 800825a:	613b      	str	r3, [r7, #16]
 800825c:	e013      	b.n	8008286 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d110      	bne.n	8008286 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	b29a      	uxth	r2, r3
 8008268:	f107 0310 	add.w	r3, r7, #16
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 fe57 	bl	8008f2a <xTaskCreate>
 800827c:	4603      	mov	r3, r0
 800827e:	2b01      	cmp	r3, #1
 8008280:	d001      	beq.n	8008286 <osThreadNew+0x11a>
            hTask = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008286:	693b      	ldr	r3, [r7, #16]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3728      	adds	r7, #40	; 0x28
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008298:	f3ef 8305 	mrs	r3, IPSR
 800829c:	60bb      	str	r3, [r7, #8]
  return(result);
 800829e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d003      	beq.n	80082ac <osDelay+0x1c>
    stat = osErrorISR;
 80082a4:	f06f 0305 	mvn.w	r3, #5
 80082a8:	60fb      	str	r3, [r7, #12]
 80082aa:	e007      	b.n	80082bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 ff92 	bl	80091e0 <vTaskDelay>
    }
  }

  return (stat);
 80082bc:	68fb      	ldr	r3, [r7, #12]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	4a07      	ldr	r2, [pc, #28]	; (80082f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80082d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4a06      	ldr	r2, [pc, #24]	; (80082f8 <vApplicationGetIdleTaskMemory+0x30>)
 80082de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2280      	movs	r2, #128	; 0x80
 80082e4:	601a      	str	r2, [r3, #0]
}
 80082e6:	bf00      	nop
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	20000720 	.word	0x20000720
 80082f8:	200007c8 	.word	0x200007c8

080082fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4a07      	ldr	r2, [pc, #28]	; (8008328 <vApplicationGetTimerTaskMemory+0x2c>)
 800830c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	4a06      	ldr	r2, [pc, #24]	; (800832c <vApplicationGetTimerTaskMemory+0x30>)
 8008312:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800831a:	601a      	str	r2, [r3, #0]
}
 800831c:	bf00      	nop
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	200009c8 	.word	0x200009c8
 800832c:	20000a70 	.word	0x20000a70

08008330 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f103 0208 	add.w	r2, r3, #8
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f04f 32ff 	mov.w	r2, #4294967295
 8008348:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f103 0208 	add.w	r2, r3, #8
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f103 0208 	add.w	r2, r3, #8
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800838a:	b480      	push	{r7}
 800838c:	b085      	sub	sp, #20
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	601a      	str	r2, [r3, #0]
}
 80083c6:	bf00      	nop
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083d2:	b480      	push	{r7}
 80083d4:	b085      	sub	sp, #20
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e8:	d103      	bne.n	80083f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	e00c      	b.n	800840c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3308      	adds	r3, #8
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	e002      	b.n	8008400 <vListInsert+0x2e>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	429a      	cmp	r2, r3
 800840a:	d2f6      	bcs.n	80083fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	601a      	str	r2, [r3, #0]
}
 8008438:	bf00      	nop
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	6892      	ldr	r2, [r2, #8]
 800845a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	6852      	ldr	r2, [r2, #4]
 8008464:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	429a      	cmp	r2, r3
 800846e:	d103      	bne.n	8008478 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	1e5a      	subs	r2, r3, #1
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80084c2:	f002 f877 	bl	800a5b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ce:	68f9      	ldr	r1, [r7, #12]
 80084d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80084d2:	fb01 f303 	mul.w	r3, r1, r3
 80084d6:	441a      	add	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f2:	3b01      	subs	r3, #1
 80084f4:	68f9      	ldr	r1, [r7, #12]
 80084f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80084f8:	fb01 f303 	mul.w	r3, r1, r3
 80084fc:	441a      	add	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	22ff      	movs	r2, #255	; 0xff
 8008506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	22ff      	movs	r2, #255	; 0xff
 800850e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d114      	bne.n	8008542 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01a      	beq.n	8008556 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3310      	adds	r3, #16
 8008524:	4618      	mov	r0, r3
 8008526:	f001 f929 	bl	800977c <xTaskRemoveFromEventList>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d012      	beq.n	8008556 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008530:	4b0c      	ldr	r3, [pc, #48]	; (8008564 <xQueueGenericReset+0xcc>)
 8008532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	e009      	b.n	8008556 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3310      	adds	r3, #16
 8008546:	4618      	mov	r0, r3
 8008548:	f7ff fef2 	bl	8008330 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3324      	adds	r3, #36	; 0x24
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff feed 	bl	8008330 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008556:	f002 f85d 	bl	800a614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800855a:	2301      	movs	r3, #1
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	e000ed04 	.word	0xe000ed04

08008568 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008568:	b580      	push	{r7, lr}
 800856a:	b08e      	sub	sp, #56	; 0x38
 800856c:	af02      	add	r7, sp, #8
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10a      	bne.n	8008592 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800858e:	bf00      	nop
 8008590:	e7fe      	b.n	8008590 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10a      	bne.n	80085ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085aa:	bf00      	nop
 80085ac:	e7fe      	b.n	80085ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <xQueueGenericCreateStatic+0x52>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <xQueueGenericCreateStatic+0x56>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e000      	b.n	80085c0 <xQueueGenericCreateStatic+0x58>
 80085be:	2300      	movs	r3, #0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10a      	bne.n	80085da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	623b      	str	r3, [r7, #32]
}
 80085d6:	bf00      	nop
 80085d8:	e7fe      	b.n	80085d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d102      	bne.n	80085e6 <xQueueGenericCreateStatic+0x7e>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <xQueueGenericCreateStatic+0x82>
 80085e6:	2301      	movs	r3, #1
 80085e8:	e000      	b.n	80085ec <xQueueGenericCreateStatic+0x84>
 80085ea:	2300      	movs	r3, #0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10a      	bne.n	8008606 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	61fb      	str	r3, [r7, #28]
}
 8008602:	bf00      	nop
 8008604:	e7fe      	b.n	8008604 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008606:	2350      	movs	r3, #80	; 0x50
 8008608:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b50      	cmp	r3, #80	; 0x50
 800860e:	d00a      	beq.n	8008626 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	61bb      	str	r3, [r7, #24]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008626:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800862c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00d      	beq.n	800864e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800863a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800863e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	4613      	mov	r3, r2
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	68b9      	ldr	r1, [r7, #8]
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f805 	bl	8008658 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800864e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008650:	4618      	mov	r0, r3
 8008652:	3730      	adds	r7, #48	; 0x30
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
 8008664:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d103      	bne.n	8008674 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	601a      	str	r2, [r3, #0]
 8008672:	e002      	b.n	800867a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008686:	2101      	movs	r1, #1
 8008688:	69b8      	ldr	r0, [r7, #24]
 800868a:	f7ff ff05 	bl	8008498 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	78fa      	ldrb	r2, [r7, #3]
 8008692:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008696:	bf00      	nop
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08e      	sub	sp, #56	; 0x38
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80086ae:	2300      	movs	r3, #0
 80086b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10a      	bne.n	80086d2 <xQueueGenericSend+0x32>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d103      	bne.n	80086e0 <xQueueGenericSend+0x40>
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <xQueueGenericSend+0x44>
 80086e0:	2301      	movs	r3, #1
 80086e2:	e000      	b.n	80086e6 <xQueueGenericSend+0x46>
 80086e4:	2300      	movs	r3, #0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10a      	bne.n	8008700 <xQueueGenericSend+0x60>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086fc:	bf00      	nop
 80086fe:	e7fe      	b.n	80086fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	2b02      	cmp	r3, #2
 8008704:	d103      	bne.n	800870e <xQueueGenericSend+0x6e>
 8008706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870a:	2b01      	cmp	r3, #1
 800870c:	d101      	bne.n	8008712 <xQueueGenericSend+0x72>
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <xQueueGenericSend+0x74>
 8008712:	2300      	movs	r3, #0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10a      	bne.n	800872e <xQueueGenericSend+0x8e>
	__asm volatile
 8008718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	623b      	str	r3, [r7, #32]
}
 800872a:	bf00      	nop
 800872c:	e7fe      	b.n	800872c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800872e:	f001 f9e7 	bl	8009b00 <xTaskGetSchedulerState>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d102      	bne.n	800873e <xQueueGenericSend+0x9e>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <xQueueGenericSend+0xa2>
 800873e:	2301      	movs	r3, #1
 8008740:	e000      	b.n	8008744 <xQueueGenericSend+0xa4>
 8008742:	2300      	movs	r3, #0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10a      	bne.n	800875e <xQueueGenericSend+0xbe>
	__asm volatile
 8008748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874c:	f383 8811 	msr	BASEPRI, r3
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	61fb      	str	r3, [r7, #28]
}
 800875a:	bf00      	nop
 800875c:	e7fe      	b.n	800875c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800875e:	f001 ff29 	bl	800a5b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800876a:	429a      	cmp	r2, r3
 800876c:	d302      	bcc.n	8008774 <xQueueGenericSend+0xd4>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d129      	bne.n	80087c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	68b9      	ldr	r1, [r7, #8]
 8008778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800877a:	f000 fa0b 	bl	8008b94 <prvCopyDataToQueue>
 800877e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	2b00      	cmp	r3, #0
 8008786:	d010      	beq.n	80087aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878a:	3324      	adds	r3, #36	; 0x24
 800878c:	4618      	mov	r0, r3
 800878e:	f000 fff5 	bl	800977c <xTaskRemoveFromEventList>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d013      	beq.n	80087c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008798:	4b3f      	ldr	r3, [pc, #252]	; (8008898 <xQueueGenericSend+0x1f8>)
 800879a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	e00a      	b.n	80087c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80087aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d007      	beq.n	80087c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80087b0:	4b39      	ldr	r3, [pc, #228]	; (8008898 <xQueueGenericSend+0x1f8>)
 80087b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80087c0:	f001 ff28 	bl	800a614 <vPortExitCritical>
				return pdPASS;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e063      	b.n	8008890 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d103      	bne.n	80087d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087ce:	f001 ff21 	bl	800a614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e05c      	b.n	8008890 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d106      	bne.n	80087ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087dc:	f107 0314 	add.w	r3, r7, #20
 80087e0:	4618      	mov	r0, r3
 80087e2:	f001 f82f 	bl	8009844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087e6:	2301      	movs	r3, #1
 80087e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087ea:	f001 ff13 	bl	800a614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087ee:	f000 fd9b 	bl	8009328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087f2:	f001 fedf 	bl	800a5b4 <vPortEnterCritical>
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087fc:	b25b      	sxtb	r3, r3
 80087fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008802:	d103      	bne.n	800880c <xQueueGenericSend+0x16c>
 8008804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008806:	2200      	movs	r2, #0
 8008808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008812:	b25b      	sxtb	r3, r3
 8008814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008818:	d103      	bne.n	8008822 <xQueueGenericSend+0x182>
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008822:	f001 fef7 	bl	800a614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008826:	1d3a      	adds	r2, r7, #4
 8008828:	f107 0314 	add.w	r3, r7, #20
 800882c:	4611      	mov	r1, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f001 f81e 	bl	8009870 <xTaskCheckForTimeOut>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d124      	bne.n	8008884 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800883a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800883c:	f000 faa2 	bl	8008d84 <prvIsQueueFull>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d018      	beq.n	8008878 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	3310      	adds	r3, #16
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	4611      	mov	r1, r2
 800884e:	4618      	mov	r0, r3
 8008850:	f000 ff44 	bl	80096dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008856:	f000 fa2d 	bl	8008cb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800885a:	f000 fd73 	bl	8009344 <xTaskResumeAll>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	f47f af7c 	bne.w	800875e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008866:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <xQueueGenericSend+0x1f8>)
 8008868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	e772      	b.n	800875e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800887a:	f000 fa1b 	bl	8008cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800887e:	f000 fd61 	bl	8009344 <xTaskResumeAll>
 8008882:	e76c      	b.n	800875e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008886:	f000 fa15 	bl	8008cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800888a:	f000 fd5b 	bl	8009344 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800888e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008890:	4618      	mov	r0, r3
 8008892:	3738      	adds	r7, #56	; 0x38
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b090      	sub	sp, #64	; 0x40
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80088ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10a      	bne.n	80088ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80088c6:	bf00      	nop
 80088c8:	e7fe      	b.n	80088c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d103      	bne.n	80088d8 <xQueueGenericSendFromISR+0x3c>
 80088d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <xQueueGenericSendFromISR+0x40>
 80088d8:	2301      	movs	r3, #1
 80088da:	e000      	b.n	80088de <xQueueGenericSendFromISR+0x42>
 80088dc:	2300      	movs	r3, #0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10a      	bne.n	80088f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088f4:	bf00      	nop
 80088f6:	e7fe      	b.n	80088f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d103      	bne.n	8008906 <xQueueGenericSendFromISR+0x6a>
 80088fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008902:	2b01      	cmp	r3, #1
 8008904:	d101      	bne.n	800890a <xQueueGenericSendFromISR+0x6e>
 8008906:	2301      	movs	r3, #1
 8008908:	e000      	b.n	800890c <xQueueGenericSendFromISR+0x70>
 800890a:	2300      	movs	r3, #0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10a      	bne.n	8008926 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	623b      	str	r3, [r7, #32]
}
 8008922:	bf00      	nop
 8008924:	e7fe      	b.n	8008924 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008926:	f001 ff27 	bl	800a778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800892a:	f3ef 8211 	mrs	r2, BASEPRI
 800892e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	61fa      	str	r2, [r7, #28]
 8008940:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008942:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008944:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894e:	429a      	cmp	r2, r3
 8008950:	d302      	bcc.n	8008958 <xQueueGenericSendFromISR+0xbc>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b02      	cmp	r3, #2
 8008956:	d12f      	bne.n	80089b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800895e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008966:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	68b9      	ldr	r1, [r7, #8]
 800896c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800896e:	f000 f911 	bl	8008b94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008972:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897a:	d112      	bne.n	80089a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	2b00      	cmp	r3, #0
 8008982:	d016      	beq.n	80089b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008986:	3324      	adds	r3, #36	; 0x24
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fef7 	bl	800977c <xTaskRemoveFromEventList>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00e      	beq.n	80089b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00b      	beq.n	80089b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	e007      	b.n	80089b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089a6:	3301      	adds	r3, #1
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	b25a      	sxtb	r2, r3
 80089ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80089b2:	2301      	movs	r3, #1
 80089b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80089b6:	e001      	b.n	80089bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80089b8:	2300      	movs	r3, #0
 80089ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80089c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3740      	adds	r7, #64	; 0x40
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08c      	sub	sp, #48	; 0x30
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089e0:	2300      	movs	r3, #0
 80089e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10a      	bne.n	8008a04 <xQueueReceive+0x30>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	623b      	str	r3, [r7, #32]
}
 8008a00:	bf00      	nop
 8008a02:	e7fe      	b.n	8008a02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d103      	bne.n	8008a12 <xQueueReceive+0x3e>
 8008a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <xQueueReceive+0x42>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e000      	b.n	8008a18 <xQueueReceive+0x44>
 8008a16:	2300      	movs	r3, #0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10a      	bne.n	8008a32 <xQueueReceive+0x5e>
	__asm volatile
 8008a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	61fb      	str	r3, [r7, #28]
}
 8008a2e:	bf00      	nop
 8008a30:	e7fe      	b.n	8008a30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a32:	f001 f865 	bl	8009b00 <xTaskGetSchedulerState>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d102      	bne.n	8008a42 <xQueueReceive+0x6e>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <xQueueReceive+0x72>
 8008a42:	2301      	movs	r3, #1
 8008a44:	e000      	b.n	8008a48 <xQueueReceive+0x74>
 8008a46:	2300      	movs	r3, #0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10a      	bne.n	8008a62 <xQueueReceive+0x8e>
	__asm volatile
 8008a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	61bb      	str	r3, [r7, #24]
}
 8008a5e:	bf00      	nop
 8008a60:	e7fe      	b.n	8008a60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a62:	f001 fda7 	bl	800a5b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d01f      	beq.n	8008ab2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a72:	68b9      	ldr	r1, [r7, #8]
 8008a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a76:	f000 f8f7 	bl	8008c68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	1e5a      	subs	r2, r3, #1
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00f      	beq.n	8008aaa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	3310      	adds	r3, #16
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fe74 	bl	800977c <xTaskRemoveFromEventList>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d007      	beq.n	8008aaa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a9a:	4b3d      	ldr	r3, [pc, #244]	; (8008b90 <xQueueReceive+0x1bc>)
 8008a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008aaa:	f001 fdb3 	bl	800a614 <vPortExitCritical>
				return pdPASS;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e069      	b.n	8008b86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d103      	bne.n	8008ac0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ab8:	f001 fdac 	bl	800a614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008abc:	2300      	movs	r3, #0
 8008abe:	e062      	b.n	8008b86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d106      	bne.n	8008ad4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ac6:	f107 0310 	add.w	r3, r7, #16
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 feba 	bl	8009844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ad4:	f001 fd9e 	bl	800a614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ad8:	f000 fc26 	bl	8009328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008adc:	f001 fd6a 	bl	800a5b4 <vPortEnterCritical>
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ae6:	b25b      	sxtb	r3, r3
 8008ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aec:	d103      	bne.n	8008af6 <xQueueReceive+0x122>
 8008aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008afc:	b25b      	sxtb	r3, r3
 8008afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b02:	d103      	bne.n	8008b0c <xQueueReceive+0x138>
 8008b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b0c:	f001 fd82 	bl	800a614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b10:	1d3a      	adds	r2, r7, #4
 8008b12:	f107 0310 	add.w	r3, r7, #16
 8008b16:	4611      	mov	r1, r2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fea9 	bl	8009870 <xTaskCheckForTimeOut>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d123      	bne.n	8008b6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b26:	f000 f917 	bl	8008d58 <prvIsQueueEmpty>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d017      	beq.n	8008b60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	3324      	adds	r3, #36	; 0x24
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	4611      	mov	r1, r2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 fdcf 	bl	80096dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b40:	f000 f8b8 	bl	8008cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b44:	f000 fbfe 	bl	8009344 <xTaskResumeAll>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d189      	bne.n	8008a62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008b4e:	4b10      	ldr	r3, [pc, #64]	; (8008b90 <xQueueReceive+0x1bc>)
 8008b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	e780      	b.n	8008a62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b62:	f000 f8a7 	bl	8008cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b66:	f000 fbed 	bl	8009344 <xTaskResumeAll>
 8008b6a:	e77a      	b.n	8008a62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b6e:	f000 f8a1 	bl	8008cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b72:	f000 fbe7 	bl	8009344 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b78:	f000 f8ee 	bl	8008d58 <prvIsQueueEmpty>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f43f af6f 	beq.w	8008a62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3730      	adds	r7, #48	; 0x30
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	e000ed04 	.word	0xe000ed04

08008b94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10d      	bne.n	8008bce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d14d      	bne.n	8008c56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 ffbc 	bl	8009b3c <xTaskPriorityDisinherit>
 8008bc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	609a      	str	r2, [r3, #8]
 8008bcc:	e043      	b.n	8008c56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d119      	bne.n	8008c08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6858      	ldr	r0, [r3, #4]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bdc:	461a      	mov	r2, r3
 8008bde:	68b9      	ldr	r1, [r7, #8]
 8008be0:	f002 f89e 	bl	800ad20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bec:	441a      	add	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d32b      	bcc.n	8008c56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	605a      	str	r2, [r3, #4]
 8008c06:	e026      	b.n	8008c56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	68d8      	ldr	r0, [r3, #12]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c10:	461a      	mov	r2, r3
 8008c12:	68b9      	ldr	r1, [r7, #8]
 8008c14:	f002 f884 	bl	800ad20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c20:	425b      	negs	r3, r3
 8008c22:	441a      	add	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	68da      	ldr	r2, [r3, #12]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d207      	bcs.n	8008c44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	689a      	ldr	r2, [r3, #8]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3c:	425b      	negs	r3, r3
 8008c3e:	441a      	add	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d105      	bne.n	8008c56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c5e:	697b      	ldr	r3, [r7, #20]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d018      	beq.n	8008cac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68da      	ldr	r2, [r3, #12]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	441a      	add	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d303      	bcc.n	8008c9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68d9      	ldr	r1, [r3, #12]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	6838      	ldr	r0, [r7, #0]
 8008ca8:	f002 f83a 	bl	800ad20 <memcpy>
	}
}
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cbc:	f001 fc7a 	bl	800a5b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cc8:	e011      	b.n	8008cee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d012      	beq.n	8008cf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	3324      	adds	r3, #36	; 0x24
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 fd50 	bl	800977c <xTaskRemoveFromEventList>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ce2:	f000 fe27 	bl	8009934 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	dce9      	bgt.n	8008cca <prvUnlockQueue+0x16>
 8008cf6:	e000      	b.n	8008cfa <prvUnlockQueue+0x46>
					break;
 8008cf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	22ff      	movs	r2, #255	; 0xff
 8008cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008d02:	f001 fc87 	bl	800a614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d06:	f001 fc55 	bl	800a5b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d12:	e011      	b.n	8008d38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d012      	beq.n	8008d42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	3310      	adds	r3, #16
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 fd2b 	bl	800977c <xTaskRemoveFromEventList>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d2c:	f000 fe02 	bl	8009934 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	3b01      	subs	r3, #1
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	dce9      	bgt.n	8008d14 <prvUnlockQueue+0x60>
 8008d40:	e000      	b.n	8008d44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	22ff      	movs	r2, #255	; 0xff
 8008d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d4c:	f001 fc62 	bl	800a614 <vPortExitCritical>
}
 8008d50:	bf00      	nop
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d60:	f001 fc28 	bl	800a5b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	e001      	b.n	8008d76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d76:	f001 fc4d 	bl	800a614 <vPortExitCritical>

	return xReturn;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d8c:	f001 fc12 	bl	800a5b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d102      	bne.n	8008da2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	e001      	b.n	8008da6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008da2:	2300      	movs	r3, #0
 8008da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008da6:	f001 fc35 	bl	800a614 <vPortExitCritical>

	return xReturn;
 8008daa:	68fb      	ldr	r3, [r7, #12]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	60fb      	str	r3, [r7, #12]
 8008dc2:	e014      	b.n	8008dee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008dc4:	4a0f      	ldr	r2, [pc, #60]	; (8008e04 <vQueueAddToRegistry+0x50>)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10b      	bne.n	8008de8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008dd0:	490c      	ldr	r1, [pc, #48]	; (8008e04 <vQueueAddToRegistry+0x50>)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008dda:	4a0a      	ldr	r2, [pc, #40]	; (8008e04 <vQueueAddToRegistry+0x50>)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	4413      	add	r3, r2
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008de6:	e006      	b.n	8008df6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2b07      	cmp	r3, #7
 8008df2:	d9e7      	bls.n	8008dc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20000e70 	.word	0x20000e70

08008e08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e18:	f001 fbcc 	bl	800a5b4 <vPortEnterCritical>
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e22:	b25b      	sxtb	r3, r3
 8008e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e28:	d103      	bne.n	8008e32 <vQueueWaitForMessageRestricted+0x2a>
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e38:	b25b      	sxtb	r3, r3
 8008e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3e:	d103      	bne.n	8008e48 <vQueueWaitForMessageRestricted+0x40>
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e48:	f001 fbe4 	bl	800a614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d106      	bne.n	8008e62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	3324      	adds	r3, #36	; 0x24
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	68b9      	ldr	r1, [r7, #8]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 fc61 	bl	8009724 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e62:	6978      	ldr	r0, [r7, #20]
 8008e64:	f7ff ff26 	bl	8008cb4 <prvUnlockQueue>
	}
 8008e68:	bf00      	nop
 8008e6a:	3718      	adds	r7, #24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08e      	sub	sp, #56	; 0x38
 8008e74:	af04      	add	r7, sp, #16
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10a      	bne.n	8008e9a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	623b      	str	r3, [r7, #32]
}
 8008e96:	bf00      	nop
 8008e98:	e7fe      	b.n	8008e98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10a      	bne.n	8008eb6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	61fb      	str	r3, [r7, #28]
}
 8008eb2:	bf00      	nop
 8008eb4:	e7fe      	b.n	8008eb4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008eb6:	23a8      	movs	r3, #168	; 0xa8
 8008eb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	2ba8      	cmp	r3, #168	; 0xa8
 8008ebe:	d00a      	beq.n	8008ed6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	61bb      	str	r3, [r7, #24]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ed6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d01e      	beq.n	8008f1c <xTaskCreateStatic+0xac>
 8008ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01b      	beq.n	8008f1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9303      	str	r3, [sp, #12]
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	9302      	str	r3, [sp, #8]
 8008efe:	f107 0314 	add.w	r3, r7, #20
 8008f02:	9301      	str	r3, [sp, #4]
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	68b9      	ldr	r1, [r7, #8]
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 f850 	bl	8008fb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f16:	f000 f8f3 	bl	8009100 <prvAddNewTaskToReadyList>
 8008f1a:	e001      	b.n	8008f20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f20:	697b      	ldr	r3, [r7, #20]
	}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3728      	adds	r7, #40	; 0x28
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b08c      	sub	sp, #48	; 0x30
 8008f2e:	af04      	add	r7, sp, #16
 8008f30:	60f8      	str	r0, [r7, #12]
 8008f32:	60b9      	str	r1, [r7, #8]
 8008f34:	603b      	str	r3, [r7, #0]
 8008f36:	4613      	mov	r3, r2
 8008f38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f3a:	88fb      	ldrh	r3, [r7, #6]
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f001 fc5a 	bl	800a7f8 <pvPortMalloc>
 8008f44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00e      	beq.n	8008f6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f4c:	20a8      	movs	r0, #168	; 0xa8
 8008f4e:	f001 fc53 	bl	800a7f8 <pvPortMalloc>
 8008f52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8008f60:	e005      	b.n	8008f6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f62:	6978      	ldr	r0, [r7, #20]
 8008f64:	f001 fd14 	bl	800a990 <vPortFree>
 8008f68:	e001      	b.n	8008f6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d017      	beq.n	8008fa4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f7c:	88fa      	ldrh	r2, [r7, #6]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	9303      	str	r3, [sp, #12]
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	9302      	str	r3, [sp, #8]
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f88:	9301      	str	r3, [sp, #4]
 8008f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	68b9      	ldr	r1, [r7, #8]
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f000 f80e 	bl	8008fb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f98:	69f8      	ldr	r0, [r7, #28]
 8008f9a:	f000 f8b1 	bl	8009100 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	61bb      	str	r3, [r7, #24]
 8008fa2:	e002      	b.n	8008faa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008faa:	69bb      	ldr	r3, [r7, #24]
	}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3720      	adds	r7, #32
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
 8008fc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	461a      	mov	r2, r3
 8008fcc:	21a5      	movs	r1, #165	; 0xa5
 8008fce:	f001 fe1d 	bl	800ac0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	f003 0307 	and.w	r3, r3, #7
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00a      	beq.n	800900c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	617b      	str	r3, [r7, #20]
}
 8009008:	bf00      	nop
 800900a:	e7fe      	b.n	800900a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d01f      	beq.n	8009052 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009012:	2300      	movs	r3, #0
 8009014:	61fb      	str	r3, [r7, #28]
 8009016:	e012      	b.n	800903e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	4413      	add	r3, r2
 800901e:	7819      	ldrb	r1, [r3, #0]
 8009020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	4413      	add	r3, r2
 8009026:	3334      	adds	r3, #52	; 0x34
 8009028:	460a      	mov	r2, r1
 800902a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	4413      	add	r3, r2
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d006      	beq.n	8009046 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	3301      	adds	r3, #1
 800903c:	61fb      	str	r3, [r7, #28]
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2b0f      	cmp	r3, #15
 8009042:	d9e9      	bls.n	8009018 <prvInitialiseNewTask+0x64>
 8009044:	e000      	b.n	8009048 <prvInitialiseNewTask+0x94>
			{
				break;
 8009046:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009050:	e003      	b.n	800905a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800905a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905c:	2b37      	cmp	r3, #55	; 0x37
 800905e:	d901      	bls.n	8009064 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009060:	2337      	movs	r3, #55	; 0x37
 8009062:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009068:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800906e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	2200      	movs	r2, #0
 8009074:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009078:	3304      	adds	r3, #4
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff f978 	bl	8008370 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009082:	3318      	adds	r3, #24
 8009084:	4618      	mov	r0, r3
 8009086:	f7ff f973 	bl	8008370 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800908a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800908e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800909e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80090a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80090b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b2:	3354      	adds	r3, #84	; 0x54
 80090b4:	224c      	movs	r2, #76	; 0x4c
 80090b6:	2100      	movs	r1, #0
 80090b8:	4618      	mov	r0, r3
 80090ba:	f001 fda7 	bl	800ac0c <memset>
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	4a0c      	ldr	r2, [pc, #48]	; (80090f4 <prvInitialiseNewTask+0x140>)
 80090c2:	659a      	str	r2, [r3, #88]	; 0x58
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	4a0c      	ldr	r2, [pc, #48]	; (80090f8 <prvInitialiseNewTask+0x144>)
 80090c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	4a0b      	ldr	r2, [pc, #44]	; (80090fc <prvInitialiseNewTask+0x148>)
 80090ce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	68f9      	ldr	r1, [r7, #12]
 80090d4:	69b8      	ldr	r0, [r7, #24]
 80090d6:	f001 f941 	bl	800a35c <pxPortInitialiseStack>
 80090da:	4602      	mov	r2, r0
 80090dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090ec:	bf00      	nop
 80090ee:	3720      	adds	r7, #32
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	20005104 	.word	0x20005104
 80090f8:	2000516c 	.word	0x2000516c
 80090fc:	200051d4 	.word	0x200051d4

08009100 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009108:	f001 fa54 	bl	800a5b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800910c:	4b2d      	ldr	r3, [pc, #180]	; (80091c4 <prvAddNewTaskToReadyList+0xc4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3301      	adds	r3, #1
 8009112:	4a2c      	ldr	r2, [pc, #176]	; (80091c4 <prvAddNewTaskToReadyList+0xc4>)
 8009114:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009116:	4b2c      	ldr	r3, [pc, #176]	; (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d109      	bne.n	8009132 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800911e:	4a2a      	ldr	r2, [pc, #168]	; (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009124:	4b27      	ldr	r3, [pc, #156]	; (80091c4 <prvAddNewTaskToReadyList+0xc4>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d110      	bne.n	800914e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800912c:	f000 fc26 	bl	800997c <prvInitialiseTaskLists>
 8009130:	e00d      	b.n	800914e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009132:	4b26      	ldr	r3, [pc, #152]	; (80091cc <prvAddNewTaskToReadyList+0xcc>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d109      	bne.n	800914e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800913a:	4b23      	ldr	r3, [pc, #140]	; (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	429a      	cmp	r2, r3
 8009146:	d802      	bhi.n	800914e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009148:	4a1f      	ldr	r2, [pc, #124]	; (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800914e:	4b20      	ldr	r3, [pc, #128]	; (80091d0 <prvAddNewTaskToReadyList+0xd0>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3301      	adds	r3, #1
 8009154:	4a1e      	ldr	r2, [pc, #120]	; (80091d0 <prvAddNewTaskToReadyList+0xd0>)
 8009156:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009158:	4b1d      	ldr	r3, [pc, #116]	; (80091d0 <prvAddNewTaskToReadyList+0xd0>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009164:	4b1b      	ldr	r3, [pc, #108]	; (80091d4 <prvAddNewTaskToReadyList+0xd4>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	429a      	cmp	r2, r3
 800916a:	d903      	bls.n	8009174 <prvAddNewTaskToReadyList+0x74>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009170:	4a18      	ldr	r2, [pc, #96]	; (80091d4 <prvAddNewTaskToReadyList+0xd4>)
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4a15      	ldr	r2, [pc, #84]	; (80091d8 <prvAddNewTaskToReadyList+0xd8>)
 8009182:	441a      	add	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	3304      	adds	r3, #4
 8009188:	4619      	mov	r1, r3
 800918a:	4610      	mov	r0, r2
 800918c:	f7ff f8fd 	bl	800838a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009190:	f001 fa40 	bl	800a614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009194:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <prvAddNewTaskToReadyList+0xcc>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00e      	beq.n	80091ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800919c:	4b0a      	ldr	r3, [pc, #40]	; (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d207      	bcs.n	80091ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091aa:	4b0c      	ldr	r3, [pc, #48]	; (80091dc <prvAddNewTaskToReadyList+0xdc>)
 80091ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ba:	bf00      	nop
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20001384 	.word	0x20001384
 80091c8:	20000eb0 	.word	0x20000eb0
 80091cc:	20001390 	.word	0x20001390
 80091d0:	200013a0 	.word	0x200013a0
 80091d4:	2000138c 	.word	0x2000138c
 80091d8:	20000eb4 	.word	0x20000eb4
 80091dc:	e000ed04 	.word	0xe000ed04

080091e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d017      	beq.n	8009222 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091f2:	4b13      	ldr	r3, [pc, #76]	; (8009240 <vTaskDelay+0x60>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00a      	beq.n	8009210 <vTaskDelay+0x30>
	__asm volatile
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	60bb      	str	r3, [r7, #8]
}
 800920c:	bf00      	nop
 800920e:	e7fe      	b.n	800920e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009210:	f000 f88a 	bl	8009328 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009214:	2100      	movs	r1, #0
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fcfe 	bl	8009c18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800921c:	f000 f892 	bl	8009344 <xTaskResumeAll>
 8009220:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d107      	bne.n	8009238 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009228:	4b06      	ldr	r3, [pc, #24]	; (8009244 <vTaskDelay+0x64>)
 800922a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800922e:	601a      	str	r2, [r3, #0]
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009238:	bf00      	nop
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	200013ac 	.word	0x200013ac
 8009244:	e000ed04 	.word	0xe000ed04

08009248 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08a      	sub	sp, #40	; 0x28
 800924c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009256:	463a      	mov	r2, r7
 8009258:	1d39      	adds	r1, r7, #4
 800925a:	f107 0308 	add.w	r3, r7, #8
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff f832 	bl	80082c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	9202      	str	r2, [sp, #8]
 800926c:	9301      	str	r3, [sp, #4]
 800926e:	2300      	movs	r3, #0
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	2300      	movs	r3, #0
 8009274:	460a      	mov	r2, r1
 8009276:	4924      	ldr	r1, [pc, #144]	; (8009308 <vTaskStartScheduler+0xc0>)
 8009278:	4824      	ldr	r0, [pc, #144]	; (800930c <vTaskStartScheduler+0xc4>)
 800927a:	f7ff fdf9 	bl	8008e70 <xTaskCreateStatic>
 800927e:	4603      	mov	r3, r0
 8009280:	4a23      	ldr	r2, [pc, #140]	; (8009310 <vTaskStartScheduler+0xc8>)
 8009282:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009284:	4b22      	ldr	r3, [pc, #136]	; (8009310 <vTaskStartScheduler+0xc8>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800928c:	2301      	movs	r3, #1
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	e001      	b.n	8009296 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009292:	2300      	movs	r3, #0
 8009294:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d102      	bne.n	80092a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800929c:	f000 fd10 	bl	8009cc0 <xTimerCreateTimerTask>
 80092a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d11b      	bne.n	80092e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	613b      	str	r3, [r7, #16]
}
 80092ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092bc:	4b15      	ldr	r3, [pc, #84]	; (8009314 <vTaskStartScheduler+0xcc>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3354      	adds	r3, #84	; 0x54
 80092c2:	4a15      	ldr	r2, [pc, #84]	; (8009318 <vTaskStartScheduler+0xd0>)
 80092c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80092c6:	4b15      	ldr	r3, [pc, #84]	; (800931c <vTaskStartScheduler+0xd4>)
 80092c8:	f04f 32ff 	mov.w	r2, #4294967295
 80092cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092ce:	4b14      	ldr	r3, [pc, #80]	; (8009320 <vTaskStartScheduler+0xd8>)
 80092d0:	2201      	movs	r2, #1
 80092d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092d4:	4b13      	ldr	r3, [pc, #76]	; (8009324 <vTaskStartScheduler+0xdc>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092da:	f001 f8c9 	bl	800a470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092de:	e00e      	b.n	80092fe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e6:	d10a      	bne.n	80092fe <vTaskStartScheduler+0xb6>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	60fb      	str	r3, [r7, #12]
}
 80092fa:	bf00      	nop
 80092fc:	e7fe      	b.n	80092fc <vTaskStartScheduler+0xb4>
}
 80092fe:	bf00      	nop
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	0800b690 	.word	0x0800b690
 800930c:	0800994d 	.word	0x0800994d
 8009310:	200013a8 	.word	0x200013a8
 8009314:	20000eb0 	.word	0x20000eb0
 8009318:	20000060 	.word	0x20000060
 800931c:	200013a4 	.word	0x200013a4
 8009320:	20001390 	.word	0x20001390
 8009324:	20001388 	.word	0x20001388

08009328 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009328:	b480      	push	{r7}
 800932a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800932c:	4b04      	ldr	r3, [pc, #16]	; (8009340 <vTaskSuspendAll+0x18>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3301      	adds	r3, #1
 8009332:	4a03      	ldr	r2, [pc, #12]	; (8009340 <vTaskSuspendAll+0x18>)
 8009334:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009336:	bf00      	nop
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	200013ac 	.word	0x200013ac

08009344 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800934a:	2300      	movs	r3, #0
 800934c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800934e:	2300      	movs	r3, #0
 8009350:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009352:	4b42      	ldr	r3, [pc, #264]	; (800945c <xTaskResumeAll+0x118>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10a      	bne.n	8009370 <xTaskResumeAll+0x2c>
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	603b      	str	r3, [r7, #0]
}
 800936c:	bf00      	nop
 800936e:	e7fe      	b.n	800936e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009370:	f001 f920 	bl	800a5b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009374:	4b39      	ldr	r3, [pc, #228]	; (800945c <xTaskResumeAll+0x118>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3b01      	subs	r3, #1
 800937a:	4a38      	ldr	r2, [pc, #224]	; (800945c <xTaskResumeAll+0x118>)
 800937c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800937e:	4b37      	ldr	r3, [pc, #220]	; (800945c <xTaskResumeAll+0x118>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d162      	bne.n	800944c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009386:	4b36      	ldr	r3, [pc, #216]	; (8009460 <xTaskResumeAll+0x11c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d05e      	beq.n	800944c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800938e:	e02f      	b.n	80093f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009390:	4b34      	ldr	r3, [pc, #208]	; (8009464 <xTaskResumeAll+0x120>)
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3318      	adds	r3, #24
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff f851 	bl	8008444 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff f84c 	bl	8008444 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b0:	4b2d      	ldr	r3, [pc, #180]	; (8009468 <xTaskResumeAll+0x124>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d903      	bls.n	80093c0 <xTaskResumeAll+0x7c>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093bc:	4a2a      	ldr	r2, [pc, #168]	; (8009468 <xTaskResumeAll+0x124>)
 80093be:	6013      	str	r3, [r2, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c4:	4613      	mov	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4a27      	ldr	r2, [pc, #156]	; (800946c <xTaskResumeAll+0x128>)
 80093ce:	441a      	add	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3304      	adds	r3, #4
 80093d4:	4619      	mov	r1, r3
 80093d6:	4610      	mov	r0, r2
 80093d8:	f7fe ffd7 	bl	800838a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e0:	4b23      	ldr	r3, [pc, #140]	; (8009470 <xTaskResumeAll+0x12c>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d302      	bcc.n	80093f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80093ea:	4b22      	ldr	r3, [pc, #136]	; (8009474 <xTaskResumeAll+0x130>)
 80093ec:	2201      	movs	r2, #1
 80093ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093f0:	4b1c      	ldr	r3, [pc, #112]	; (8009464 <xTaskResumeAll+0x120>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1cb      	bne.n	8009390 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093fe:	f000 fb5f 	bl	8009ac0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009402:	4b1d      	ldr	r3, [pc, #116]	; (8009478 <xTaskResumeAll+0x134>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d010      	beq.n	8009430 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800940e:	f000 f847 	bl	80094a0 <xTaskIncrementTick>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009418:	4b16      	ldr	r3, [pc, #88]	; (8009474 <xTaskResumeAll+0x130>)
 800941a:	2201      	movs	r2, #1
 800941c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	3b01      	subs	r3, #1
 8009422:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1f1      	bne.n	800940e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800942a:	4b13      	ldr	r3, [pc, #76]	; (8009478 <xTaskResumeAll+0x134>)
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009430:	4b10      	ldr	r3, [pc, #64]	; (8009474 <xTaskResumeAll+0x130>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d009      	beq.n	800944c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009438:	2301      	movs	r3, #1
 800943a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800943c:	4b0f      	ldr	r3, [pc, #60]	; (800947c <xTaskResumeAll+0x138>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800944c:	f001 f8e2 	bl	800a614 <vPortExitCritical>

	return xAlreadyYielded;
 8009450:	68bb      	ldr	r3, [r7, #8]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	200013ac 	.word	0x200013ac
 8009460:	20001384 	.word	0x20001384
 8009464:	20001344 	.word	0x20001344
 8009468:	2000138c 	.word	0x2000138c
 800946c:	20000eb4 	.word	0x20000eb4
 8009470:	20000eb0 	.word	0x20000eb0
 8009474:	20001398 	.word	0x20001398
 8009478:	20001394 	.word	0x20001394
 800947c:	e000ed04 	.word	0xe000ed04

08009480 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009486:	4b05      	ldr	r3, [pc, #20]	; (800949c <xTaskGetTickCount+0x1c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800948c:	687b      	ldr	r3, [r7, #4]
}
 800948e:	4618      	mov	r0, r3
 8009490:	370c      	adds	r7, #12
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	20001388 	.word	0x20001388

080094a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094a6:	2300      	movs	r3, #0
 80094a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094aa:	4b4f      	ldr	r3, [pc, #316]	; (80095e8 <xTaskIncrementTick+0x148>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f040 808f 	bne.w	80095d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094b4:	4b4d      	ldr	r3, [pc, #308]	; (80095ec <xTaskIncrementTick+0x14c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3301      	adds	r3, #1
 80094ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094bc:	4a4b      	ldr	r2, [pc, #300]	; (80095ec <xTaskIncrementTick+0x14c>)
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d120      	bne.n	800950a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80094c8:	4b49      	ldr	r3, [pc, #292]	; (80095f0 <xTaskIncrementTick+0x150>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00a      	beq.n	80094e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	603b      	str	r3, [r7, #0]
}
 80094e4:	bf00      	nop
 80094e6:	e7fe      	b.n	80094e6 <xTaskIncrementTick+0x46>
 80094e8:	4b41      	ldr	r3, [pc, #260]	; (80095f0 <xTaskIncrementTick+0x150>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60fb      	str	r3, [r7, #12]
 80094ee:	4b41      	ldr	r3, [pc, #260]	; (80095f4 <xTaskIncrementTick+0x154>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a3f      	ldr	r2, [pc, #252]	; (80095f0 <xTaskIncrementTick+0x150>)
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	4a3f      	ldr	r2, [pc, #252]	; (80095f4 <xTaskIncrementTick+0x154>)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	4b3e      	ldr	r3, [pc, #248]	; (80095f8 <xTaskIncrementTick+0x158>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3301      	adds	r3, #1
 8009502:	4a3d      	ldr	r2, [pc, #244]	; (80095f8 <xTaskIncrementTick+0x158>)
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	f000 fadb 	bl	8009ac0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800950a:	4b3c      	ldr	r3, [pc, #240]	; (80095fc <xTaskIncrementTick+0x15c>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	429a      	cmp	r2, r3
 8009512:	d349      	bcc.n	80095a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009514:	4b36      	ldr	r3, [pc, #216]	; (80095f0 <xTaskIncrementTick+0x150>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d104      	bne.n	8009528 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800951e:	4b37      	ldr	r3, [pc, #220]	; (80095fc <xTaskIncrementTick+0x15c>)
 8009520:	f04f 32ff 	mov.w	r2, #4294967295
 8009524:	601a      	str	r2, [r3, #0]
					break;
 8009526:	e03f      	b.n	80095a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009528:	4b31      	ldr	r3, [pc, #196]	; (80095f0 <xTaskIncrementTick+0x150>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	429a      	cmp	r2, r3
 800953e:	d203      	bcs.n	8009548 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009540:	4a2e      	ldr	r2, [pc, #184]	; (80095fc <xTaskIncrementTick+0x15c>)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009546:	e02f      	b.n	80095a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	3304      	adds	r3, #4
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe ff79 	bl	8008444 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009556:	2b00      	cmp	r3, #0
 8009558:	d004      	beq.n	8009564 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	3318      	adds	r3, #24
 800955e:	4618      	mov	r0, r3
 8009560:	f7fe ff70 	bl	8008444 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009568:	4b25      	ldr	r3, [pc, #148]	; (8009600 <xTaskIncrementTick+0x160>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d903      	bls.n	8009578 <xTaskIncrementTick+0xd8>
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009574:	4a22      	ldr	r2, [pc, #136]	; (8009600 <xTaskIncrementTick+0x160>)
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800957c:	4613      	mov	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4a1f      	ldr	r2, [pc, #124]	; (8009604 <xTaskIncrementTick+0x164>)
 8009586:	441a      	add	r2, r3
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	3304      	adds	r3, #4
 800958c:	4619      	mov	r1, r3
 800958e:	4610      	mov	r0, r2
 8009590:	f7fe fefb 	bl	800838a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009598:	4b1b      	ldr	r3, [pc, #108]	; (8009608 <xTaskIncrementTick+0x168>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959e:	429a      	cmp	r2, r3
 80095a0:	d3b8      	bcc.n	8009514 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80095a2:	2301      	movs	r3, #1
 80095a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095a6:	e7b5      	b.n	8009514 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095a8:	4b17      	ldr	r3, [pc, #92]	; (8009608 <xTaskIncrementTick+0x168>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ae:	4915      	ldr	r1, [pc, #84]	; (8009604 <xTaskIncrementTick+0x164>)
 80095b0:	4613      	mov	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	440b      	add	r3, r1
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d901      	bls.n	80095c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80095c0:	2301      	movs	r3, #1
 80095c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80095c4:	4b11      	ldr	r3, [pc, #68]	; (800960c <xTaskIncrementTick+0x16c>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d007      	beq.n	80095dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80095cc:	2301      	movs	r3, #1
 80095ce:	617b      	str	r3, [r7, #20]
 80095d0:	e004      	b.n	80095dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80095d2:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <xTaskIncrementTick+0x170>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3301      	adds	r3, #1
 80095d8:	4a0d      	ldr	r2, [pc, #52]	; (8009610 <xTaskIncrementTick+0x170>)
 80095da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095dc:	697b      	ldr	r3, [r7, #20]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	200013ac 	.word	0x200013ac
 80095ec:	20001388 	.word	0x20001388
 80095f0:	2000133c 	.word	0x2000133c
 80095f4:	20001340 	.word	0x20001340
 80095f8:	2000139c 	.word	0x2000139c
 80095fc:	200013a4 	.word	0x200013a4
 8009600:	2000138c 	.word	0x2000138c
 8009604:	20000eb4 	.word	0x20000eb4
 8009608:	20000eb0 	.word	0x20000eb0
 800960c:	20001398 	.word	0x20001398
 8009610:	20001394 	.word	0x20001394

08009614 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800961a:	4b2a      	ldr	r3, [pc, #168]	; (80096c4 <vTaskSwitchContext+0xb0>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d003      	beq.n	800962a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009622:	4b29      	ldr	r3, [pc, #164]	; (80096c8 <vTaskSwitchContext+0xb4>)
 8009624:	2201      	movs	r2, #1
 8009626:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009628:	e046      	b.n	80096b8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800962a:	4b27      	ldr	r3, [pc, #156]	; (80096c8 <vTaskSwitchContext+0xb4>)
 800962c:	2200      	movs	r2, #0
 800962e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009630:	4b26      	ldr	r3, [pc, #152]	; (80096cc <vTaskSwitchContext+0xb8>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	e010      	b.n	800965a <vTaskSwitchContext+0x46>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <vTaskSwitchContext+0x40>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	607b      	str	r3, [r7, #4]
}
 8009650:	bf00      	nop
 8009652:	e7fe      	b.n	8009652 <vTaskSwitchContext+0x3e>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	3b01      	subs	r3, #1
 8009658:	60fb      	str	r3, [r7, #12]
 800965a:	491d      	ldr	r1, [pc, #116]	; (80096d0 <vTaskSwitchContext+0xbc>)
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	4613      	mov	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4413      	add	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	440b      	add	r3, r1
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0e4      	beq.n	8009638 <vTaskSwitchContext+0x24>
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	4613      	mov	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4a15      	ldr	r2, [pc, #84]	; (80096d0 <vTaskSwitchContext+0xbc>)
 800967a:	4413      	add	r3, r2
 800967c:	60bb      	str	r3, [r7, #8]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	605a      	str	r2, [r3, #4]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	3308      	adds	r3, #8
 8009690:	429a      	cmp	r2, r3
 8009692:	d104      	bne.n	800969e <vTaskSwitchContext+0x8a>
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	685a      	ldr	r2, [r3, #4]
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	605a      	str	r2, [r3, #4]
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	4a0b      	ldr	r2, [pc, #44]	; (80096d4 <vTaskSwitchContext+0xc0>)
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	4a08      	ldr	r2, [pc, #32]	; (80096cc <vTaskSwitchContext+0xb8>)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096ae:	4b09      	ldr	r3, [pc, #36]	; (80096d4 <vTaskSwitchContext+0xc0>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3354      	adds	r3, #84	; 0x54
 80096b4:	4a08      	ldr	r2, [pc, #32]	; (80096d8 <vTaskSwitchContext+0xc4>)
 80096b6:	6013      	str	r3, [r2, #0]
}
 80096b8:	bf00      	nop
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	200013ac 	.word	0x200013ac
 80096c8:	20001398 	.word	0x20001398
 80096cc:	2000138c 	.word	0x2000138c
 80096d0:	20000eb4 	.word	0x20000eb4
 80096d4:	20000eb0 	.word	0x20000eb0
 80096d8:	20000060 	.word	0x20000060

080096dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10a      	bne.n	8009702 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	60fb      	str	r3, [r7, #12]
}
 80096fe:	bf00      	nop
 8009700:	e7fe      	b.n	8009700 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009702:	4b07      	ldr	r3, [pc, #28]	; (8009720 <vTaskPlaceOnEventList+0x44>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3318      	adds	r3, #24
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7fe fe61 	bl	80083d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009710:	2101      	movs	r1, #1
 8009712:	6838      	ldr	r0, [r7, #0]
 8009714:	f000 fa80 	bl	8009c18 <prvAddCurrentTaskToDelayedList>
}
 8009718:	bf00      	nop
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	20000eb0 	.word	0x20000eb0

08009724 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10a      	bne.n	800974c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	617b      	str	r3, [r7, #20]
}
 8009748:	bf00      	nop
 800974a:	e7fe      	b.n	800974a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800974c:	4b0a      	ldr	r3, [pc, #40]	; (8009778 <vTaskPlaceOnEventListRestricted+0x54>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3318      	adds	r3, #24
 8009752:	4619      	mov	r1, r3
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f7fe fe18 	bl	800838a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009760:	f04f 33ff 	mov.w	r3, #4294967295
 8009764:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009766:	6879      	ldr	r1, [r7, #4]
 8009768:	68b8      	ldr	r0, [r7, #8]
 800976a:	f000 fa55 	bl	8009c18 <prvAddCurrentTaskToDelayedList>
	}
 800976e:	bf00      	nop
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20000eb0 	.word	0x20000eb0

0800977c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10a      	bne.n	80097a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	60fb      	str	r3, [r7, #12]
}
 80097a4:	bf00      	nop
 80097a6:	e7fe      	b.n	80097a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	3318      	adds	r3, #24
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fe fe49 	bl	8008444 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097b2:	4b1e      	ldr	r3, [pc, #120]	; (800982c <xTaskRemoveFromEventList+0xb0>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d11d      	bne.n	80097f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	3304      	adds	r3, #4
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fe fe40 	bl	8008444 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c8:	4b19      	ldr	r3, [pc, #100]	; (8009830 <xTaskRemoveFromEventList+0xb4>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d903      	bls.n	80097d8 <xTaskRemoveFromEventList+0x5c>
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d4:	4a16      	ldr	r2, [pc, #88]	; (8009830 <xTaskRemoveFromEventList+0xb4>)
 80097d6:	6013      	str	r3, [r2, #0]
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097dc:	4613      	mov	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4a13      	ldr	r2, [pc, #76]	; (8009834 <xTaskRemoveFromEventList+0xb8>)
 80097e6:	441a      	add	r2, r3
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	3304      	adds	r3, #4
 80097ec:	4619      	mov	r1, r3
 80097ee:	4610      	mov	r0, r2
 80097f0:	f7fe fdcb 	bl	800838a <vListInsertEnd>
 80097f4:	e005      	b.n	8009802 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	3318      	adds	r3, #24
 80097fa:	4619      	mov	r1, r3
 80097fc:	480e      	ldr	r0, [pc, #56]	; (8009838 <xTaskRemoveFromEventList+0xbc>)
 80097fe:	f7fe fdc4 	bl	800838a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009806:	4b0d      	ldr	r3, [pc, #52]	; (800983c <xTaskRemoveFromEventList+0xc0>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980c:	429a      	cmp	r2, r3
 800980e:	d905      	bls.n	800981c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009810:	2301      	movs	r3, #1
 8009812:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009814:	4b0a      	ldr	r3, [pc, #40]	; (8009840 <xTaskRemoveFromEventList+0xc4>)
 8009816:	2201      	movs	r2, #1
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	e001      	b.n	8009820 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800981c:	2300      	movs	r3, #0
 800981e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009820:	697b      	ldr	r3, [r7, #20]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	200013ac 	.word	0x200013ac
 8009830:	2000138c 	.word	0x2000138c
 8009834:	20000eb4 	.word	0x20000eb4
 8009838:	20001344 	.word	0x20001344
 800983c:	20000eb0 	.word	0x20000eb0
 8009840:	20001398 	.word	0x20001398

08009844 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800984c:	4b06      	ldr	r3, [pc, #24]	; (8009868 <vTaskInternalSetTimeOutState+0x24>)
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <vTaskInternalSetTimeOutState+0x28>)
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	605a      	str	r2, [r3, #4]
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	2000139c 	.word	0x2000139c
 800986c:	20001388 	.word	0x20001388

08009870 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b088      	sub	sp, #32
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10a      	bne.n	8009896 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	613b      	str	r3, [r7, #16]
}
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10a      	bne.n	80098b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800989c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a0:	f383 8811 	msr	BASEPRI, r3
 80098a4:	f3bf 8f6f 	isb	sy
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	60fb      	str	r3, [r7, #12]
}
 80098ae:	bf00      	nop
 80098b0:	e7fe      	b.n	80098b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80098b2:	f000 fe7f 	bl	800a5b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80098b6:	4b1d      	ldr	r3, [pc, #116]	; (800992c <xTaskCheckForTimeOut+0xbc>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	69ba      	ldr	r2, [r7, #24]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ce:	d102      	bne.n	80098d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098d0:	2300      	movs	r3, #0
 80098d2:	61fb      	str	r3, [r7, #28]
 80098d4:	e023      	b.n	800991e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	4b15      	ldr	r3, [pc, #84]	; (8009930 <xTaskCheckForTimeOut+0xc0>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d007      	beq.n	80098f2 <xTaskCheckForTimeOut+0x82>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	69ba      	ldr	r2, [r7, #24]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d302      	bcc.n	80098f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098ec:	2301      	movs	r3, #1
 80098ee:	61fb      	str	r3, [r7, #28]
 80098f0:	e015      	b.n	800991e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d20b      	bcs.n	8009914 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	1ad2      	subs	r2, r2, r3
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7ff ff9b 	bl	8009844 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800990e:	2300      	movs	r3, #0
 8009910:	61fb      	str	r3, [r7, #28]
 8009912:	e004      	b.n	800991e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2200      	movs	r2, #0
 8009918:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800991a:	2301      	movs	r3, #1
 800991c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800991e:	f000 fe79 	bl	800a614 <vPortExitCritical>

	return xReturn;
 8009922:	69fb      	ldr	r3, [r7, #28]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3720      	adds	r7, #32
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	20001388 	.word	0x20001388
 8009930:	2000139c 	.word	0x2000139c

08009934 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009934:	b480      	push	{r7}
 8009936:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009938:	4b03      	ldr	r3, [pc, #12]	; (8009948 <vTaskMissedYield+0x14>)
 800993a:	2201      	movs	r2, #1
 800993c:	601a      	str	r2, [r3, #0]
}
 800993e:	bf00      	nop
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	20001398 	.word	0x20001398

0800994c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009954:	f000 f852 	bl	80099fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009958:	4b06      	ldr	r3, [pc, #24]	; (8009974 <prvIdleTask+0x28>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d9f9      	bls.n	8009954 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009960:	4b05      	ldr	r3, [pc, #20]	; (8009978 <prvIdleTask+0x2c>)
 8009962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009966:	601a      	str	r2, [r3, #0]
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009970:	e7f0      	b.n	8009954 <prvIdleTask+0x8>
 8009972:	bf00      	nop
 8009974:	20000eb4 	.word	0x20000eb4
 8009978:	e000ed04 	.word	0xe000ed04

0800997c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009982:	2300      	movs	r3, #0
 8009984:	607b      	str	r3, [r7, #4]
 8009986:	e00c      	b.n	80099a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	4613      	mov	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4a12      	ldr	r2, [pc, #72]	; (80099dc <prvInitialiseTaskLists+0x60>)
 8009994:	4413      	add	r3, r2
 8009996:	4618      	mov	r0, r3
 8009998:	f7fe fcca 	bl	8008330 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	3301      	adds	r3, #1
 80099a0:	607b      	str	r3, [r7, #4]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b37      	cmp	r3, #55	; 0x37
 80099a6:	d9ef      	bls.n	8009988 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099a8:	480d      	ldr	r0, [pc, #52]	; (80099e0 <prvInitialiseTaskLists+0x64>)
 80099aa:	f7fe fcc1 	bl	8008330 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099ae:	480d      	ldr	r0, [pc, #52]	; (80099e4 <prvInitialiseTaskLists+0x68>)
 80099b0:	f7fe fcbe 	bl	8008330 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099b4:	480c      	ldr	r0, [pc, #48]	; (80099e8 <prvInitialiseTaskLists+0x6c>)
 80099b6:	f7fe fcbb 	bl	8008330 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099ba:	480c      	ldr	r0, [pc, #48]	; (80099ec <prvInitialiseTaskLists+0x70>)
 80099bc:	f7fe fcb8 	bl	8008330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80099c0:	480b      	ldr	r0, [pc, #44]	; (80099f0 <prvInitialiseTaskLists+0x74>)
 80099c2:	f7fe fcb5 	bl	8008330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80099c6:	4b0b      	ldr	r3, [pc, #44]	; (80099f4 <prvInitialiseTaskLists+0x78>)
 80099c8:	4a05      	ldr	r2, [pc, #20]	; (80099e0 <prvInitialiseTaskLists+0x64>)
 80099ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099cc:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <prvInitialiseTaskLists+0x7c>)
 80099ce:	4a05      	ldr	r2, [pc, #20]	; (80099e4 <prvInitialiseTaskLists+0x68>)
 80099d0:	601a      	str	r2, [r3, #0]
}
 80099d2:	bf00      	nop
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	20000eb4 	.word	0x20000eb4
 80099e0:	20001314 	.word	0x20001314
 80099e4:	20001328 	.word	0x20001328
 80099e8:	20001344 	.word	0x20001344
 80099ec:	20001358 	.word	0x20001358
 80099f0:	20001370 	.word	0x20001370
 80099f4:	2000133c 	.word	0x2000133c
 80099f8:	20001340 	.word	0x20001340

080099fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a02:	e019      	b.n	8009a38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a04:	f000 fdd6 	bl	800a5b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a08:	4b10      	ldr	r3, [pc, #64]	; (8009a4c <prvCheckTasksWaitingTermination+0x50>)
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	3304      	adds	r3, #4
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fe fd15 	bl	8008444 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a1a:	4b0d      	ldr	r3, [pc, #52]	; (8009a50 <prvCheckTasksWaitingTermination+0x54>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	4a0b      	ldr	r2, [pc, #44]	; (8009a50 <prvCheckTasksWaitingTermination+0x54>)
 8009a22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a24:	4b0b      	ldr	r3, [pc, #44]	; (8009a54 <prvCheckTasksWaitingTermination+0x58>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	4a0a      	ldr	r2, [pc, #40]	; (8009a54 <prvCheckTasksWaitingTermination+0x58>)
 8009a2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a2e:	f000 fdf1 	bl	800a614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f810 	bl	8009a58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a38:	4b06      	ldr	r3, [pc, #24]	; (8009a54 <prvCheckTasksWaitingTermination+0x58>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e1      	bne.n	8009a04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20001358 	.word	0x20001358
 8009a50:	20001384 	.word	0x20001384
 8009a54:	2000136c 	.word	0x2000136c

08009a58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	3354      	adds	r3, #84	; 0x54
 8009a64:	4618      	mov	r0, r3
 8009a66:	f001 f8d9 	bl	800ac1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d108      	bne.n	8009a86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 ff89 	bl	800a990 <vPortFree>
				vPortFree( pxTCB );
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 ff86 	bl	800a990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a84:	e018      	b.n	8009ab8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d103      	bne.n	8009a98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 ff7d 	bl	800a990 <vPortFree>
	}
 8009a96:	e00f      	b.n	8009ab8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d00a      	beq.n	8009ab8 <prvDeleteTCB+0x60>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	60fb      	str	r3, [r7, #12]
}
 8009ab4:	bf00      	nop
 8009ab6:	e7fe      	b.n	8009ab6 <prvDeleteTCB+0x5e>
	}
 8009ab8:	bf00      	nop
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ac6:	4b0c      	ldr	r3, [pc, #48]	; (8009af8 <prvResetNextTaskUnblockTime+0x38>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d104      	bne.n	8009ada <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ad0:	4b0a      	ldr	r3, [pc, #40]	; (8009afc <prvResetNextTaskUnblockTime+0x3c>)
 8009ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ad8:	e008      	b.n	8009aec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ada:	4b07      	ldr	r3, [pc, #28]	; (8009af8 <prvResetNextTaskUnblockTime+0x38>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	4a04      	ldr	r2, [pc, #16]	; (8009afc <prvResetNextTaskUnblockTime+0x3c>)
 8009aea:	6013      	str	r3, [r2, #0]
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	2000133c 	.word	0x2000133c
 8009afc:	200013a4 	.word	0x200013a4

08009b00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b06:	4b0b      	ldr	r3, [pc, #44]	; (8009b34 <xTaskGetSchedulerState+0x34>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d102      	bne.n	8009b14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	607b      	str	r3, [r7, #4]
 8009b12:	e008      	b.n	8009b26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b14:	4b08      	ldr	r3, [pc, #32]	; (8009b38 <xTaskGetSchedulerState+0x38>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d102      	bne.n	8009b22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	607b      	str	r3, [r7, #4]
 8009b20:	e001      	b.n	8009b26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b22:	2300      	movs	r3, #0
 8009b24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b26:	687b      	ldr	r3, [r7, #4]
	}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	20001390 	.word	0x20001390
 8009b38:	200013ac 	.word	0x200013ac

08009b3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d056      	beq.n	8009c00 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b52:	4b2e      	ldr	r3, [pc, #184]	; (8009c0c <xTaskPriorityDisinherit+0xd0>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d00a      	beq.n	8009b72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	60fb      	str	r3, [r7, #12]
}
 8009b6e:	bf00      	nop
 8009b70:	e7fe      	b.n	8009b70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10a      	bne.n	8009b90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	60bb      	str	r3, [r7, #8]
}
 8009b8c:	bf00      	nop
 8009b8e:	e7fe      	b.n	8009b8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b94:	1e5a      	subs	r2, r3, #1
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d02c      	beq.n	8009c00 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d128      	bne.n	8009c00 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fe fc46 	bl	8008444 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd0:	4b0f      	ldr	r3, [pc, #60]	; (8009c10 <xTaskPriorityDisinherit+0xd4>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d903      	bls.n	8009be0 <xTaskPriorityDisinherit+0xa4>
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bdc:	4a0c      	ldr	r2, [pc, #48]	; (8009c10 <xTaskPriorityDisinherit+0xd4>)
 8009bde:	6013      	str	r3, [r2, #0]
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be4:	4613      	mov	r3, r2
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4a09      	ldr	r2, [pc, #36]	; (8009c14 <xTaskPriorityDisinherit+0xd8>)
 8009bee:	441a      	add	r2, r3
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	f7fe fbc7 	bl	800838a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c00:	697b      	ldr	r3, [r7, #20]
	}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20000eb0 	.word	0x20000eb0
 8009c10:	2000138c 	.word	0x2000138c
 8009c14:	20000eb4 	.word	0x20000eb4

08009c18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c22:	4b21      	ldr	r3, [pc, #132]	; (8009ca8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c28:	4b20      	ldr	r3, [pc, #128]	; (8009cac <prvAddCurrentTaskToDelayedList+0x94>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fe fc08 	bl	8008444 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3a:	d10a      	bne.n	8009c52 <prvAddCurrentTaskToDelayedList+0x3a>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d007      	beq.n	8009c52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c42:	4b1a      	ldr	r3, [pc, #104]	; (8009cac <prvAddCurrentTaskToDelayedList+0x94>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3304      	adds	r3, #4
 8009c48:	4619      	mov	r1, r3
 8009c4a:	4819      	ldr	r0, [pc, #100]	; (8009cb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009c4c:	f7fe fb9d 	bl	800838a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c50:	e026      	b.n	8009ca0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4413      	add	r3, r2
 8009c58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c5a:	4b14      	ldr	r3, [pc, #80]	; (8009cac <prvAddCurrentTaskToDelayedList+0x94>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d209      	bcs.n	8009c7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c6a:	4b12      	ldr	r3, [pc, #72]	; (8009cb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <prvAddCurrentTaskToDelayedList+0x94>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3304      	adds	r3, #4
 8009c74:	4619      	mov	r1, r3
 8009c76:	4610      	mov	r0, r2
 8009c78:	f7fe fbab 	bl	80083d2 <vListInsert>
}
 8009c7c:	e010      	b.n	8009ca0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c7e:	4b0e      	ldr	r3, [pc, #56]	; (8009cb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	4b0a      	ldr	r3, [pc, #40]	; (8009cac <prvAddCurrentTaskToDelayedList+0x94>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	3304      	adds	r3, #4
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	f7fe fba1 	bl	80083d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c90:	4b0a      	ldr	r3, [pc, #40]	; (8009cbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d202      	bcs.n	8009ca0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c9a:	4a08      	ldr	r2, [pc, #32]	; (8009cbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	6013      	str	r3, [r2, #0]
}
 8009ca0:	bf00      	nop
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	20001388 	.word	0x20001388
 8009cac:	20000eb0 	.word	0x20000eb0
 8009cb0:	20001370 	.word	0x20001370
 8009cb4:	20001340 	.word	0x20001340
 8009cb8:	2000133c 	.word	0x2000133c
 8009cbc:	200013a4 	.word	0x200013a4

08009cc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b08a      	sub	sp, #40	; 0x28
 8009cc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009cca:	f000 fb07 	bl	800a2dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009cce:	4b1c      	ldr	r3, [pc, #112]	; (8009d40 <xTimerCreateTimerTask+0x80>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d021      	beq.n	8009d1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009cde:	1d3a      	adds	r2, r7, #4
 8009ce0:	f107 0108 	add.w	r1, r7, #8
 8009ce4:	f107 030c 	add.w	r3, r7, #12
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fe fb07 	bl	80082fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	9202      	str	r2, [sp, #8]
 8009cf6:	9301      	str	r3, [sp, #4]
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	460a      	mov	r2, r1
 8009d00:	4910      	ldr	r1, [pc, #64]	; (8009d44 <xTimerCreateTimerTask+0x84>)
 8009d02:	4811      	ldr	r0, [pc, #68]	; (8009d48 <xTimerCreateTimerTask+0x88>)
 8009d04:	f7ff f8b4 	bl	8008e70 <xTaskCreateStatic>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	4a10      	ldr	r2, [pc, #64]	; (8009d4c <xTimerCreateTimerTask+0x8c>)
 8009d0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009d0e:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <xTimerCreateTimerTask+0x8c>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009d16:	2301      	movs	r3, #1
 8009d18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10a      	bne.n	8009d36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	613b      	str	r3, [r7, #16]
}
 8009d32:	bf00      	nop
 8009d34:	e7fe      	b.n	8009d34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009d36:	697b      	ldr	r3, [r7, #20]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	200013e0 	.word	0x200013e0
 8009d44:	0800b698 	.word	0x0800b698
 8009d48:	08009e85 	.word	0x08009e85
 8009d4c:	200013e4 	.word	0x200013e4

08009d50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b08a      	sub	sp, #40	; 0x28
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
 8009d5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10a      	bne.n	8009d7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6c:	f383 8811 	msr	BASEPRI, r3
 8009d70:	f3bf 8f6f 	isb	sy
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	623b      	str	r3, [r7, #32]
}
 8009d7a:	bf00      	nop
 8009d7c:	e7fe      	b.n	8009d7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d7e:	4b1a      	ldr	r3, [pc, #104]	; (8009de8 <xTimerGenericCommand+0x98>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d02a      	beq.n	8009ddc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b05      	cmp	r3, #5
 8009d96:	dc18      	bgt.n	8009dca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d98:	f7ff feb2 	bl	8009b00 <xTaskGetSchedulerState>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d109      	bne.n	8009db6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009da2:	4b11      	ldr	r3, [pc, #68]	; (8009de8 <xTimerGenericCommand+0x98>)
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f107 0110 	add.w	r1, r7, #16
 8009daa:	2300      	movs	r3, #0
 8009dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dae:	f7fe fc77 	bl	80086a0 <xQueueGenericSend>
 8009db2:	6278      	str	r0, [r7, #36]	; 0x24
 8009db4:	e012      	b.n	8009ddc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009db6:	4b0c      	ldr	r3, [pc, #48]	; (8009de8 <xTimerGenericCommand+0x98>)
 8009db8:	6818      	ldr	r0, [r3, #0]
 8009dba:	f107 0110 	add.w	r1, r7, #16
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f7fe fc6d 	bl	80086a0 <xQueueGenericSend>
 8009dc6:	6278      	str	r0, [r7, #36]	; 0x24
 8009dc8:	e008      	b.n	8009ddc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009dca:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <xTimerGenericCommand+0x98>)
 8009dcc:	6818      	ldr	r0, [r3, #0]
 8009dce:	f107 0110 	add.w	r1, r7, #16
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	f7fe fd61 	bl	800889c <xQueueGenericSendFromISR>
 8009dda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3728      	adds	r7, #40	; 0x28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	200013e0 	.word	0x200013e0

08009dec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b088      	sub	sp, #32
 8009df0:	af02      	add	r7, sp, #8
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df6:	4b22      	ldr	r3, [pc, #136]	; (8009e80 <prvProcessExpiredTimer+0x94>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fe fb1d 	bl	8008444 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e10:	f003 0304 	and.w	r3, r3, #4
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d022      	beq.n	8009e5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	699a      	ldr	r2, [r3, #24]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	18d1      	adds	r1, r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	6978      	ldr	r0, [r7, #20]
 8009e26:	f000 f8d1 	bl	8009fcc <prvInsertTimerInActiveList>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d01f      	beq.n	8009e70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e30:	2300      	movs	r3, #0
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	2300      	movs	r3, #0
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	2100      	movs	r1, #0
 8009e3a:	6978      	ldr	r0, [r7, #20]
 8009e3c:	f7ff ff88 	bl	8009d50 <xTimerGenericCommand>
 8009e40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d113      	bne.n	8009e70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	60fb      	str	r3, [r7, #12]
}
 8009e5a:	bf00      	nop
 8009e5c:	e7fe      	b.n	8009e5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e64:	f023 0301 	bic.w	r3, r3, #1
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	6a1b      	ldr	r3, [r3, #32]
 8009e74:	6978      	ldr	r0, [r7, #20]
 8009e76:	4798      	blx	r3
}
 8009e78:	bf00      	nop
 8009e7a:	3718      	adds	r7, #24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	200013d8 	.word	0x200013d8

08009e84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e8c:	f107 0308 	add.w	r3, r7, #8
 8009e90:	4618      	mov	r0, r3
 8009e92:	f000 f857 	bl	8009f44 <prvGetNextExpireTime>
 8009e96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 f803 	bl	8009ea8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ea2:	f000 f8d5 	bl	800a050 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ea6:	e7f1      	b.n	8009e8c <prvTimerTask+0x8>

08009ea8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009eb2:	f7ff fa39 	bl	8009328 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009eb6:	f107 0308 	add.w	r3, r7, #8
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 f866 	bl	8009f8c <prvSampleTimeNow>
 8009ec0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d130      	bne.n	8009f2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10a      	bne.n	8009ee4 <prvProcessTimerOrBlockTask+0x3c>
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d806      	bhi.n	8009ee4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009ed6:	f7ff fa35 	bl	8009344 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009eda:	68f9      	ldr	r1, [r7, #12]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7ff ff85 	bl	8009dec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ee2:	e024      	b.n	8009f2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d008      	beq.n	8009efc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009eea:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <prvProcessTimerOrBlockTask+0x90>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <prvProcessTimerOrBlockTask+0x50>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e000      	b.n	8009efa <prvProcessTimerOrBlockTask+0x52>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009efc:	4b0f      	ldr	r3, [pc, #60]	; (8009f3c <prvProcessTimerOrBlockTask+0x94>)
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	4619      	mov	r1, r3
 8009f0a:	f7fe ff7d 	bl	8008e08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f0e:	f7ff fa19 	bl	8009344 <xTaskResumeAll>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10a      	bne.n	8009f2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f18:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <prvProcessTimerOrBlockTask+0x98>)
 8009f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f1e:	601a      	str	r2, [r3, #0]
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	f3bf 8f6f 	isb	sy
}
 8009f28:	e001      	b.n	8009f2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f2a:	f7ff fa0b 	bl	8009344 <xTaskResumeAll>
}
 8009f2e:	bf00      	nop
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	200013dc 	.word	0x200013dc
 8009f3c:	200013e0 	.word	0x200013e0
 8009f40:	e000ed04 	.word	0xe000ed04

08009f44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f4c:	4b0e      	ldr	r3, [pc, #56]	; (8009f88 <prvGetNextExpireTime+0x44>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <prvGetNextExpireTime+0x16>
 8009f56:	2201      	movs	r2, #1
 8009f58:	e000      	b.n	8009f5c <prvGetNextExpireTime+0x18>
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d105      	bne.n	8009f74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f68:	4b07      	ldr	r3, [pc, #28]	; (8009f88 <prvGetNextExpireTime+0x44>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	60fb      	str	r3, [r7, #12]
 8009f72:	e001      	b.n	8009f78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f74:	2300      	movs	r3, #0
 8009f76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f78:	68fb      	ldr	r3, [r7, #12]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	200013d8 	.word	0x200013d8

08009f8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f94:	f7ff fa74 	bl	8009480 <xTaskGetTickCount>
 8009f98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f9a:	4b0b      	ldr	r3, [pc, #44]	; (8009fc8 <prvSampleTimeNow+0x3c>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d205      	bcs.n	8009fb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009fa4:	f000 f936 	bl	800a214 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	601a      	str	r2, [r3, #0]
 8009fae:	e002      	b.n	8009fb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009fb6:	4a04      	ldr	r2, [pc, #16]	; (8009fc8 <prvSampleTimeNow+0x3c>)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	200013e8 	.word	0x200013e8

08009fcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d812      	bhi.n	800a018 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	1ad2      	subs	r2, r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d302      	bcc.n	800a006 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a000:	2301      	movs	r3, #1
 800a002:	617b      	str	r3, [r7, #20]
 800a004:	e01b      	b.n	800a03e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a006:	4b10      	ldr	r3, [pc, #64]	; (800a048 <prvInsertTimerInActiveList+0x7c>)
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3304      	adds	r3, #4
 800a00e:	4619      	mov	r1, r3
 800a010:	4610      	mov	r0, r2
 800a012:	f7fe f9de 	bl	80083d2 <vListInsert>
 800a016:	e012      	b.n	800a03e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d206      	bcs.n	800a02e <prvInsertTimerInActiveList+0x62>
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	429a      	cmp	r2, r3
 800a026:	d302      	bcc.n	800a02e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a028:	2301      	movs	r3, #1
 800a02a:	617b      	str	r3, [r7, #20]
 800a02c:	e007      	b.n	800a03e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a02e:	4b07      	ldr	r3, [pc, #28]	; (800a04c <prvInsertTimerInActiveList+0x80>)
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3304      	adds	r3, #4
 800a036:	4619      	mov	r1, r3
 800a038:	4610      	mov	r0, r2
 800a03a:	f7fe f9ca 	bl	80083d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a03e:	697b      	ldr	r3, [r7, #20]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	200013dc 	.word	0x200013dc
 800a04c:	200013d8 	.word	0x200013d8

0800a050 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08e      	sub	sp, #56	; 0x38
 800a054:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a056:	e0ca      	b.n	800a1ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	da18      	bge.n	800a090 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a05e:	1d3b      	adds	r3, r7, #4
 800a060:	3304      	adds	r3, #4
 800a062:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10a      	bne.n	800a080 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	61fb      	str	r3, [r7, #28]
}
 800a07c:	bf00      	nop
 800a07e:	e7fe      	b.n	800a07e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a086:	6850      	ldr	r0, [r2, #4]
 800a088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a08a:	6892      	ldr	r2, [r2, #8]
 800a08c:	4611      	mov	r1, r2
 800a08e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	f2c0 80ab 	blt.w	800a1ee <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d004      	beq.n	800a0ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe f9cb 	bl	8008444 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0ae:	463b      	mov	r3, r7
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7ff ff6b 	bl	8009f8c <prvSampleTimeNow>
 800a0b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b09      	cmp	r3, #9
 800a0bc:	f200 8096 	bhi.w	800a1ec <prvProcessReceivedCommands+0x19c>
 800a0c0:	a201      	add	r2, pc, #4	; (adr r2, 800a0c8 <prvProcessReceivedCommands+0x78>)
 800a0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c6:	bf00      	nop
 800a0c8:	0800a0f1 	.word	0x0800a0f1
 800a0cc:	0800a0f1 	.word	0x0800a0f1
 800a0d0:	0800a0f1 	.word	0x0800a0f1
 800a0d4:	0800a165 	.word	0x0800a165
 800a0d8:	0800a179 	.word	0x0800a179
 800a0dc:	0800a1c3 	.word	0x0800a1c3
 800a0e0:	0800a0f1 	.word	0x0800a0f1
 800a0e4:	0800a0f1 	.word	0x0800a0f1
 800a0e8:	0800a165 	.word	0x0800a165
 800a0ec:	0800a179 	.word	0x0800a179
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0f6:	f043 0301 	orr.w	r3, r3, #1
 800a0fa:	b2da      	uxtb	r2, r3
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	18d1      	adds	r1, r2, r3
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a110:	f7ff ff5c 	bl	8009fcc <prvInsertTimerInActiveList>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d069      	beq.n	800a1ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a120:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a128:	f003 0304 	and.w	r3, r3, #4
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d05e      	beq.n	800a1ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	441a      	add	r2, r3
 800a138:	2300      	movs	r3, #0
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	2300      	movs	r3, #0
 800a13e:	2100      	movs	r1, #0
 800a140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a142:	f7ff fe05 	bl	8009d50 <xTimerGenericCommand>
 800a146:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d14f      	bne.n	800a1ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	61bb      	str	r3, [r7, #24]
}
 800a160:	bf00      	nop
 800a162:	e7fe      	b.n	800a162 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a16a:	f023 0301 	bic.w	r3, r3, #1
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a176:	e03a      	b.n	800a1ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a17e:	f043 0301 	orr.w	r3, r3, #1
 800a182:	b2da      	uxtb	r2, r3
 800a184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10a      	bne.n	800a1ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	617b      	str	r3, [r7, #20]
}
 800a1aa:	bf00      	nop
 800a1ac:	e7fe      	b.n	800a1ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	699a      	ldr	r2, [r3, #24]
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	18d1      	adds	r1, r2, r3
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1bc:	f7ff ff06 	bl	8009fcc <prvInsertTimerInActiveList>
					break;
 800a1c0:	e015      	b.n	800a1ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1c8:	f003 0302 	and.w	r3, r3, #2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d103      	bne.n	800a1d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a1d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1d2:	f000 fbdd 	bl	800a990 <vPortFree>
 800a1d6:	e00a      	b.n	800a1ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1de:	f023 0301 	bic.w	r3, r3, #1
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a1ea:	e000      	b.n	800a1ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a1ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1ee:	4b08      	ldr	r3, [pc, #32]	; (800a210 <prvProcessReceivedCommands+0x1c0>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	1d39      	adds	r1, r7, #4
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe fbec 	bl	80089d4 <xQueueReceive>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f47f af2a 	bne.w	800a058 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a204:	bf00      	nop
 800a206:	bf00      	nop
 800a208:	3730      	adds	r7, #48	; 0x30
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	200013e0 	.word	0x200013e0

0800a214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b088      	sub	sp, #32
 800a218:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a21a:	e048      	b.n	800a2ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a21c:	4b2d      	ldr	r3, [pc, #180]	; (800a2d4 <prvSwitchTimerLists+0xc0>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a226:	4b2b      	ldr	r3, [pc, #172]	; (800a2d4 <prvSwitchTimerLists+0xc0>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	3304      	adds	r3, #4
 800a234:	4618      	mov	r0, r3
 800a236:	f7fe f905 	bl	8008444 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a248:	f003 0304 	and.w	r3, r3, #4
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d02e      	beq.n	800a2ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	4413      	add	r3, r2
 800a258:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d90e      	bls.n	800a280 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a26e:	4b19      	ldr	r3, [pc, #100]	; (800a2d4 <prvSwitchTimerLists+0xc0>)
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3304      	adds	r3, #4
 800a276:	4619      	mov	r1, r3
 800a278:	4610      	mov	r0, r2
 800a27a:	f7fe f8aa 	bl	80083d2 <vListInsert>
 800a27e:	e016      	b.n	800a2ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a280:	2300      	movs	r3, #0
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	2300      	movs	r3, #0
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	2100      	movs	r1, #0
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f7ff fd60 	bl	8009d50 <xTimerGenericCommand>
 800a290:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10a      	bne.n	800a2ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	603b      	str	r3, [r7, #0]
}
 800a2aa:	bf00      	nop
 800a2ac:	e7fe      	b.n	800a2ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2ae:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <prvSwitchTimerLists+0xc0>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1b1      	bne.n	800a21c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a2b8:	4b06      	ldr	r3, [pc, #24]	; (800a2d4 <prvSwitchTimerLists+0xc0>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a2be:	4b06      	ldr	r3, [pc, #24]	; (800a2d8 <prvSwitchTimerLists+0xc4>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a04      	ldr	r2, [pc, #16]	; (800a2d4 <prvSwitchTimerLists+0xc0>)
 800a2c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a2c6:	4a04      	ldr	r2, [pc, #16]	; (800a2d8 <prvSwitchTimerLists+0xc4>)
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	6013      	str	r3, [r2, #0]
}
 800a2cc:	bf00      	nop
 800a2ce:	3718      	adds	r7, #24
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	200013d8 	.word	0x200013d8
 800a2d8:	200013dc 	.word	0x200013dc

0800a2dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a2e2:	f000 f967 	bl	800a5b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a2e6:	4b15      	ldr	r3, [pc, #84]	; (800a33c <prvCheckForValidListAndQueue+0x60>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d120      	bne.n	800a330 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a2ee:	4814      	ldr	r0, [pc, #80]	; (800a340 <prvCheckForValidListAndQueue+0x64>)
 800a2f0:	f7fe f81e 	bl	8008330 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a2f4:	4813      	ldr	r0, [pc, #76]	; (800a344 <prvCheckForValidListAndQueue+0x68>)
 800a2f6:	f7fe f81b 	bl	8008330 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a2fa:	4b13      	ldr	r3, [pc, #76]	; (800a348 <prvCheckForValidListAndQueue+0x6c>)
 800a2fc:	4a10      	ldr	r2, [pc, #64]	; (800a340 <prvCheckForValidListAndQueue+0x64>)
 800a2fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a300:	4b12      	ldr	r3, [pc, #72]	; (800a34c <prvCheckForValidListAndQueue+0x70>)
 800a302:	4a10      	ldr	r2, [pc, #64]	; (800a344 <prvCheckForValidListAndQueue+0x68>)
 800a304:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a306:	2300      	movs	r3, #0
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	4b11      	ldr	r3, [pc, #68]	; (800a350 <prvCheckForValidListAndQueue+0x74>)
 800a30c:	4a11      	ldr	r2, [pc, #68]	; (800a354 <prvCheckForValidListAndQueue+0x78>)
 800a30e:	2110      	movs	r1, #16
 800a310:	200a      	movs	r0, #10
 800a312:	f7fe f929 	bl	8008568 <xQueueGenericCreateStatic>
 800a316:	4603      	mov	r3, r0
 800a318:	4a08      	ldr	r2, [pc, #32]	; (800a33c <prvCheckForValidListAndQueue+0x60>)
 800a31a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a31c:	4b07      	ldr	r3, [pc, #28]	; (800a33c <prvCheckForValidListAndQueue+0x60>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d005      	beq.n	800a330 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a324:	4b05      	ldr	r3, [pc, #20]	; (800a33c <prvCheckForValidListAndQueue+0x60>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	490b      	ldr	r1, [pc, #44]	; (800a358 <prvCheckForValidListAndQueue+0x7c>)
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe fd42 	bl	8008db4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a330:	f000 f970 	bl	800a614 <vPortExitCritical>
}
 800a334:	bf00      	nop
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	200013e0 	.word	0x200013e0
 800a340:	200013b0 	.word	0x200013b0
 800a344:	200013c4 	.word	0x200013c4
 800a348:	200013d8 	.word	0x200013d8
 800a34c:	200013dc 	.word	0x200013dc
 800a350:	2000148c 	.word	0x2000148c
 800a354:	200013ec 	.word	0x200013ec
 800a358:	0800b6a0 	.word	0x0800b6a0

0800a35c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3b04      	subs	r3, #4
 800a36c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3b04      	subs	r3, #4
 800a37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	f023 0201 	bic.w	r2, r3, #1
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3b04      	subs	r3, #4
 800a38a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a38c:	4a0c      	ldr	r2, [pc, #48]	; (800a3c0 <pxPortInitialiseStack+0x64>)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	3b14      	subs	r3, #20
 800a396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3b04      	subs	r3, #4
 800a3a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f06f 0202 	mvn.w	r2, #2
 800a3aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3b20      	subs	r3, #32
 800a3b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr
 800a3c0:	0800a3c5 	.word	0x0800a3c5

0800a3c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a3ce:	4b12      	ldr	r3, [pc, #72]	; (800a418 <prvTaskExitError+0x54>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d6:	d00a      	beq.n	800a3ee <prvTaskExitError+0x2a>
	__asm volatile
 800a3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3dc:	f383 8811 	msr	BASEPRI, r3
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	60fb      	str	r3, [r7, #12]
}
 800a3ea:	bf00      	nop
 800a3ec:	e7fe      	b.n	800a3ec <prvTaskExitError+0x28>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	60bb      	str	r3, [r7, #8]
}
 800a400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a402:	bf00      	nop
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d0fc      	beq.n	800a404 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a40a:	bf00      	nop
 800a40c:	bf00      	nop
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	20000010 	.word	0x20000010
 800a41c:	00000000 	.word	0x00000000

0800a420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a420:	4b07      	ldr	r3, [pc, #28]	; (800a440 <pxCurrentTCBConst2>)
 800a422:	6819      	ldr	r1, [r3, #0]
 800a424:	6808      	ldr	r0, [r1, #0]
 800a426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42a:	f380 8809 	msr	PSP, r0
 800a42e:	f3bf 8f6f 	isb	sy
 800a432:	f04f 0000 	mov.w	r0, #0
 800a436:	f380 8811 	msr	BASEPRI, r0
 800a43a:	4770      	bx	lr
 800a43c:	f3af 8000 	nop.w

0800a440 <pxCurrentTCBConst2>:
 800a440:	20000eb0 	.word	0x20000eb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a444:	bf00      	nop
 800a446:	bf00      	nop

0800a448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a448:	4808      	ldr	r0, [pc, #32]	; (800a46c <prvPortStartFirstTask+0x24>)
 800a44a:	6800      	ldr	r0, [r0, #0]
 800a44c:	6800      	ldr	r0, [r0, #0]
 800a44e:	f380 8808 	msr	MSP, r0
 800a452:	f04f 0000 	mov.w	r0, #0
 800a456:	f380 8814 	msr	CONTROL, r0
 800a45a:	b662      	cpsie	i
 800a45c:	b661      	cpsie	f
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	df00      	svc	0
 800a468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a46a:	bf00      	nop
 800a46c:	e000ed08 	.word	0xe000ed08

0800a470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a476:	4b46      	ldr	r3, [pc, #280]	; (800a590 <xPortStartScheduler+0x120>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a46      	ldr	r2, [pc, #280]	; (800a594 <xPortStartScheduler+0x124>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d10a      	bne.n	800a496 <xPortStartScheduler+0x26>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	613b      	str	r3, [r7, #16]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a496:	4b3e      	ldr	r3, [pc, #248]	; (800a590 <xPortStartScheduler+0x120>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a3f      	ldr	r2, [pc, #252]	; (800a598 <xPortStartScheduler+0x128>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d10a      	bne.n	800a4b6 <xPortStartScheduler+0x46>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	60fb      	str	r3, [r7, #12]
}
 800a4b2:	bf00      	nop
 800a4b4:	e7fe      	b.n	800a4b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a4b6:	4b39      	ldr	r3, [pc, #228]	; (800a59c <xPortStartScheduler+0x12c>)
 800a4b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	22ff      	movs	r2, #255	; 0xff
 800a4c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	4b31      	ldr	r3, [pc, #196]	; (800a5a0 <xPortStartScheduler+0x130>)
 800a4dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a4de:	4b31      	ldr	r3, [pc, #196]	; (800a5a4 <xPortStartScheduler+0x134>)
 800a4e0:	2207      	movs	r2, #7
 800a4e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4e4:	e009      	b.n	800a4fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a4e6:	4b2f      	ldr	r3, [pc, #188]	; (800a5a4 <xPortStartScheduler+0x134>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	4a2d      	ldr	r2, [pc, #180]	; (800a5a4 <xPortStartScheduler+0x134>)
 800a4ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4f0:	78fb      	ldrb	r3, [r7, #3]
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	005b      	lsls	r3, r3, #1
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4fa:	78fb      	ldrb	r3, [r7, #3]
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a502:	2b80      	cmp	r3, #128	; 0x80
 800a504:	d0ef      	beq.n	800a4e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a506:	4b27      	ldr	r3, [pc, #156]	; (800a5a4 <xPortStartScheduler+0x134>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f1c3 0307 	rsb	r3, r3, #7
 800a50e:	2b04      	cmp	r3, #4
 800a510:	d00a      	beq.n	800a528 <xPortStartScheduler+0xb8>
	__asm volatile
 800a512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	60bb      	str	r3, [r7, #8]
}
 800a524:	bf00      	nop
 800a526:	e7fe      	b.n	800a526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a528:	4b1e      	ldr	r3, [pc, #120]	; (800a5a4 <xPortStartScheduler+0x134>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	021b      	lsls	r3, r3, #8
 800a52e:	4a1d      	ldr	r2, [pc, #116]	; (800a5a4 <xPortStartScheduler+0x134>)
 800a530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a532:	4b1c      	ldr	r3, [pc, #112]	; (800a5a4 <xPortStartScheduler+0x134>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a53a:	4a1a      	ldr	r2, [pc, #104]	; (800a5a4 <xPortStartScheduler+0x134>)
 800a53c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	b2da      	uxtb	r2, r3
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a546:	4b18      	ldr	r3, [pc, #96]	; (800a5a8 <xPortStartScheduler+0x138>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a17      	ldr	r2, [pc, #92]	; (800a5a8 <xPortStartScheduler+0x138>)
 800a54c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a552:	4b15      	ldr	r3, [pc, #84]	; (800a5a8 <xPortStartScheduler+0x138>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a14      	ldr	r2, [pc, #80]	; (800a5a8 <xPortStartScheduler+0x138>)
 800a558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a55c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a55e:	f000 f8dd 	bl	800a71c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a562:	4b12      	ldr	r3, [pc, #72]	; (800a5ac <xPortStartScheduler+0x13c>)
 800a564:	2200      	movs	r2, #0
 800a566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a568:	f000 f8fc 	bl	800a764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a56c:	4b10      	ldr	r3, [pc, #64]	; (800a5b0 <xPortStartScheduler+0x140>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a0f      	ldr	r2, [pc, #60]	; (800a5b0 <xPortStartScheduler+0x140>)
 800a572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a578:	f7ff ff66 	bl	800a448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a57c:	f7ff f84a 	bl	8009614 <vTaskSwitchContext>
	prvTaskExitError();
 800a580:	f7ff ff20 	bl	800a3c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3718      	adds	r7, #24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	e000ed00 	.word	0xe000ed00
 800a594:	410fc271 	.word	0x410fc271
 800a598:	410fc270 	.word	0x410fc270
 800a59c:	e000e400 	.word	0xe000e400
 800a5a0:	200014dc 	.word	0x200014dc
 800a5a4:	200014e0 	.word	0x200014e0
 800a5a8:	e000ed20 	.word	0xe000ed20
 800a5ac:	20000010 	.word	0x20000010
 800a5b0:	e000ef34 	.word	0xe000ef34

0800a5b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
	__asm volatile
 800a5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	607b      	str	r3, [r7, #4]
}
 800a5cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a5ce:	4b0f      	ldr	r3, [pc, #60]	; (800a60c <vPortEnterCritical+0x58>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	4a0d      	ldr	r2, [pc, #52]	; (800a60c <vPortEnterCritical+0x58>)
 800a5d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a5d8:	4b0c      	ldr	r3, [pc, #48]	; (800a60c <vPortEnterCritical+0x58>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d10f      	bne.n	800a600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a5e0:	4b0b      	ldr	r3, [pc, #44]	; (800a610 <vPortEnterCritical+0x5c>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00a      	beq.n	800a600 <vPortEnterCritical+0x4c>
	__asm volatile
 800a5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ee:	f383 8811 	msr	BASEPRI, r3
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	603b      	str	r3, [r7, #0]
}
 800a5fc:	bf00      	nop
 800a5fe:	e7fe      	b.n	800a5fe <vPortEnterCritical+0x4a>
	}
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	20000010 	.word	0x20000010
 800a610:	e000ed04 	.word	0xe000ed04

0800a614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a61a:	4b12      	ldr	r3, [pc, #72]	; (800a664 <vPortExitCritical+0x50>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10a      	bne.n	800a638 <vPortExitCritical+0x24>
	__asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	607b      	str	r3, [r7, #4]
}
 800a634:	bf00      	nop
 800a636:	e7fe      	b.n	800a636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a638:	4b0a      	ldr	r3, [pc, #40]	; (800a664 <vPortExitCritical+0x50>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	4a09      	ldr	r2, [pc, #36]	; (800a664 <vPortExitCritical+0x50>)
 800a640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a642:	4b08      	ldr	r3, [pc, #32]	; (800a664 <vPortExitCritical+0x50>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d105      	bne.n	800a656 <vPortExitCritical+0x42>
 800a64a:	2300      	movs	r3, #0
 800a64c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	f383 8811 	msr	BASEPRI, r3
}
 800a654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a656:	bf00      	nop
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	20000010 	.word	0x20000010
	...

0800a670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a670:	f3ef 8009 	mrs	r0, PSP
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	4b15      	ldr	r3, [pc, #84]	; (800a6d0 <pxCurrentTCBConst>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	f01e 0f10 	tst.w	lr, #16
 800a680:	bf08      	it	eq
 800a682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68a:	6010      	str	r0, [r2, #0]
 800a68c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a690:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a694:	f380 8811 	msr	BASEPRI, r0
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f7fe ffb8 	bl	8009614 <vTaskSwitchContext>
 800a6a4:	f04f 0000 	mov.w	r0, #0
 800a6a8:	f380 8811 	msr	BASEPRI, r0
 800a6ac:	bc09      	pop	{r0, r3}
 800a6ae:	6819      	ldr	r1, [r3, #0]
 800a6b0:	6808      	ldr	r0, [r1, #0]
 800a6b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b6:	f01e 0f10 	tst.w	lr, #16
 800a6ba:	bf08      	it	eq
 800a6bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a6c0:	f380 8809 	msr	PSP, r0
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	f3af 8000 	nop.w

0800a6d0 <pxCurrentTCBConst>:
 800a6d0:	20000eb0 	.word	0x20000eb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a6d4:	bf00      	nop
 800a6d6:	bf00      	nop

0800a6d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	607b      	str	r3, [r7, #4]
}
 800a6f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6f2:	f7fe fed5 	bl	80094a0 <xTaskIncrementTick>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d003      	beq.n	800a704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6fc:	4b06      	ldr	r3, [pc, #24]	; (800a718 <xPortSysTickHandler+0x40>)
 800a6fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	2300      	movs	r3, #0
 800a706:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	f383 8811 	msr	BASEPRI, r3
}
 800a70e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a710:	bf00      	nop
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	e000ed04 	.word	0xe000ed04

0800a71c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a71c:	b480      	push	{r7}
 800a71e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a720:	4b0b      	ldr	r3, [pc, #44]	; (800a750 <vPortSetupTimerInterrupt+0x34>)
 800a722:	2200      	movs	r2, #0
 800a724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a726:	4b0b      	ldr	r3, [pc, #44]	; (800a754 <vPortSetupTimerInterrupt+0x38>)
 800a728:	2200      	movs	r2, #0
 800a72a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a72c:	4b0a      	ldr	r3, [pc, #40]	; (800a758 <vPortSetupTimerInterrupt+0x3c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a0a      	ldr	r2, [pc, #40]	; (800a75c <vPortSetupTimerInterrupt+0x40>)
 800a732:	fba2 2303 	umull	r2, r3, r2, r3
 800a736:	099b      	lsrs	r3, r3, #6
 800a738:	4a09      	ldr	r2, [pc, #36]	; (800a760 <vPortSetupTimerInterrupt+0x44>)
 800a73a:	3b01      	subs	r3, #1
 800a73c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a73e:	4b04      	ldr	r3, [pc, #16]	; (800a750 <vPortSetupTimerInterrupt+0x34>)
 800a740:	2207      	movs	r2, #7
 800a742:	601a      	str	r2, [r3, #0]
}
 800a744:	bf00      	nop
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	e000e010 	.word	0xe000e010
 800a754:	e000e018 	.word	0xe000e018
 800a758:	20000004 	.word	0x20000004
 800a75c:	10624dd3 	.word	0x10624dd3
 800a760:	e000e014 	.word	0xe000e014

0800a764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a774 <vPortEnableVFP+0x10>
 800a768:	6801      	ldr	r1, [r0, #0]
 800a76a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a76e:	6001      	str	r1, [r0, #0]
 800a770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a772:	bf00      	nop
 800a774:	e000ed88 	.word	0xe000ed88

0800a778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a77e:	f3ef 8305 	mrs	r3, IPSR
 800a782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2b0f      	cmp	r3, #15
 800a788:	d914      	bls.n	800a7b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a78a:	4a17      	ldr	r2, [pc, #92]	; (800a7e8 <vPortValidateInterruptPriority+0x70>)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	4413      	add	r3, r2
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a794:	4b15      	ldr	r3, [pc, #84]	; (800a7ec <vPortValidateInterruptPriority+0x74>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	7afa      	ldrb	r2, [r7, #11]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d20a      	bcs.n	800a7b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	607b      	str	r3, [r7, #4]
}
 800a7b0:	bf00      	nop
 800a7b2:	e7fe      	b.n	800a7b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a7b4:	4b0e      	ldr	r3, [pc, #56]	; (800a7f0 <vPortValidateInterruptPriority+0x78>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a7bc:	4b0d      	ldr	r3, [pc, #52]	; (800a7f4 <vPortValidateInterruptPriority+0x7c>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d90a      	bls.n	800a7da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c8:	f383 8811 	msr	BASEPRI, r3
 800a7cc:	f3bf 8f6f 	isb	sy
 800a7d0:	f3bf 8f4f 	dsb	sy
 800a7d4:	603b      	str	r3, [r7, #0]
}
 800a7d6:	bf00      	nop
 800a7d8:	e7fe      	b.n	800a7d8 <vPortValidateInterruptPriority+0x60>
	}
 800a7da:	bf00      	nop
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	e000e3f0 	.word	0xe000e3f0
 800a7ec:	200014dc 	.word	0x200014dc
 800a7f0:	e000ed0c 	.word	0xe000ed0c
 800a7f4:	200014e0 	.word	0x200014e0

0800a7f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08a      	sub	sp, #40	; 0x28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a800:	2300      	movs	r3, #0
 800a802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a804:	f7fe fd90 	bl	8009328 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a808:	4b5b      	ldr	r3, [pc, #364]	; (800a978 <pvPortMalloc+0x180>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a810:	f000 f920 	bl	800aa54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a814:	4b59      	ldr	r3, [pc, #356]	; (800a97c <pvPortMalloc+0x184>)
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4013      	ands	r3, r2
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f040 8093 	bne.w	800a948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d01d      	beq.n	800a864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a828:	2208      	movs	r2, #8
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4413      	add	r3, r2
 800a82e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f003 0307 	and.w	r3, r3, #7
 800a836:	2b00      	cmp	r3, #0
 800a838:	d014      	beq.n	800a864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f023 0307 	bic.w	r3, r3, #7
 800a840:	3308      	adds	r3, #8
 800a842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f003 0307 	and.w	r3, r3, #7
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00a      	beq.n	800a864 <pvPortMalloc+0x6c>
	__asm volatile
 800a84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	617b      	str	r3, [r7, #20]
}
 800a860:	bf00      	nop
 800a862:	e7fe      	b.n	800a862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d06e      	beq.n	800a948 <pvPortMalloc+0x150>
 800a86a:	4b45      	ldr	r3, [pc, #276]	; (800a980 <pvPortMalloc+0x188>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	429a      	cmp	r2, r3
 800a872:	d869      	bhi.n	800a948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a874:	4b43      	ldr	r3, [pc, #268]	; (800a984 <pvPortMalloc+0x18c>)
 800a876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a878:	4b42      	ldr	r3, [pc, #264]	; (800a984 <pvPortMalloc+0x18c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a87e:	e004      	b.n	800a88a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	429a      	cmp	r2, r3
 800a892:	d903      	bls.n	800a89c <pvPortMalloc+0xa4>
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1f1      	bne.n	800a880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a89c:	4b36      	ldr	r3, [pc, #216]	; (800a978 <pvPortMalloc+0x180>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d050      	beq.n	800a948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a8a6:	6a3b      	ldr	r3, [r7, #32]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2208      	movs	r2, #8
 800a8ac:	4413      	add	r3, r2
 800a8ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	1ad2      	subs	r2, r2, r3
 800a8c0:	2308      	movs	r3, #8
 800a8c2:	005b      	lsls	r3, r3, #1
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d91f      	bls.n	800a908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	f003 0307 	and.w	r3, r3, #7
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <pvPortMalloc+0xf8>
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	613b      	str	r3, [r7, #16]
}
 800a8ec:	bf00      	nop
 800a8ee:	e7fe      	b.n	800a8ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	685a      	ldr	r2, [r3, #4]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	1ad2      	subs	r2, r2, r3
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a902:	69b8      	ldr	r0, [r7, #24]
 800a904:	f000 f908 	bl	800ab18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a908:	4b1d      	ldr	r3, [pc, #116]	; (800a980 <pvPortMalloc+0x188>)
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	4a1b      	ldr	r2, [pc, #108]	; (800a980 <pvPortMalloc+0x188>)
 800a914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a916:	4b1a      	ldr	r3, [pc, #104]	; (800a980 <pvPortMalloc+0x188>)
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	4b1b      	ldr	r3, [pc, #108]	; (800a988 <pvPortMalloc+0x190>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d203      	bcs.n	800a92a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a922:	4b17      	ldr	r3, [pc, #92]	; (800a980 <pvPortMalloc+0x188>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a18      	ldr	r2, [pc, #96]	; (800a988 <pvPortMalloc+0x190>)
 800a928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	4b13      	ldr	r3, [pc, #76]	; (800a97c <pvPortMalloc+0x184>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	431a      	orrs	r2, r3
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	2200      	movs	r2, #0
 800a93c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a93e:	4b13      	ldr	r3, [pc, #76]	; (800a98c <pvPortMalloc+0x194>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	3301      	adds	r3, #1
 800a944:	4a11      	ldr	r2, [pc, #68]	; (800a98c <pvPortMalloc+0x194>)
 800a946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a948:	f7fe fcfc 	bl	8009344 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	f003 0307 	and.w	r3, r3, #7
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00a      	beq.n	800a96c <pvPortMalloc+0x174>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	60fb      	str	r3, [r7, #12]
}
 800a968:	bf00      	nop
 800a96a:	e7fe      	b.n	800a96a <pvPortMalloc+0x172>
	return pvReturn;
 800a96c:	69fb      	ldr	r3, [r7, #28]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3728      	adds	r7, #40	; 0x28
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	200050ec 	.word	0x200050ec
 800a97c:	20005100 	.word	0x20005100
 800a980:	200050f0 	.word	0x200050f0
 800a984:	200050e4 	.word	0x200050e4
 800a988:	200050f4 	.word	0x200050f4
 800a98c:	200050f8 	.word	0x200050f8

0800a990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d04d      	beq.n	800aa3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a9a2:	2308      	movs	r3, #8
 800a9a4:	425b      	negs	r3, r3
 800a9a6:	697a      	ldr	r2, [r7, #20]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	685a      	ldr	r2, [r3, #4]
 800a9b4:	4b24      	ldr	r3, [pc, #144]	; (800aa48 <vPortFree+0xb8>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10a      	bne.n	800a9d4 <vPortFree+0x44>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	60fb      	str	r3, [r7, #12]
}
 800a9d0:	bf00      	nop
 800a9d2:	e7fe      	b.n	800a9d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00a      	beq.n	800a9f2 <vPortFree+0x62>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	60bb      	str	r3, [r7, #8]
}
 800a9ee:	bf00      	nop
 800a9f0:	e7fe      	b.n	800a9f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	685a      	ldr	r2, [r3, #4]
 800a9f6:	4b14      	ldr	r3, [pc, #80]	; (800aa48 <vPortFree+0xb8>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d01e      	beq.n	800aa3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d11a      	bne.n	800aa3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	685a      	ldr	r2, [r3, #4]
 800aa0c:	4b0e      	ldr	r3, [pc, #56]	; (800aa48 <vPortFree+0xb8>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	43db      	mvns	r3, r3
 800aa12:	401a      	ands	r2, r3
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa18:	f7fe fc86 	bl	8009328 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	685a      	ldr	r2, [r3, #4]
 800aa20:	4b0a      	ldr	r3, [pc, #40]	; (800aa4c <vPortFree+0xbc>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4413      	add	r3, r2
 800aa26:	4a09      	ldr	r2, [pc, #36]	; (800aa4c <vPortFree+0xbc>)
 800aa28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa2a:	6938      	ldr	r0, [r7, #16]
 800aa2c:	f000 f874 	bl	800ab18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa30:	4b07      	ldr	r3, [pc, #28]	; (800aa50 <vPortFree+0xc0>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3301      	adds	r3, #1
 800aa36:	4a06      	ldr	r2, [pc, #24]	; (800aa50 <vPortFree+0xc0>)
 800aa38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa3a:	f7fe fc83 	bl	8009344 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa3e:	bf00      	nop
 800aa40:	3718      	adds	r7, #24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20005100 	.word	0x20005100
 800aa4c:	200050f0 	.word	0x200050f0
 800aa50:	200050fc 	.word	0x200050fc

0800aa54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aa5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa60:	4b27      	ldr	r3, [pc, #156]	; (800ab00 <prvHeapInit+0xac>)
 800aa62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f003 0307 	and.w	r3, r3, #7
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00c      	beq.n	800aa88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	3307      	adds	r3, #7
 800aa72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f023 0307 	bic.w	r3, r3, #7
 800aa7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	4a1f      	ldr	r2, [pc, #124]	; (800ab00 <prvHeapInit+0xac>)
 800aa84:	4413      	add	r3, r2
 800aa86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa8c:	4a1d      	ldr	r2, [pc, #116]	; (800ab04 <prvHeapInit+0xb0>)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa92:	4b1c      	ldr	r3, [pc, #112]	; (800ab04 <prvHeapInit+0xb0>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aaa0:	2208      	movs	r2, #8
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	1a9b      	subs	r3, r3, r2
 800aaa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f023 0307 	bic.w	r3, r3, #7
 800aaae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4a15      	ldr	r2, [pc, #84]	; (800ab08 <prvHeapInit+0xb4>)
 800aab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aab6:	4b14      	ldr	r3, [pc, #80]	; (800ab08 <prvHeapInit+0xb4>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2200      	movs	r2, #0
 800aabc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aabe:	4b12      	ldr	r3, [pc, #72]	; (800ab08 <prvHeapInit+0xb4>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2200      	movs	r2, #0
 800aac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	1ad2      	subs	r2, r2, r3
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aad4:	4b0c      	ldr	r3, [pc, #48]	; (800ab08 <prvHeapInit+0xb4>)
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	4a0a      	ldr	r2, [pc, #40]	; (800ab0c <prvHeapInit+0xb8>)
 800aae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	4a09      	ldr	r2, [pc, #36]	; (800ab10 <prvHeapInit+0xbc>)
 800aaea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aaec:	4b09      	ldr	r3, [pc, #36]	; (800ab14 <prvHeapInit+0xc0>)
 800aaee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aaf2:	601a      	str	r2, [r3, #0]
}
 800aaf4:	bf00      	nop
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr
 800ab00:	200014e4 	.word	0x200014e4
 800ab04:	200050e4 	.word	0x200050e4
 800ab08:	200050ec 	.word	0x200050ec
 800ab0c:	200050f4 	.word	0x200050f4
 800ab10:	200050f0 	.word	0x200050f0
 800ab14:	20005100 	.word	0x20005100

0800ab18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab20:	4b28      	ldr	r3, [pc, #160]	; (800abc4 <prvInsertBlockIntoFreeList+0xac>)
 800ab22:	60fb      	str	r3, [r7, #12]
 800ab24:	e002      	b.n	800ab2c <prvInsertBlockIntoFreeList+0x14>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	60fb      	str	r3, [r7, #12]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d8f7      	bhi.n	800ab26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	4413      	add	r3, r2
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d108      	bne.n	800ab5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	441a      	add	r2, r3
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	441a      	add	r2, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d118      	bne.n	800aba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	4b15      	ldr	r3, [pc, #84]	; (800abc8 <prvInsertBlockIntoFreeList+0xb0>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d00d      	beq.n	800ab96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	441a      	add	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	601a      	str	r2, [r3, #0]
 800ab94:	e008      	b.n	800aba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab96:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <prvInsertBlockIntoFreeList+0xb0>)
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	601a      	str	r2, [r3, #0]
 800ab9e:	e003      	b.n	800aba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	429a      	cmp	r2, r3
 800abae:	d002      	beq.n	800abb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abb6:	bf00      	nop
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	200050e4 	.word	0x200050e4
 800abc8:	200050ec 	.word	0x200050ec

0800abcc <siprintf>:
 800abcc:	b40e      	push	{r1, r2, r3}
 800abce:	b500      	push	{lr}
 800abd0:	b09c      	sub	sp, #112	; 0x70
 800abd2:	ab1d      	add	r3, sp, #116	; 0x74
 800abd4:	9002      	str	r0, [sp, #8]
 800abd6:	9006      	str	r0, [sp, #24]
 800abd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abdc:	4809      	ldr	r0, [pc, #36]	; (800ac04 <siprintf+0x38>)
 800abde:	9107      	str	r1, [sp, #28]
 800abe0:	9104      	str	r1, [sp, #16]
 800abe2:	4909      	ldr	r1, [pc, #36]	; (800ac08 <siprintf+0x3c>)
 800abe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800abe8:	9105      	str	r1, [sp, #20]
 800abea:	6800      	ldr	r0, [r0, #0]
 800abec:	9301      	str	r3, [sp, #4]
 800abee:	a902      	add	r1, sp, #8
 800abf0:	f000 f9f6 	bl	800afe0 <_svfiprintf_r>
 800abf4:	9b02      	ldr	r3, [sp, #8]
 800abf6:	2200      	movs	r2, #0
 800abf8:	701a      	strb	r2, [r3, #0]
 800abfa:	b01c      	add	sp, #112	; 0x70
 800abfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac00:	b003      	add	sp, #12
 800ac02:	4770      	bx	lr
 800ac04:	20000060 	.word	0x20000060
 800ac08:	ffff0208 	.word	0xffff0208

0800ac0c <memset>:
 800ac0c:	4402      	add	r2, r0
 800ac0e:	4603      	mov	r3, r0
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d100      	bne.n	800ac16 <memset+0xa>
 800ac14:	4770      	bx	lr
 800ac16:	f803 1b01 	strb.w	r1, [r3], #1
 800ac1a:	e7f9      	b.n	800ac10 <memset+0x4>

0800ac1c <_reclaim_reent>:
 800ac1c:	4b29      	ldr	r3, [pc, #164]	; (800acc4 <_reclaim_reent+0xa8>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4283      	cmp	r3, r0
 800ac22:	b570      	push	{r4, r5, r6, lr}
 800ac24:	4604      	mov	r4, r0
 800ac26:	d04b      	beq.n	800acc0 <_reclaim_reent+0xa4>
 800ac28:	69c3      	ldr	r3, [r0, #28]
 800ac2a:	b143      	cbz	r3, 800ac3e <_reclaim_reent+0x22>
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d144      	bne.n	800acbc <_reclaim_reent+0xa0>
 800ac32:	69e3      	ldr	r3, [r4, #28]
 800ac34:	6819      	ldr	r1, [r3, #0]
 800ac36:	b111      	cbz	r1, 800ac3e <_reclaim_reent+0x22>
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f000 f87f 	bl	800ad3c <_free_r>
 800ac3e:	6961      	ldr	r1, [r4, #20]
 800ac40:	b111      	cbz	r1, 800ac48 <_reclaim_reent+0x2c>
 800ac42:	4620      	mov	r0, r4
 800ac44:	f000 f87a 	bl	800ad3c <_free_r>
 800ac48:	69e1      	ldr	r1, [r4, #28]
 800ac4a:	b111      	cbz	r1, 800ac52 <_reclaim_reent+0x36>
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f000 f875 	bl	800ad3c <_free_r>
 800ac52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ac54:	b111      	cbz	r1, 800ac5c <_reclaim_reent+0x40>
 800ac56:	4620      	mov	r0, r4
 800ac58:	f000 f870 	bl	800ad3c <_free_r>
 800ac5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac5e:	b111      	cbz	r1, 800ac66 <_reclaim_reent+0x4a>
 800ac60:	4620      	mov	r0, r4
 800ac62:	f000 f86b 	bl	800ad3c <_free_r>
 800ac66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ac68:	b111      	cbz	r1, 800ac70 <_reclaim_reent+0x54>
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f000 f866 	bl	800ad3c <_free_r>
 800ac70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ac72:	b111      	cbz	r1, 800ac7a <_reclaim_reent+0x5e>
 800ac74:	4620      	mov	r0, r4
 800ac76:	f000 f861 	bl	800ad3c <_free_r>
 800ac7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ac7c:	b111      	cbz	r1, 800ac84 <_reclaim_reent+0x68>
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f000 f85c 	bl	800ad3c <_free_r>
 800ac84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ac86:	b111      	cbz	r1, 800ac8e <_reclaim_reent+0x72>
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 f857 	bl	800ad3c <_free_r>
 800ac8e:	6a23      	ldr	r3, [r4, #32]
 800ac90:	b1b3      	cbz	r3, 800acc0 <_reclaim_reent+0xa4>
 800ac92:	4620      	mov	r0, r4
 800ac94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac98:	4718      	bx	r3
 800ac9a:	5949      	ldr	r1, [r1, r5]
 800ac9c:	b941      	cbnz	r1, 800acb0 <_reclaim_reent+0x94>
 800ac9e:	3504      	adds	r5, #4
 800aca0:	69e3      	ldr	r3, [r4, #28]
 800aca2:	2d80      	cmp	r5, #128	; 0x80
 800aca4:	68d9      	ldr	r1, [r3, #12]
 800aca6:	d1f8      	bne.n	800ac9a <_reclaim_reent+0x7e>
 800aca8:	4620      	mov	r0, r4
 800acaa:	f000 f847 	bl	800ad3c <_free_r>
 800acae:	e7c0      	b.n	800ac32 <_reclaim_reent+0x16>
 800acb0:	680e      	ldr	r6, [r1, #0]
 800acb2:	4620      	mov	r0, r4
 800acb4:	f000 f842 	bl	800ad3c <_free_r>
 800acb8:	4631      	mov	r1, r6
 800acba:	e7ef      	b.n	800ac9c <_reclaim_reent+0x80>
 800acbc:	2500      	movs	r5, #0
 800acbe:	e7ef      	b.n	800aca0 <_reclaim_reent+0x84>
 800acc0:	bd70      	pop	{r4, r5, r6, pc}
 800acc2:	bf00      	nop
 800acc4:	20000060 	.word	0x20000060

0800acc8 <__errno>:
 800acc8:	4b01      	ldr	r3, [pc, #4]	; (800acd0 <__errno+0x8>)
 800acca:	6818      	ldr	r0, [r3, #0]
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	20000060 	.word	0x20000060

0800acd4 <__libc_init_array>:
 800acd4:	b570      	push	{r4, r5, r6, lr}
 800acd6:	4d0d      	ldr	r5, [pc, #52]	; (800ad0c <__libc_init_array+0x38>)
 800acd8:	4c0d      	ldr	r4, [pc, #52]	; (800ad10 <__libc_init_array+0x3c>)
 800acda:	1b64      	subs	r4, r4, r5
 800acdc:	10a4      	asrs	r4, r4, #2
 800acde:	2600      	movs	r6, #0
 800ace0:	42a6      	cmp	r6, r4
 800ace2:	d109      	bne.n	800acf8 <__libc_init_array+0x24>
 800ace4:	4d0b      	ldr	r5, [pc, #44]	; (800ad14 <__libc_init_array+0x40>)
 800ace6:	4c0c      	ldr	r4, [pc, #48]	; (800ad18 <__libc_init_array+0x44>)
 800ace8:	f000 fc6a 	bl	800b5c0 <_init>
 800acec:	1b64      	subs	r4, r4, r5
 800acee:	10a4      	asrs	r4, r4, #2
 800acf0:	2600      	movs	r6, #0
 800acf2:	42a6      	cmp	r6, r4
 800acf4:	d105      	bne.n	800ad02 <__libc_init_array+0x2e>
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
 800acf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800acfc:	4798      	blx	r3
 800acfe:	3601      	adds	r6, #1
 800ad00:	e7ee      	b.n	800ace0 <__libc_init_array+0xc>
 800ad02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad06:	4798      	blx	r3
 800ad08:	3601      	adds	r6, #1
 800ad0a:	e7f2      	b.n	800acf2 <__libc_init_array+0x1e>
 800ad0c:	0800c280 	.word	0x0800c280
 800ad10:	0800c280 	.word	0x0800c280
 800ad14:	0800c280 	.word	0x0800c280
 800ad18:	0800c284 	.word	0x0800c284

0800ad1c <__retarget_lock_acquire_recursive>:
 800ad1c:	4770      	bx	lr

0800ad1e <__retarget_lock_release_recursive>:
 800ad1e:	4770      	bx	lr

0800ad20 <memcpy>:
 800ad20:	440a      	add	r2, r1
 800ad22:	4291      	cmp	r1, r2
 800ad24:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad28:	d100      	bne.n	800ad2c <memcpy+0xc>
 800ad2a:	4770      	bx	lr
 800ad2c:	b510      	push	{r4, lr}
 800ad2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad36:	4291      	cmp	r1, r2
 800ad38:	d1f9      	bne.n	800ad2e <memcpy+0xe>
 800ad3a:	bd10      	pop	{r4, pc}

0800ad3c <_free_r>:
 800ad3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad3e:	2900      	cmp	r1, #0
 800ad40:	d044      	beq.n	800adcc <_free_r+0x90>
 800ad42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad46:	9001      	str	r0, [sp, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad4e:	bfb8      	it	lt
 800ad50:	18e4      	addlt	r4, r4, r3
 800ad52:	f000 f8df 	bl	800af14 <__malloc_lock>
 800ad56:	4a1e      	ldr	r2, [pc, #120]	; (800add0 <_free_r+0x94>)
 800ad58:	9801      	ldr	r0, [sp, #4]
 800ad5a:	6813      	ldr	r3, [r2, #0]
 800ad5c:	b933      	cbnz	r3, 800ad6c <_free_r+0x30>
 800ad5e:	6063      	str	r3, [r4, #4]
 800ad60:	6014      	str	r4, [r2, #0]
 800ad62:	b003      	add	sp, #12
 800ad64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad68:	f000 b8da 	b.w	800af20 <__malloc_unlock>
 800ad6c:	42a3      	cmp	r3, r4
 800ad6e:	d908      	bls.n	800ad82 <_free_r+0x46>
 800ad70:	6825      	ldr	r5, [r4, #0]
 800ad72:	1961      	adds	r1, r4, r5
 800ad74:	428b      	cmp	r3, r1
 800ad76:	bf01      	itttt	eq
 800ad78:	6819      	ldreq	r1, [r3, #0]
 800ad7a:	685b      	ldreq	r3, [r3, #4]
 800ad7c:	1949      	addeq	r1, r1, r5
 800ad7e:	6021      	streq	r1, [r4, #0]
 800ad80:	e7ed      	b.n	800ad5e <_free_r+0x22>
 800ad82:	461a      	mov	r2, r3
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	b10b      	cbz	r3, 800ad8c <_free_r+0x50>
 800ad88:	42a3      	cmp	r3, r4
 800ad8a:	d9fa      	bls.n	800ad82 <_free_r+0x46>
 800ad8c:	6811      	ldr	r1, [r2, #0]
 800ad8e:	1855      	adds	r5, r2, r1
 800ad90:	42a5      	cmp	r5, r4
 800ad92:	d10b      	bne.n	800adac <_free_r+0x70>
 800ad94:	6824      	ldr	r4, [r4, #0]
 800ad96:	4421      	add	r1, r4
 800ad98:	1854      	adds	r4, r2, r1
 800ad9a:	42a3      	cmp	r3, r4
 800ad9c:	6011      	str	r1, [r2, #0]
 800ad9e:	d1e0      	bne.n	800ad62 <_free_r+0x26>
 800ada0:	681c      	ldr	r4, [r3, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	6053      	str	r3, [r2, #4]
 800ada6:	440c      	add	r4, r1
 800ada8:	6014      	str	r4, [r2, #0]
 800adaa:	e7da      	b.n	800ad62 <_free_r+0x26>
 800adac:	d902      	bls.n	800adb4 <_free_r+0x78>
 800adae:	230c      	movs	r3, #12
 800adb0:	6003      	str	r3, [r0, #0]
 800adb2:	e7d6      	b.n	800ad62 <_free_r+0x26>
 800adb4:	6825      	ldr	r5, [r4, #0]
 800adb6:	1961      	adds	r1, r4, r5
 800adb8:	428b      	cmp	r3, r1
 800adba:	bf04      	itt	eq
 800adbc:	6819      	ldreq	r1, [r3, #0]
 800adbe:	685b      	ldreq	r3, [r3, #4]
 800adc0:	6063      	str	r3, [r4, #4]
 800adc2:	bf04      	itt	eq
 800adc4:	1949      	addeq	r1, r1, r5
 800adc6:	6021      	streq	r1, [r4, #0]
 800adc8:	6054      	str	r4, [r2, #4]
 800adca:	e7ca      	b.n	800ad62 <_free_r+0x26>
 800adcc:	b003      	add	sp, #12
 800adce:	bd30      	pop	{r4, r5, pc}
 800add0:	20005244 	.word	0x20005244

0800add4 <sbrk_aligned>:
 800add4:	b570      	push	{r4, r5, r6, lr}
 800add6:	4e0e      	ldr	r6, [pc, #56]	; (800ae10 <sbrk_aligned+0x3c>)
 800add8:	460c      	mov	r4, r1
 800adda:	6831      	ldr	r1, [r6, #0]
 800addc:	4605      	mov	r5, r0
 800adde:	b911      	cbnz	r1, 800ade6 <sbrk_aligned+0x12>
 800ade0:	f000 fba6 	bl	800b530 <_sbrk_r>
 800ade4:	6030      	str	r0, [r6, #0]
 800ade6:	4621      	mov	r1, r4
 800ade8:	4628      	mov	r0, r5
 800adea:	f000 fba1 	bl	800b530 <_sbrk_r>
 800adee:	1c43      	adds	r3, r0, #1
 800adf0:	d00a      	beq.n	800ae08 <sbrk_aligned+0x34>
 800adf2:	1cc4      	adds	r4, r0, #3
 800adf4:	f024 0403 	bic.w	r4, r4, #3
 800adf8:	42a0      	cmp	r0, r4
 800adfa:	d007      	beq.n	800ae0c <sbrk_aligned+0x38>
 800adfc:	1a21      	subs	r1, r4, r0
 800adfe:	4628      	mov	r0, r5
 800ae00:	f000 fb96 	bl	800b530 <_sbrk_r>
 800ae04:	3001      	adds	r0, #1
 800ae06:	d101      	bne.n	800ae0c <sbrk_aligned+0x38>
 800ae08:	f04f 34ff 	mov.w	r4, #4294967295
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	bd70      	pop	{r4, r5, r6, pc}
 800ae10:	20005248 	.word	0x20005248

0800ae14 <_malloc_r>:
 800ae14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae18:	1ccd      	adds	r5, r1, #3
 800ae1a:	f025 0503 	bic.w	r5, r5, #3
 800ae1e:	3508      	adds	r5, #8
 800ae20:	2d0c      	cmp	r5, #12
 800ae22:	bf38      	it	cc
 800ae24:	250c      	movcc	r5, #12
 800ae26:	2d00      	cmp	r5, #0
 800ae28:	4607      	mov	r7, r0
 800ae2a:	db01      	blt.n	800ae30 <_malloc_r+0x1c>
 800ae2c:	42a9      	cmp	r1, r5
 800ae2e:	d905      	bls.n	800ae3c <_malloc_r+0x28>
 800ae30:	230c      	movs	r3, #12
 800ae32:	603b      	str	r3, [r7, #0]
 800ae34:	2600      	movs	r6, #0
 800ae36:	4630      	mov	r0, r6
 800ae38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af10 <_malloc_r+0xfc>
 800ae40:	f000 f868 	bl	800af14 <__malloc_lock>
 800ae44:	f8d8 3000 	ldr.w	r3, [r8]
 800ae48:	461c      	mov	r4, r3
 800ae4a:	bb5c      	cbnz	r4, 800aea4 <_malloc_r+0x90>
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	4638      	mov	r0, r7
 800ae50:	f7ff ffc0 	bl	800add4 <sbrk_aligned>
 800ae54:	1c43      	adds	r3, r0, #1
 800ae56:	4604      	mov	r4, r0
 800ae58:	d155      	bne.n	800af06 <_malloc_r+0xf2>
 800ae5a:	f8d8 4000 	ldr.w	r4, [r8]
 800ae5e:	4626      	mov	r6, r4
 800ae60:	2e00      	cmp	r6, #0
 800ae62:	d145      	bne.n	800aef0 <_malloc_r+0xdc>
 800ae64:	2c00      	cmp	r4, #0
 800ae66:	d048      	beq.n	800aefa <_malloc_r+0xe6>
 800ae68:	6823      	ldr	r3, [r4, #0]
 800ae6a:	4631      	mov	r1, r6
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	eb04 0903 	add.w	r9, r4, r3
 800ae72:	f000 fb5d 	bl	800b530 <_sbrk_r>
 800ae76:	4581      	cmp	r9, r0
 800ae78:	d13f      	bne.n	800aefa <_malloc_r+0xe6>
 800ae7a:	6821      	ldr	r1, [r4, #0]
 800ae7c:	1a6d      	subs	r5, r5, r1
 800ae7e:	4629      	mov	r1, r5
 800ae80:	4638      	mov	r0, r7
 800ae82:	f7ff ffa7 	bl	800add4 <sbrk_aligned>
 800ae86:	3001      	adds	r0, #1
 800ae88:	d037      	beq.n	800aefa <_malloc_r+0xe6>
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	442b      	add	r3, r5
 800ae8e:	6023      	str	r3, [r4, #0]
 800ae90:	f8d8 3000 	ldr.w	r3, [r8]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d038      	beq.n	800af0a <_malloc_r+0xf6>
 800ae98:	685a      	ldr	r2, [r3, #4]
 800ae9a:	42a2      	cmp	r2, r4
 800ae9c:	d12b      	bne.n	800aef6 <_malloc_r+0xe2>
 800ae9e:	2200      	movs	r2, #0
 800aea0:	605a      	str	r2, [r3, #4]
 800aea2:	e00f      	b.n	800aec4 <_malloc_r+0xb0>
 800aea4:	6822      	ldr	r2, [r4, #0]
 800aea6:	1b52      	subs	r2, r2, r5
 800aea8:	d41f      	bmi.n	800aeea <_malloc_r+0xd6>
 800aeaa:	2a0b      	cmp	r2, #11
 800aeac:	d917      	bls.n	800aede <_malloc_r+0xca>
 800aeae:	1961      	adds	r1, r4, r5
 800aeb0:	42a3      	cmp	r3, r4
 800aeb2:	6025      	str	r5, [r4, #0]
 800aeb4:	bf18      	it	ne
 800aeb6:	6059      	strne	r1, [r3, #4]
 800aeb8:	6863      	ldr	r3, [r4, #4]
 800aeba:	bf08      	it	eq
 800aebc:	f8c8 1000 	streq.w	r1, [r8]
 800aec0:	5162      	str	r2, [r4, r5]
 800aec2:	604b      	str	r3, [r1, #4]
 800aec4:	4638      	mov	r0, r7
 800aec6:	f104 060b 	add.w	r6, r4, #11
 800aeca:	f000 f829 	bl	800af20 <__malloc_unlock>
 800aece:	f026 0607 	bic.w	r6, r6, #7
 800aed2:	1d23      	adds	r3, r4, #4
 800aed4:	1af2      	subs	r2, r6, r3
 800aed6:	d0ae      	beq.n	800ae36 <_malloc_r+0x22>
 800aed8:	1b9b      	subs	r3, r3, r6
 800aeda:	50a3      	str	r3, [r4, r2]
 800aedc:	e7ab      	b.n	800ae36 <_malloc_r+0x22>
 800aede:	42a3      	cmp	r3, r4
 800aee0:	6862      	ldr	r2, [r4, #4]
 800aee2:	d1dd      	bne.n	800aea0 <_malloc_r+0x8c>
 800aee4:	f8c8 2000 	str.w	r2, [r8]
 800aee8:	e7ec      	b.n	800aec4 <_malloc_r+0xb0>
 800aeea:	4623      	mov	r3, r4
 800aeec:	6864      	ldr	r4, [r4, #4]
 800aeee:	e7ac      	b.n	800ae4a <_malloc_r+0x36>
 800aef0:	4634      	mov	r4, r6
 800aef2:	6876      	ldr	r6, [r6, #4]
 800aef4:	e7b4      	b.n	800ae60 <_malloc_r+0x4c>
 800aef6:	4613      	mov	r3, r2
 800aef8:	e7cc      	b.n	800ae94 <_malloc_r+0x80>
 800aefa:	230c      	movs	r3, #12
 800aefc:	603b      	str	r3, [r7, #0]
 800aefe:	4638      	mov	r0, r7
 800af00:	f000 f80e 	bl	800af20 <__malloc_unlock>
 800af04:	e797      	b.n	800ae36 <_malloc_r+0x22>
 800af06:	6025      	str	r5, [r4, #0]
 800af08:	e7dc      	b.n	800aec4 <_malloc_r+0xb0>
 800af0a:	605b      	str	r3, [r3, #4]
 800af0c:	deff      	udf	#255	; 0xff
 800af0e:	bf00      	nop
 800af10:	20005244 	.word	0x20005244

0800af14 <__malloc_lock>:
 800af14:	4801      	ldr	r0, [pc, #4]	; (800af1c <__malloc_lock+0x8>)
 800af16:	f7ff bf01 	b.w	800ad1c <__retarget_lock_acquire_recursive>
 800af1a:	bf00      	nop
 800af1c:	20005240 	.word	0x20005240

0800af20 <__malloc_unlock>:
 800af20:	4801      	ldr	r0, [pc, #4]	; (800af28 <__malloc_unlock+0x8>)
 800af22:	f7ff befc 	b.w	800ad1e <__retarget_lock_release_recursive>
 800af26:	bf00      	nop
 800af28:	20005240 	.word	0x20005240

0800af2c <__ssputs_r>:
 800af2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af30:	688e      	ldr	r6, [r1, #8]
 800af32:	461f      	mov	r7, r3
 800af34:	42be      	cmp	r6, r7
 800af36:	680b      	ldr	r3, [r1, #0]
 800af38:	4682      	mov	sl, r0
 800af3a:	460c      	mov	r4, r1
 800af3c:	4690      	mov	r8, r2
 800af3e:	d82c      	bhi.n	800af9a <__ssputs_r+0x6e>
 800af40:	898a      	ldrh	r2, [r1, #12]
 800af42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af46:	d026      	beq.n	800af96 <__ssputs_r+0x6a>
 800af48:	6965      	ldr	r5, [r4, #20]
 800af4a:	6909      	ldr	r1, [r1, #16]
 800af4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af50:	eba3 0901 	sub.w	r9, r3, r1
 800af54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af58:	1c7b      	adds	r3, r7, #1
 800af5a:	444b      	add	r3, r9
 800af5c:	106d      	asrs	r5, r5, #1
 800af5e:	429d      	cmp	r5, r3
 800af60:	bf38      	it	cc
 800af62:	461d      	movcc	r5, r3
 800af64:	0553      	lsls	r3, r2, #21
 800af66:	d527      	bpl.n	800afb8 <__ssputs_r+0x8c>
 800af68:	4629      	mov	r1, r5
 800af6a:	f7ff ff53 	bl	800ae14 <_malloc_r>
 800af6e:	4606      	mov	r6, r0
 800af70:	b360      	cbz	r0, 800afcc <__ssputs_r+0xa0>
 800af72:	6921      	ldr	r1, [r4, #16]
 800af74:	464a      	mov	r2, r9
 800af76:	f7ff fed3 	bl	800ad20 <memcpy>
 800af7a:	89a3      	ldrh	r3, [r4, #12]
 800af7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af84:	81a3      	strh	r3, [r4, #12]
 800af86:	6126      	str	r6, [r4, #16]
 800af88:	6165      	str	r5, [r4, #20]
 800af8a:	444e      	add	r6, r9
 800af8c:	eba5 0509 	sub.w	r5, r5, r9
 800af90:	6026      	str	r6, [r4, #0]
 800af92:	60a5      	str	r5, [r4, #8]
 800af94:	463e      	mov	r6, r7
 800af96:	42be      	cmp	r6, r7
 800af98:	d900      	bls.n	800af9c <__ssputs_r+0x70>
 800af9a:	463e      	mov	r6, r7
 800af9c:	6820      	ldr	r0, [r4, #0]
 800af9e:	4632      	mov	r2, r6
 800afa0:	4641      	mov	r1, r8
 800afa2:	f000 faab 	bl	800b4fc <memmove>
 800afa6:	68a3      	ldr	r3, [r4, #8]
 800afa8:	1b9b      	subs	r3, r3, r6
 800afaa:	60a3      	str	r3, [r4, #8]
 800afac:	6823      	ldr	r3, [r4, #0]
 800afae:	4433      	add	r3, r6
 800afb0:	6023      	str	r3, [r4, #0]
 800afb2:	2000      	movs	r0, #0
 800afb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb8:	462a      	mov	r2, r5
 800afba:	f000 fac9 	bl	800b550 <_realloc_r>
 800afbe:	4606      	mov	r6, r0
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d1e0      	bne.n	800af86 <__ssputs_r+0x5a>
 800afc4:	6921      	ldr	r1, [r4, #16]
 800afc6:	4650      	mov	r0, sl
 800afc8:	f7ff feb8 	bl	800ad3c <_free_r>
 800afcc:	230c      	movs	r3, #12
 800afce:	f8ca 3000 	str.w	r3, [sl]
 800afd2:	89a3      	ldrh	r3, [r4, #12]
 800afd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afd8:	81a3      	strh	r3, [r4, #12]
 800afda:	f04f 30ff 	mov.w	r0, #4294967295
 800afde:	e7e9      	b.n	800afb4 <__ssputs_r+0x88>

0800afe0 <_svfiprintf_r>:
 800afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe4:	4698      	mov	r8, r3
 800afe6:	898b      	ldrh	r3, [r1, #12]
 800afe8:	061b      	lsls	r3, r3, #24
 800afea:	b09d      	sub	sp, #116	; 0x74
 800afec:	4607      	mov	r7, r0
 800afee:	460d      	mov	r5, r1
 800aff0:	4614      	mov	r4, r2
 800aff2:	d50e      	bpl.n	800b012 <_svfiprintf_r+0x32>
 800aff4:	690b      	ldr	r3, [r1, #16]
 800aff6:	b963      	cbnz	r3, 800b012 <_svfiprintf_r+0x32>
 800aff8:	2140      	movs	r1, #64	; 0x40
 800affa:	f7ff ff0b 	bl	800ae14 <_malloc_r>
 800affe:	6028      	str	r0, [r5, #0]
 800b000:	6128      	str	r0, [r5, #16]
 800b002:	b920      	cbnz	r0, 800b00e <_svfiprintf_r+0x2e>
 800b004:	230c      	movs	r3, #12
 800b006:	603b      	str	r3, [r7, #0]
 800b008:	f04f 30ff 	mov.w	r0, #4294967295
 800b00c:	e0d0      	b.n	800b1b0 <_svfiprintf_r+0x1d0>
 800b00e:	2340      	movs	r3, #64	; 0x40
 800b010:	616b      	str	r3, [r5, #20]
 800b012:	2300      	movs	r3, #0
 800b014:	9309      	str	r3, [sp, #36]	; 0x24
 800b016:	2320      	movs	r3, #32
 800b018:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b01c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b020:	2330      	movs	r3, #48	; 0x30
 800b022:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b1c8 <_svfiprintf_r+0x1e8>
 800b026:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b02a:	f04f 0901 	mov.w	r9, #1
 800b02e:	4623      	mov	r3, r4
 800b030:	469a      	mov	sl, r3
 800b032:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b036:	b10a      	cbz	r2, 800b03c <_svfiprintf_r+0x5c>
 800b038:	2a25      	cmp	r2, #37	; 0x25
 800b03a:	d1f9      	bne.n	800b030 <_svfiprintf_r+0x50>
 800b03c:	ebba 0b04 	subs.w	fp, sl, r4
 800b040:	d00b      	beq.n	800b05a <_svfiprintf_r+0x7a>
 800b042:	465b      	mov	r3, fp
 800b044:	4622      	mov	r2, r4
 800b046:	4629      	mov	r1, r5
 800b048:	4638      	mov	r0, r7
 800b04a:	f7ff ff6f 	bl	800af2c <__ssputs_r>
 800b04e:	3001      	adds	r0, #1
 800b050:	f000 80a9 	beq.w	800b1a6 <_svfiprintf_r+0x1c6>
 800b054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b056:	445a      	add	r2, fp
 800b058:	9209      	str	r2, [sp, #36]	; 0x24
 800b05a:	f89a 3000 	ldrb.w	r3, [sl]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f000 80a1 	beq.w	800b1a6 <_svfiprintf_r+0x1c6>
 800b064:	2300      	movs	r3, #0
 800b066:	f04f 32ff 	mov.w	r2, #4294967295
 800b06a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b06e:	f10a 0a01 	add.w	sl, sl, #1
 800b072:	9304      	str	r3, [sp, #16]
 800b074:	9307      	str	r3, [sp, #28]
 800b076:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b07a:	931a      	str	r3, [sp, #104]	; 0x68
 800b07c:	4654      	mov	r4, sl
 800b07e:	2205      	movs	r2, #5
 800b080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b084:	4850      	ldr	r0, [pc, #320]	; (800b1c8 <_svfiprintf_r+0x1e8>)
 800b086:	f7f5 f8a3 	bl	80001d0 <memchr>
 800b08a:	9a04      	ldr	r2, [sp, #16]
 800b08c:	b9d8      	cbnz	r0, 800b0c6 <_svfiprintf_r+0xe6>
 800b08e:	06d0      	lsls	r0, r2, #27
 800b090:	bf44      	itt	mi
 800b092:	2320      	movmi	r3, #32
 800b094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b098:	0711      	lsls	r1, r2, #28
 800b09a:	bf44      	itt	mi
 800b09c:	232b      	movmi	r3, #43	; 0x2b
 800b09e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b0a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b0a8:	d015      	beq.n	800b0d6 <_svfiprintf_r+0xf6>
 800b0aa:	9a07      	ldr	r2, [sp, #28]
 800b0ac:	4654      	mov	r4, sl
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	f04f 0c0a 	mov.w	ip, #10
 800b0b4:	4621      	mov	r1, r4
 800b0b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0ba:	3b30      	subs	r3, #48	; 0x30
 800b0bc:	2b09      	cmp	r3, #9
 800b0be:	d94d      	bls.n	800b15c <_svfiprintf_r+0x17c>
 800b0c0:	b1b0      	cbz	r0, 800b0f0 <_svfiprintf_r+0x110>
 800b0c2:	9207      	str	r2, [sp, #28]
 800b0c4:	e014      	b.n	800b0f0 <_svfiprintf_r+0x110>
 800b0c6:	eba0 0308 	sub.w	r3, r0, r8
 800b0ca:	fa09 f303 	lsl.w	r3, r9, r3
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	9304      	str	r3, [sp, #16]
 800b0d2:	46a2      	mov	sl, r4
 800b0d4:	e7d2      	b.n	800b07c <_svfiprintf_r+0x9c>
 800b0d6:	9b03      	ldr	r3, [sp, #12]
 800b0d8:	1d19      	adds	r1, r3, #4
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	9103      	str	r1, [sp, #12]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	bfbb      	ittet	lt
 800b0e2:	425b      	neglt	r3, r3
 800b0e4:	f042 0202 	orrlt.w	r2, r2, #2
 800b0e8:	9307      	strge	r3, [sp, #28]
 800b0ea:	9307      	strlt	r3, [sp, #28]
 800b0ec:	bfb8      	it	lt
 800b0ee:	9204      	strlt	r2, [sp, #16]
 800b0f0:	7823      	ldrb	r3, [r4, #0]
 800b0f2:	2b2e      	cmp	r3, #46	; 0x2e
 800b0f4:	d10c      	bne.n	800b110 <_svfiprintf_r+0x130>
 800b0f6:	7863      	ldrb	r3, [r4, #1]
 800b0f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b0fa:	d134      	bne.n	800b166 <_svfiprintf_r+0x186>
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	1d1a      	adds	r2, r3, #4
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	9203      	str	r2, [sp, #12]
 800b104:	2b00      	cmp	r3, #0
 800b106:	bfb8      	it	lt
 800b108:	f04f 33ff 	movlt.w	r3, #4294967295
 800b10c:	3402      	adds	r4, #2
 800b10e:	9305      	str	r3, [sp, #20]
 800b110:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b1d8 <_svfiprintf_r+0x1f8>
 800b114:	7821      	ldrb	r1, [r4, #0]
 800b116:	2203      	movs	r2, #3
 800b118:	4650      	mov	r0, sl
 800b11a:	f7f5 f859 	bl	80001d0 <memchr>
 800b11e:	b138      	cbz	r0, 800b130 <_svfiprintf_r+0x150>
 800b120:	9b04      	ldr	r3, [sp, #16]
 800b122:	eba0 000a 	sub.w	r0, r0, sl
 800b126:	2240      	movs	r2, #64	; 0x40
 800b128:	4082      	lsls	r2, r0
 800b12a:	4313      	orrs	r3, r2
 800b12c:	3401      	adds	r4, #1
 800b12e:	9304      	str	r3, [sp, #16]
 800b130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b134:	4825      	ldr	r0, [pc, #148]	; (800b1cc <_svfiprintf_r+0x1ec>)
 800b136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b13a:	2206      	movs	r2, #6
 800b13c:	f7f5 f848 	bl	80001d0 <memchr>
 800b140:	2800      	cmp	r0, #0
 800b142:	d038      	beq.n	800b1b6 <_svfiprintf_r+0x1d6>
 800b144:	4b22      	ldr	r3, [pc, #136]	; (800b1d0 <_svfiprintf_r+0x1f0>)
 800b146:	bb1b      	cbnz	r3, 800b190 <_svfiprintf_r+0x1b0>
 800b148:	9b03      	ldr	r3, [sp, #12]
 800b14a:	3307      	adds	r3, #7
 800b14c:	f023 0307 	bic.w	r3, r3, #7
 800b150:	3308      	adds	r3, #8
 800b152:	9303      	str	r3, [sp, #12]
 800b154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b156:	4433      	add	r3, r6
 800b158:	9309      	str	r3, [sp, #36]	; 0x24
 800b15a:	e768      	b.n	800b02e <_svfiprintf_r+0x4e>
 800b15c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b160:	460c      	mov	r4, r1
 800b162:	2001      	movs	r0, #1
 800b164:	e7a6      	b.n	800b0b4 <_svfiprintf_r+0xd4>
 800b166:	2300      	movs	r3, #0
 800b168:	3401      	adds	r4, #1
 800b16a:	9305      	str	r3, [sp, #20]
 800b16c:	4619      	mov	r1, r3
 800b16e:	f04f 0c0a 	mov.w	ip, #10
 800b172:	4620      	mov	r0, r4
 800b174:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b178:	3a30      	subs	r2, #48	; 0x30
 800b17a:	2a09      	cmp	r2, #9
 800b17c:	d903      	bls.n	800b186 <_svfiprintf_r+0x1a6>
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d0c6      	beq.n	800b110 <_svfiprintf_r+0x130>
 800b182:	9105      	str	r1, [sp, #20]
 800b184:	e7c4      	b.n	800b110 <_svfiprintf_r+0x130>
 800b186:	fb0c 2101 	mla	r1, ip, r1, r2
 800b18a:	4604      	mov	r4, r0
 800b18c:	2301      	movs	r3, #1
 800b18e:	e7f0      	b.n	800b172 <_svfiprintf_r+0x192>
 800b190:	ab03      	add	r3, sp, #12
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	462a      	mov	r2, r5
 800b196:	4b0f      	ldr	r3, [pc, #60]	; (800b1d4 <_svfiprintf_r+0x1f4>)
 800b198:	a904      	add	r1, sp, #16
 800b19a:	4638      	mov	r0, r7
 800b19c:	f3af 8000 	nop.w
 800b1a0:	1c42      	adds	r2, r0, #1
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	d1d6      	bne.n	800b154 <_svfiprintf_r+0x174>
 800b1a6:	89ab      	ldrh	r3, [r5, #12]
 800b1a8:	065b      	lsls	r3, r3, #25
 800b1aa:	f53f af2d 	bmi.w	800b008 <_svfiprintf_r+0x28>
 800b1ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1b0:	b01d      	add	sp, #116	; 0x74
 800b1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b6:	ab03      	add	r3, sp, #12
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	462a      	mov	r2, r5
 800b1bc:	4b05      	ldr	r3, [pc, #20]	; (800b1d4 <_svfiprintf_r+0x1f4>)
 800b1be:	a904      	add	r1, sp, #16
 800b1c0:	4638      	mov	r0, r7
 800b1c2:	f000 f879 	bl	800b2b8 <_printf_i>
 800b1c6:	e7eb      	b.n	800b1a0 <_svfiprintf_r+0x1c0>
 800b1c8:	0800c244 	.word	0x0800c244
 800b1cc:	0800c24e 	.word	0x0800c24e
 800b1d0:	00000000 	.word	0x00000000
 800b1d4:	0800af2d 	.word	0x0800af2d
 800b1d8:	0800c24a 	.word	0x0800c24a

0800b1dc <_printf_common>:
 800b1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e0:	4616      	mov	r6, r2
 800b1e2:	4699      	mov	r9, r3
 800b1e4:	688a      	ldr	r2, [r1, #8]
 800b1e6:	690b      	ldr	r3, [r1, #16]
 800b1e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	bfb8      	it	lt
 800b1f0:	4613      	movlt	r3, r2
 800b1f2:	6033      	str	r3, [r6, #0]
 800b1f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1f8:	4607      	mov	r7, r0
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	b10a      	cbz	r2, 800b202 <_printf_common+0x26>
 800b1fe:	3301      	adds	r3, #1
 800b200:	6033      	str	r3, [r6, #0]
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	0699      	lsls	r1, r3, #26
 800b206:	bf42      	ittt	mi
 800b208:	6833      	ldrmi	r3, [r6, #0]
 800b20a:	3302      	addmi	r3, #2
 800b20c:	6033      	strmi	r3, [r6, #0]
 800b20e:	6825      	ldr	r5, [r4, #0]
 800b210:	f015 0506 	ands.w	r5, r5, #6
 800b214:	d106      	bne.n	800b224 <_printf_common+0x48>
 800b216:	f104 0a19 	add.w	sl, r4, #25
 800b21a:	68e3      	ldr	r3, [r4, #12]
 800b21c:	6832      	ldr	r2, [r6, #0]
 800b21e:	1a9b      	subs	r3, r3, r2
 800b220:	42ab      	cmp	r3, r5
 800b222:	dc26      	bgt.n	800b272 <_printf_common+0x96>
 800b224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b228:	1e13      	subs	r3, r2, #0
 800b22a:	6822      	ldr	r2, [r4, #0]
 800b22c:	bf18      	it	ne
 800b22e:	2301      	movne	r3, #1
 800b230:	0692      	lsls	r2, r2, #26
 800b232:	d42b      	bmi.n	800b28c <_printf_common+0xb0>
 800b234:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b238:	4649      	mov	r1, r9
 800b23a:	4638      	mov	r0, r7
 800b23c:	47c0      	blx	r8
 800b23e:	3001      	adds	r0, #1
 800b240:	d01e      	beq.n	800b280 <_printf_common+0xa4>
 800b242:	6823      	ldr	r3, [r4, #0]
 800b244:	6922      	ldr	r2, [r4, #16]
 800b246:	f003 0306 	and.w	r3, r3, #6
 800b24a:	2b04      	cmp	r3, #4
 800b24c:	bf02      	ittt	eq
 800b24e:	68e5      	ldreq	r5, [r4, #12]
 800b250:	6833      	ldreq	r3, [r6, #0]
 800b252:	1aed      	subeq	r5, r5, r3
 800b254:	68a3      	ldr	r3, [r4, #8]
 800b256:	bf0c      	ite	eq
 800b258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b25c:	2500      	movne	r5, #0
 800b25e:	4293      	cmp	r3, r2
 800b260:	bfc4      	itt	gt
 800b262:	1a9b      	subgt	r3, r3, r2
 800b264:	18ed      	addgt	r5, r5, r3
 800b266:	2600      	movs	r6, #0
 800b268:	341a      	adds	r4, #26
 800b26a:	42b5      	cmp	r5, r6
 800b26c:	d11a      	bne.n	800b2a4 <_printf_common+0xc8>
 800b26e:	2000      	movs	r0, #0
 800b270:	e008      	b.n	800b284 <_printf_common+0xa8>
 800b272:	2301      	movs	r3, #1
 800b274:	4652      	mov	r2, sl
 800b276:	4649      	mov	r1, r9
 800b278:	4638      	mov	r0, r7
 800b27a:	47c0      	blx	r8
 800b27c:	3001      	adds	r0, #1
 800b27e:	d103      	bne.n	800b288 <_printf_common+0xac>
 800b280:	f04f 30ff 	mov.w	r0, #4294967295
 800b284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b288:	3501      	adds	r5, #1
 800b28a:	e7c6      	b.n	800b21a <_printf_common+0x3e>
 800b28c:	18e1      	adds	r1, r4, r3
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	2030      	movs	r0, #48	; 0x30
 800b292:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b296:	4422      	add	r2, r4
 800b298:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b29c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2a0:	3302      	adds	r3, #2
 800b2a2:	e7c7      	b.n	800b234 <_printf_common+0x58>
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	4622      	mov	r2, r4
 800b2a8:	4649      	mov	r1, r9
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	47c0      	blx	r8
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	d0e6      	beq.n	800b280 <_printf_common+0xa4>
 800b2b2:	3601      	adds	r6, #1
 800b2b4:	e7d9      	b.n	800b26a <_printf_common+0x8e>
	...

0800b2b8 <_printf_i>:
 800b2b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2bc:	7e0f      	ldrb	r7, [r1, #24]
 800b2be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2c0:	2f78      	cmp	r7, #120	; 0x78
 800b2c2:	4691      	mov	r9, r2
 800b2c4:	4680      	mov	r8, r0
 800b2c6:	460c      	mov	r4, r1
 800b2c8:	469a      	mov	sl, r3
 800b2ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b2ce:	d807      	bhi.n	800b2e0 <_printf_i+0x28>
 800b2d0:	2f62      	cmp	r7, #98	; 0x62
 800b2d2:	d80a      	bhi.n	800b2ea <_printf_i+0x32>
 800b2d4:	2f00      	cmp	r7, #0
 800b2d6:	f000 80d4 	beq.w	800b482 <_printf_i+0x1ca>
 800b2da:	2f58      	cmp	r7, #88	; 0x58
 800b2dc:	f000 80c0 	beq.w	800b460 <_printf_i+0x1a8>
 800b2e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2e8:	e03a      	b.n	800b360 <_printf_i+0xa8>
 800b2ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2ee:	2b15      	cmp	r3, #21
 800b2f0:	d8f6      	bhi.n	800b2e0 <_printf_i+0x28>
 800b2f2:	a101      	add	r1, pc, #4	; (adr r1, 800b2f8 <_printf_i+0x40>)
 800b2f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2f8:	0800b351 	.word	0x0800b351
 800b2fc:	0800b365 	.word	0x0800b365
 800b300:	0800b2e1 	.word	0x0800b2e1
 800b304:	0800b2e1 	.word	0x0800b2e1
 800b308:	0800b2e1 	.word	0x0800b2e1
 800b30c:	0800b2e1 	.word	0x0800b2e1
 800b310:	0800b365 	.word	0x0800b365
 800b314:	0800b2e1 	.word	0x0800b2e1
 800b318:	0800b2e1 	.word	0x0800b2e1
 800b31c:	0800b2e1 	.word	0x0800b2e1
 800b320:	0800b2e1 	.word	0x0800b2e1
 800b324:	0800b469 	.word	0x0800b469
 800b328:	0800b391 	.word	0x0800b391
 800b32c:	0800b423 	.word	0x0800b423
 800b330:	0800b2e1 	.word	0x0800b2e1
 800b334:	0800b2e1 	.word	0x0800b2e1
 800b338:	0800b48b 	.word	0x0800b48b
 800b33c:	0800b2e1 	.word	0x0800b2e1
 800b340:	0800b391 	.word	0x0800b391
 800b344:	0800b2e1 	.word	0x0800b2e1
 800b348:	0800b2e1 	.word	0x0800b2e1
 800b34c:	0800b42b 	.word	0x0800b42b
 800b350:	682b      	ldr	r3, [r5, #0]
 800b352:	1d1a      	adds	r2, r3, #4
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	602a      	str	r2, [r5, #0]
 800b358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b35c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b360:	2301      	movs	r3, #1
 800b362:	e09f      	b.n	800b4a4 <_printf_i+0x1ec>
 800b364:	6820      	ldr	r0, [r4, #0]
 800b366:	682b      	ldr	r3, [r5, #0]
 800b368:	0607      	lsls	r7, r0, #24
 800b36a:	f103 0104 	add.w	r1, r3, #4
 800b36e:	6029      	str	r1, [r5, #0]
 800b370:	d501      	bpl.n	800b376 <_printf_i+0xbe>
 800b372:	681e      	ldr	r6, [r3, #0]
 800b374:	e003      	b.n	800b37e <_printf_i+0xc6>
 800b376:	0646      	lsls	r6, r0, #25
 800b378:	d5fb      	bpl.n	800b372 <_printf_i+0xba>
 800b37a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b37e:	2e00      	cmp	r6, #0
 800b380:	da03      	bge.n	800b38a <_printf_i+0xd2>
 800b382:	232d      	movs	r3, #45	; 0x2d
 800b384:	4276      	negs	r6, r6
 800b386:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b38a:	485a      	ldr	r0, [pc, #360]	; (800b4f4 <_printf_i+0x23c>)
 800b38c:	230a      	movs	r3, #10
 800b38e:	e012      	b.n	800b3b6 <_printf_i+0xfe>
 800b390:	682b      	ldr	r3, [r5, #0]
 800b392:	6820      	ldr	r0, [r4, #0]
 800b394:	1d19      	adds	r1, r3, #4
 800b396:	6029      	str	r1, [r5, #0]
 800b398:	0605      	lsls	r5, r0, #24
 800b39a:	d501      	bpl.n	800b3a0 <_printf_i+0xe8>
 800b39c:	681e      	ldr	r6, [r3, #0]
 800b39e:	e002      	b.n	800b3a6 <_printf_i+0xee>
 800b3a0:	0641      	lsls	r1, r0, #25
 800b3a2:	d5fb      	bpl.n	800b39c <_printf_i+0xe4>
 800b3a4:	881e      	ldrh	r6, [r3, #0]
 800b3a6:	4853      	ldr	r0, [pc, #332]	; (800b4f4 <_printf_i+0x23c>)
 800b3a8:	2f6f      	cmp	r7, #111	; 0x6f
 800b3aa:	bf0c      	ite	eq
 800b3ac:	2308      	moveq	r3, #8
 800b3ae:	230a      	movne	r3, #10
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3b6:	6865      	ldr	r5, [r4, #4]
 800b3b8:	60a5      	str	r5, [r4, #8]
 800b3ba:	2d00      	cmp	r5, #0
 800b3bc:	bfa2      	ittt	ge
 800b3be:	6821      	ldrge	r1, [r4, #0]
 800b3c0:	f021 0104 	bicge.w	r1, r1, #4
 800b3c4:	6021      	strge	r1, [r4, #0]
 800b3c6:	b90e      	cbnz	r6, 800b3cc <_printf_i+0x114>
 800b3c8:	2d00      	cmp	r5, #0
 800b3ca:	d04b      	beq.n	800b464 <_printf_i+0x1ac>
 800b3cc:	4615      	mov	r5, r2
 800b3ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800b3d2:	fb03 6711 	mls	r7, r3, r1, r6
 800b3d6:	5dc7      	ldrb	r7, [r0, r7]
 800b3d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b3dc:	4637      	mov	r7, r6
 800b3de:	42bb      	cmp	r3, r7
 800b3e0:	460e      	mov	r6, r1
 800b3e2:	d9f4      	bls.n	800b3ce <_printf_i+0x116>
 800b3e4:	2b08      	cmp	r3, #8
 800b3e6:	d10b      	bne.n	800b400 <_printf_i+0x148>
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	07de      	lsls	r6, r3, #31
 800b3ec:	d508      	bpl.n	800b400 <_printf_i+0x148>
 800b3ee:	6923      	ldr	r3, [r4, #16]
 800b3f0:	6861      	ldr	r1, [r4, #4]
 800b3f2:	4299      	cmp	r1, r3
 800b3f4:	bfde      	ittt	le
 800b3f6:	2330      	movle	r3, #48	; 0x30
 800b3f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b400:	1b52      	subs	r2, r2, r5
 800b402:	6122      	str	r2, [r4, #16]
 800b404:	f8cd a000 	str.w	sl, [sp]
 800b408:	464b      	mov	r3, r9
 800b40a:	aa03      	add	r2, sp, #12
 800b40c:	4621      	mov	r1, r4
 800b40e:	4640      	mov	r0, r8
 800b410:	f7ff fee4 	bl	800b1dc <_printf_common>
 800b414:	3001      	adds	r0, #1
 800b416:	d14a      	bne.n	800b4ae <_printf_i+0x1f6>
 800b418:	f04f 30ff 	mov.w	r0, #4294967295
 800b41c:	b004      	add	sp, #16
 800b41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	f043 0320 	orr.w	r3, r3, #32
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	4833      	ldr	r0, [pc, #204]	; (800b4f8 <_printf_i+0x240>)
 800b42c:	2778      	movs	r7, #120	; 0x78
 800b42e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	6829      	ldr	r1, [r5, #0]
 800b436:	061f      	lsls	r7, r3, #24
 800b438:	f851 6b04 	ldr.w	r6, [r1], #4
 800b43c:	d402      	bmi.n	800b444 <_printf_i+0x18c>
 800b43e:	065f      	lsls	r7, r3, #25
 800b440:	bf48      	it	mi
 800b442:	b2b6      	uxthmi	r6, r6
 800b444:	07df      	lsls	r7, r3, #31
 800b446:	bf48      	it	mi
 800b448:	f043 0320 	orrmi.w	r3, r3, #32
 800b44c:	6029      	str	r1, [r5, #0]
 800b44e:	bf48      	it	mi
 800b450:	6023      	strmi	r3, [r4, #0]
 800b452:	b91e      	cbnz	r6, 800b45c <_printf_i+0x1a4>
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	f023 0320 	bic.w	r3, r3, #32
 800b45a:	6023      	str	r3, [r4, #0]
 800b45c:	2310      	movs	r3, #16
 800b45e:	e7a7      	b.n	800b3b0 <_printf_i+0xf8>
 800b460:	4824      	ldr	r0, [pc, #144]	; (800b4f4 <_printf_i+0x23c>)
 800b462:	e7e4      	b.n	800b42e <_printf_i+0x176>
 800b464:	4615      	mov	r5, r2
 800b466:	e7bd      	b.n	800b3e4 <_printf_i+0x12c>
 800b468:	682b      	ldr	r3, [r5, #0]
 800b46a:	6826      	ldr	r6, [r4, #0]
 800b46c:	6961      	ldr	r1, [r4, #20]
 800b46e:	1d18      	adds	r0, r3, #4
 800b470:	6028      	str	r0, [r5, #0]
 800b472:	0635      	lsls	r5, r6, #24
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	d501      	bpl.n	800b47c <_printf_i+0x1c4>
 800b478:	6019      	str	r1, [r3, #0]
 800b47a:	e002      	b.n	800b482 <_printf_i+0x1ca>
 800b47c:	0670      	lsls	r0, r6, #25
 800b47e:	d5fb      	bpl.n	800b478 <_printf_i+0x1c0>
 800b480:	8019      	strh	r1, [r3, #0]
 800b482:	2300      	movs	r3, #0
 800b484:	6123      	str	r3, [r4, #16]
 800b486:	4615      	mov	r5, r2
 800b488:	e7bc      	b.n	800b404 <_printf_i+0x14c>
 800b48a:	682b      	ldr	r3, [r5, #0]
 800b48c:	1d1a      	adds	r2, r3, #4
 800b48e:	602a      	str	r2, [r5, #0]
 800b490:	681d      	ldr	r5, [r3, #0]
 800b492:	6862      	ldr	r2, [r4, #4]
 800b494:	2100      	movs	r1, #0
 800b496:	4628      	mov	r0, r5
 800b498:	f7f4 fe9a 	bl	80001d0 <memchr>
 800b49c:	b108      	cbz	r0, 800b4a2 <_printf_i+0x1ea>
 800b49e:	1b40      	subs	r0, r0, r5
 800b4a0:	6060      	str	r0, [r4, #4]
 800b4a2:	6863      	ldr	r3, [r4, #4]
 800b4a4:	6123      	str	r3, [r4, #16]
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4ac:	e7aa      	b.n	800b404 <_printf_i+0x14c>
 800b4ae:	6923      	ldr	r3, [r4, #16]
 800b4b0:	462a      	mov	r2, r5
 800b4b2:	4649      	mov	r1, r9
 800b4b4:	4640      	mov	r0, r8
 800b4b6:	47d0      	blx	sl
 800b4b8:	3001      	adds	r0, #1
 800b4ba:	d0ad      	beq.n	800b418 <_printf_i+0x160>
 800b4bc:	6823      	ldr	r3, [r4, #0]
 800b4be:	079b      	lsls	r3, r3, #30
 800b4c0:	d413      	bmi.n	800b4ea <_printf_i+0x232>
 800b4c2:	68e0      	ldr	r0, [r4, #12]
 800b4c4:	9b03      	ldr	r3, [sp, #12]
 800b4c6:	4298      	cmp	r0, r3
 800b4c8:	bfb8      	it	lt
 800b4ca:	4618      	movlt	r0, r3
 800b4cc:	e7a6      	b.n	800b41c <_printf_i+0x164>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	4632      	mov	r2, r6
 800b4d2:	4649      	mov	r1, r9
 800b4d4:	4640      	mov	r0, r8
 800b4d6:	47d0      	blx	sl
 800b4d8:	3001      	adds	r0, #1
 800b4da:	d09d      	beq.n	800b418 <_printf_i+0x160>
 800b4dc:	3501      	adds	r5, #1
 800b4de:	68e3      	ldr	r3, [r4, #12]
 800b4e0:	9903      	ldr	r1, [sp, #12]
 800b4e2:	1a5b      	subs	r3, r3, r1
 800b4e4:	42ab      	cmp	r3, r5
 800b4e6:	dcf2      	bgt.n	800b4ce <_printf_i+0x216>
 800b4e8:	e7eb      	b.n	800b4c2 <_printf_i+0x20a>
 800b4ea:	2500      	movs	r5, #0
 800b4ec:	f104 0619 	add.w	r6, r4, #25
 800b4f0:	e7f5      	b.n	800b4de <_printf_i+0x226>
 800b4f2:	bf00      	nop
 800b4f4:	0800c255 	.word	0x0800c255
 800b4f8:	0800c266 	.word	0x0800c266

0800b4fc <memmove>:
 800b4fc:	4288      	cmp	r0, r1
 800b4fe:	b510      	push	{r4, lr}
 800b500:	eb01 0402 	add.w	r4, r1, r2
 800b504:	d902      	bls.n	800b50c <memmove+0x10>
 800b506:	4284      	cmp	r4, r0
 800b508:	4623      	mov	r3, r4
 800b50a:	d807      	bhi.n	800b51c <memmove+0x20>
 800b50c:	1e43      	subs	r3, r0, #1
 800b50e:	42a1      	cmp	r1, r4
 800b510:	d008      	beq.n	800b524 <memmove+0x28>
 800b512:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b516:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b51a:	e7f8      	b.n	800b50e <memmove+0x12>
 800b51c:	4402      	add	r2, r0
 800b51e:	4601      	mov	r1, r0
 800b520:	428a      	cmp	r2, r1
 800b522:	d100      	bne.n	800b526 <memmove+0x2a>
 800b524:	bd10      	pop	{r4, pc}
 800b526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b52a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b52e:	e7f7      	b.n	800b520 <memmove+0x24>

0800b530 <_sbrk_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	4d06      	ldr	r5, [pc, #24]	; (800b54c <_sbrk_r+0x1c>)
 800b534:	2300      	movs	r3, #0
 800b536:	4604      	mov	r4, r0
 800b538:	4608      	mov	r0, r1
 800b53a:	602b      	str	r3, [r5, #0]
 800b53c:	f7f7 fd8a 	bl	8003054 <_sbrk>
 800b540:	1c43      	adds	r3, r0, #1
 800b542:	d102      	bne.n	800b54a <_sbrk_r+0x1a>
 800b544:	682b      	ldr	r3, [r5, #0]
 800b546:	b103      	cbz	r3, 800b54a <_sbrk_r+0x1a>
 800b548:	6023      	str	r3, [r4, #0]
 800b54a:	bd38      	pop	{r3, r4, r5, pc}
 800b54c:	2000523c 	.word	0x2000523c

0800b550 <_realloc_r>:
 800b550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b554:	4680      	mov	r8, r0
 800b556:	4614      	mov	r4, r2
 800b558:	460e      	mov	r6, r1
 800b55a:	b921      	cbnz	r1, 800b566 <_realloc_r+0x16>
 800b55c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b560:	4611      	mov	r1, r2
 800b562:	f7ff bc57 	b.w	800ae14 <_malloc_r>
 800b566:	b92a      	cbnz	r2, 800b574 <_realloc_r+0x24>
 800b568:	f7ff fbe8 	bl	800ad3c <_free_r>
 800b56c:	4625      	mov	r5, r4
 800b56e:	4628      	mov	r0, r5
 800b570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b574:	f000 f81b 	bl	800b5ae <_malloc_usable_size_r>
 800b578:	4284      	cmp	r4, r0
 800b57a:	4607      	mov	r7, r0
 800b57c:	d802      	bhi.n	800b584 <_realloc_r+0x34>
 800b57e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b582:	d812      	bhi.n	800b5aa <_realloc_r+0x5a>
 800b584:	4621      	mov	r1, r4
 800b586:	4640      	mov	r0, r8
 800b588:	f7ff fc44 	bl	800ae14 <_malloc_r>
 800b58c:	4605      	mov	r5, r0
 800b58e:	2800      	cmp	r0, #0
 800b590:	d0ed      	beq.n	800b56e <_realloc_r+0x1e>
 800b592:	42bc      	cmp	r4, r7
 800b594:	4622      	mov	r2, r4
 800b596:	4631      	mov	r1, r6
 800b598:	bf28      	it	cs
 800b59a:	463a      	movcs	r2, r7
 800b59c:	f7ff fbc0 	bl	800ad20 <memcpy>
 800b5a0:	4631      	mov	r1, r6
 800b5a2:	4640      	mov	r0, r8
 800b5a4:	f7ff fbca 	bl	800ad3c <_free_r>
 800b5a8:	e7e1      	b.n	800b56e <_realloc_r+0x1e>
 800b5aa:	4635      	mov	r5, r6
 800b5ac:	e7df      	b.n	800b56e <_realloc_r+0x1e>

0800b5ae <_malloc_usable_size_r>:
 800b5ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5b2:	1f18      	subs	r0, r3, #4
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	bfbc      	itt	lt
 800b5b8:	580b      	ldrlt	r3, [r1, r0]
 800b5ba:	18c0      	addlt	r0, r0, r3
 800b5bc:	4770      	bx	lr
	...

0800b5c0 <_init>:
 800b5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c2:	bf00      	nop
 800b5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5c6:	bc08      	pop	{r3}
 800b5c8:	469e      	mov	lr, r3
 800b5ca:	4770      	bx	lr

0800b5cc <_fini>:
 800b5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ce:	bf00      	nop
 800b5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5d2:	bc08      	pop	{r3}
 800b5d4:	469e      	mov	lr, r3
 800b5d6:	4770      	bx	lr
