
MDP28task2Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d38  0800da60  0800da60  0001da60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e798  0800e798  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800e798  0800e798  0001e798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7a0  0800e7a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7a0  0800e7a0  0001e7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7a4  0800e7a4  0001e7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800e7a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000052a4  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000531c  2000531c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001db76  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c29  00000000  00000000  0003dc61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a58  00000000  00000000  00041890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014b2  00000000  00000000  000432e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000411b  00000000  00000000  0004479a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e4fe  00000000  00000000  000488b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e507b  00000000  00000000  00066db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007aa0  00000000  00000000  0014be30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  001538d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da48 	.word	0x0800da48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800da48 	.word	0x0800da48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <main>:
float voltage1, voltage2 = 0;
int irDistance1, irDistance2 = 0;
uint32_t ADC_VAL1,ADC_VAL2 = 0;

int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f78:	f003 f9f8 	bl	800436c <HAL_Init>
	SystemClock_Config();
 8000f7c:	f000 f8b0 	bl	80010e0 <SystemClock_Config>
	MX_GPIO_Init();
 8000f80:	f000 fc4c 	bl	800181c <MX_GPIO_Init>
	MX_I2C1_Init();
 8000f84:	f000 f9ae 	bl	80012e4 <MX_I2C1_Init>
	MX_TIM1_Init();
 8000f88:	f000 f9da 	bl	8001340 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000f8c:	f000 fa76 	bl	800147c <MX_TIM2_Init>
	MX_TIM3_Init();
 8000f90:	f000 fac8 	bl	8001524 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000f94:	f000 fb1a 	bl	80015cc <MX_TIM4_Init>
	MX_TIM8_Init();
 8000f98:	f000 fb6c 	bl	8001674 <MX_TIM8_Init>
	MX_USART3_UART_Init();
 8000f9c:	f000 fc14 	bl	80017c8 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8000fa0:	f000 f8fc 	bl	800119c <MX_ADC1_Init>
	MX_ADC2_Init();
 8000fa4:	f000 f94c 	bl	8001240 <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 8000fa8:	f003 f954 	bl	8004254 <OLED_Init>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 5);
 8000fac:	2205      	movs	r2, #5
 8000fae:	492c      	ldr	r1, [pc, #176]	; (8001060 <main+0xec>)
 8000fb0:	482c      	ldr	r0, [pc, #176]	; (8001064 <main+0xf0>)
 8000fb2:	f007 fbac 	bl	800870e <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000fb6:	f008 fb77 	bl	80096a8 <osKernelInitialize>
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fba:	4a2b      	ldr	r2, [pc, #172]	; (8001068 <main+0xf4>)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	482b      	ldr	r0, [pc, #172]	; (800106c <main+0xf8>)
 8000fc0:	f008 fbbc 	bl	800973c <osThreadNew>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4a2a      	ldr	r2, [pc, #168]	; (8001070 <main+0xfc>)
 8000fc8:	6013      	str	r3, [r2, #0]
	/* creation of motorTask */
	motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000fca:	4a2a      	ldr	r2, [pc, #168]	; (8001074 <main+0x100>)
 8000fcc:	2100      	movs	r1, #0
 8000fce:	482a      	ldr	r0, [pc, #168]	; (8001078 <main+0x104>)
 8000fd0:	f008 fbb4 	bl	800973c <osThreadNew>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a29      	ldr	r2, [pc, #164]	; (800107c <main+0x108>)
 8000fd8:	6013      	str	r3, [r2, #0]
	/* creation of OLEDTask */
	OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000fda:	4a29      	ldr	r2, [pc, #164]	; (8001080 <main+0x10c>)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4829      	ldr	r0, [pc, #164]	; (8001084 <main+0x110>)
 8000fe0:	f008 fbac 	bl	800973c <osThreadNew>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a28      	ldr	r2, [pc, #160]	; (8001088 <main+0x114>)
 8000fe8:	6013      	str	r3, [r2, #0]
	/* creation of gyroTask */
	gyroTaskHandle = osThreadNew(StartGyroTask, NULL, &gyroTask_attributes);
 8000fea:	4a28      	ldr	r2, [pc, #160]	; (800108c <main+0x118>)
 8000fec:	2100      	movs	r1, #0
 8000fee:	4828      	ldr	r0, [pc, #160]	; (8001090 <main+0x11c>)
 8000ff0:	f008 fba4 	bl	800973c <osThreadNew>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a27      	ldr	r2, [pc, #156]	; (8001094 <main+0x120>)
 8000ff8:	6013      	str	r3, [r2, #0]
	/* creation of ultrasonicTask */
	ultrasonicTaskHandle = osThreadNew(StartUltrasonicTask, NULL, &ultrasonicTask_attributes);
 8000ffa:	4a27      	ldr	r2, [pc, #156]	; (8001098 <main+0x124>)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4827      	ldr	r0, [pc, #156]	; (800109c <main+0x128>)
 8001000:	f008 fb9c 	bl	800973c <osThreadNew>
 8001004:	4603      	mov	r3, r0
 8001006:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <main+0x12c>)
 8001008:	6013      	str	r3, [r2, #0]
	/* creation of communicateTask */
	communicateTaskHandle = osThreadNew(StartCommunicateTask, NULL, &communicateTask_attributes);
 800100a:	4a26      	ldr	r2, [pc, #152]	; (80010a4 <main+0x130>)
 800100c:	2100      	movs	r1, #0
 800100e:	4826      	ldr	r0, [pc, #152]	; (80010a8 <main+0x134>)
 8001010:	f008 fb94 	bl	800973c <osThreadNew>
 8001014:	4603      	mov	r3, r0
 8001016:	4a25      	ldr	r2, [pc, #148]	; (80010ac <main+0x138>)
 8001018:	6013      	str	r3, [r2, #0]
	/* creation of encoderRTask */
	encoderRTaskHandle = osThreadNew(StartEncoderRTask, NULL, &encoderRTask_attributes);
 800101a:	4a25      	ldr	r2, [pc, #148]	; (80010b0 <main+0x13c>)
 800101c:	2100      	movs	r1, #0
 800101e:	4825      	ldr	r0, [pc, #148]	; (80010b4 <main+0x140>)
 8001020:	f008 fb8c 	bl	800973c <osThreadNew>
 8001024:	4603      	mov	r3, r0
 8001026:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <main+0x144>)
 8001028:	6013      	str	r3, [r2, #0]
	/* creation of encoderLTask */
	encoderLTaskHandle = osThreadNew(StartEncoderLTask, NULL, &encoderLTask_attributes);
 800102a:	4a24      	ldr	r2, [pc, #144]	; (80010bc <main+0x148>)
 800102c:	2100      	movs	r1, #0
 800102e:	4824      	ldr	r0, [pc, #144]	; (80010c0 <main+0x14c>)
 8001030:	f008 fb84 	bl	800973c <osThreadNew>
 8001034:	4603      	mov	r3, r0
 8001036:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <main+0x150>)
 8001038:	6013      	str	r3, [r2, #0]
	/* creation of Task2Handle */
	Task2HandleHandle = osThreadNew(StartTask2, NULL, &Task2Handle_attributes);
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <main+0x154>)
 800103c:	2100      	movs	r1, #0
 800103e:	4823      	ldr	r0, [pc, #140]	; (80010cc <main+0x158>)
 8001040:	f008 fb7c 	bl	800973c <osThreadNew>
 8001044:	4603      	mov	r3, r0
 8001046:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <main+0x15c>)
 8001048:	6013      	str	r3, [r2, #0]
	/* creation of IRTaskHandle */
	IRTaskHandleHandle = osThreadNew(StartIRTask, NULL, &IRTaskHandle_attributes);
 800104a:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <main+0x160>)
 800104c:	2100      	movs	r1, #0
 800104e:	4822      	ldr	r0, [pc, #136]	; (80010d8 <main+0x164>)
 8001050:	f008 fb74 	bl	800973c <osThreadNew>
 8001054:	4603      	mov	r3, r0
 8001056:	4a21      	ldr	r2, [pc, #132]	; (80010dc <main+0x168>)
 8001058:	6013      	str	r3, [r2, #0]
	osKernelStart();
 800105a:	f008 fb49 	bl	80096f0 <osKernelStart>
	while (1) {
 800105e:	e7fe      	b.n	800105e <main+0xea>
 8001060:	2000034c 	.word	0x2000034c
 8001064:	200002e0 	.word	0x200002e0
 8001068:	0800db50 	.word	0x0800db50
 800106c:	08002415 	.word	0x08002415
 8001070:	20000324 	.word	0x20000324
 8001074:	0800db74 	.word	0x0800db74
 8001078:	08002439 	.word	0x08002439
 800107c:	20000328 	.word	0x20000328
 8001080:	0800db98 	.word	0x0800db98
 8001084:	08002c19 	.word	0x08002c19
 8001088:	2000032c 	.word	0x2000032c
 800108c:	0800dbbc 	.word	0x0800dbbc
 8001090:	08002dc1 	.word	0x08002dc1
 8001094:	20000330 	.word	0x20000330
 8001098:	0800dbe0 	.word	0x0800dbe0
 800109c:	08002f71 	.word	0x08002f71
 80010a0:	20000334 	.word	0x20000334
 80010a4:	0800dc04 	.word	0x0800dc04
 80010a8:	08002f99 	.word	0x08002f99
 80010ac:	20000338 	.word	0x20000338
 80010b0:	0800dc28 	.word	0x0800dc28
 80010b4:	08002fcd 	.word	0x08002fcd
 80010b8:	2000033c 	.word	0x2000033c
 80010bc:	0800dc4c 	.word	0x0800dc4c
 80010c0:	08003055 	.word	0x08003055
 80010c4:	20000340 	.word	0x20000340
 80010c8:	0800dc70 	.word	0x0800dc70
 80010cc:	08003149 	.word	0x08003149
 80010d0:	20000344 	.word	0x20000344
 80010d4:	0800dc94 	.word	0x0800dc94
 80010d8:	08003639 	.word	0x08003639
 80010dc:	20000348 	.word	0x20000348

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b094      	sub	sp, #80	; 0x50
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0320 	add.w	r3, r7, #32
 80010ea:	2230      	movs	r2, #48	; 0x30
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00b f874 	bl	800c1dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <SystemClock_Config+0xb4>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	4a21      	ldr	r2, [pc, #132]	; (8001194 <SystemClock_Config+0xb4>)
 800110e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001112:	6413      	str	r3, [r2, #64]	; 0x40
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <SystemClock_Config+0xb4>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <SystemClock_Config+0xb8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <SystemClock_Config+0xb8>)
 800112a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <SystemClock_Config+0xb8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113c:	2302      	movs	r3, #2
 800113e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001140:	2301      	movs	r3, #1
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001144:	2310      	movs	r3, #16
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001148:	2300      	movs	r3, #0
 800114a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f005 f8d3 	bl	80062fc <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800115c:	f002 fb26 	bl	80037ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f005 fb36 	bl	80067ec <HAL_RCC_ClockConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001186:	f002 fb11 	bl	80037ac <Error_Handler>
  }
}
 800118a:	bf00      	nop
 800118c:	3750      	adds	r7, #80	; 0x50
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40007000 	.word	0x40007000

0800119c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a2:	463b      	mov	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <MX_ADC1_Init+0x98>)
 80011b0:	4a21      	ldr	r2, [pc, #132]	; (8001238 <MX_ADC1_Init+0x9c>)
 80011b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_ADC1_Init+0x98>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <MX_ADC1_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_ADC1_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_ADC1_Init+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_ADC1_Init+0x98>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_ADC1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <MX_ADC1_Init+0x98>)
 80011dc:	4a17      	ldr	r2, [pc, #92]	; (800123c <MX_ADC1_Init+0xa0>)
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_ADC1_Init+0x98>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_ADC1_Init+0x98>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_ADC1_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_ADC1_Init+0x98>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011fa:	480e      	ldr	r0, [pc, #56]	; (8001234 <MX_ADC1_Init+0x98>)
 80011fc:	f003 f94c 	bl	8004498 <HAL_ADC_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001206:	f002 fad1 	bl	80037ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800120a:	230b      	movs	r3, #11
 800120c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800120e:	2301      	movs	r3, #1
 8001210:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	4619      	mov	r1, r3
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <MX_ADC1_Init+0x98>)
 800121c:	f003 fb1e 	bl	800485c <HAL_ADC_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001226:	f002 fac1 	bl	80037ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000094 	.word	0x20000094
 8001238:	40012000 	.word	0x40012000
 800123c:	0f000001 	.word	0x0f000001

08001240 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <MX_ADC2_Init+0x98>)
 8001254:	4a21      	ldr	r2, [pc, #132]	; (80012dc <MX_ADC2_Init+0x9c>)
 8001256:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <MX_ADC2_Init+0x98>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800125e:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <MX_ADC2_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <MX_ADC2_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_ADC2_Init+0x98>)
 800126c:	2200      	movs	r2, #0
 800126e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MX_ADC2_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_ADC2_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_ADC2_Init+0x98>)
 8001280:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <MX_ADC2_Init+0xa0>)
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_ADC2_Init+0x98>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_ADC2_Init+0x98>)
 800128c:	2201      	movs	r2, #1
 800128e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_ADC2_Init+0x98>)
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_ADC2_Init+0x98>)
 800129a:	2201      	movs	r2, #1
 800129c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800129e:	480e      	ldr	r0, [pc, #56]	; (80012d8 <MX_ADC2_Init+0x98>)
 80012a0:	f003 f8fa 	bl	8004498 <HAL_ADC_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80012aa:	f002 fa7f 	bl	80037ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012ae:	230c      	movs	r3, #12
 80012b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <MX_ADC2_Init+0x98>)
 80012c0:	f003 facc 	bl	800485c <HAL_ADC_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80012ca:	f002 fa6f 	bl	80037ac <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200000dc 	.word	0x200000dc
 80012dc:	40012100 	.word	0x40012100
 80012e0:	0f000001 	.word	0x0f000001

080012e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_I2C1_Init+0x50>)
 80012ea:	4a13      	ldr	r2, [pc, #76]	; (8001338 <MX_I2C1_Init+0x54>)
 80012ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_I2C1_Init+0x50>)
 80012f0:	4a12      	ldr	r2, [pc, #72]	; (800133c <MX_I2C1_Init+0x58>)
 80012f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_I2C1_Init+0x50>)
 8001302:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001306:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <MX_I2C1_Init+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_I2C1_Init+0x50>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_I2C1_Init+0x50>)
 8001322:	f004 f82d 	bl	8005380 <HAL_I2C_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800132c:	f002 fa3e 	bl	80037ac <Error_Handler>
  }
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000124 	.word	0x20000124
 8001338:	40005400 	.word	0x40005400
 800133c:	000186a0 	.word	0x000186a0

08001340 <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b096      	sub	sp, #88	; 0x58
 8001344:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
 800136e:	615a      	str	r2, [r3, #20]
 8001370:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2220      	movs	r2, #32
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f00a ff2f 	bl	800c1dc <memset>
  htim1.Instance = TIM1;
 800137e:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <MX_TIM1_Init+0x134>)
 8001380:	4a3d      	ldr	r2, [pc, #244]	; (8001478 <MX_TIM1_Init+0x138>)
 8001382:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001384:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <MX_TIM1_Init+0x134>)
 8001386:	22a0      	movs	r2, #160	; 0xa0
 8001388:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <MX_TIM1_Init+0x134>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001390:	4b38      	ldr	r3, [pc, #224]	; (8001474 <MX_TIM1_Init+0x134>)
 8001392:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001396:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b36      	ldr	r3, [pc, #216]	; (8001474 <MX_TIM1_Init+0x134>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800139e:	4b35      	ldr	r3, [pc, #212]	; (8001474 <MX_TIM1_Init+0x134>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013a4:	4b33      	ldr	r3, [pc, #204]	; (8001474 <MX_TIM1_Init+0x134>)
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013aa:	4832      	ldr	r0, [pc, #200]	; (8001474 <MX_TIM1_Init+0x134>)
 80013ac:	f005 fbfe 	bl	8006bac <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013b6:	f002 f9f9 	bl	80037ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013c4:	4619      	mov	r1, r3
 80013c6:	482b      	ldr	r0, [pc, #172]	; (8001474 <MX_TIM1_Init+0x134>)
 80013c8:	f006 fa72 	bl	80078b0 <HAL_TIM_ConfigClockSource>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013d2:	f002 f9eb 	bl	80037ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013d6:	4827      	ldr	r0, [pc, #156]	; (8001474 <MX_TIM1_Init+0x134>)
 80013d8:	f005 fc37 	bl	8006c4a <HAL_TIM_PWM_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013e2:	f002 f9e3 	bl	80037ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013f2:	4619      	mov	r1, r3
 80013f4:	481f      	ldr	r0, [pc, #124]	; (8001474 <MX_TIM1_Init+0x134>)
 80013f6:	f006 ffc9 	bl	800838c <HAL_TIMEx_MasterConfigSynchronization>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001400:	f002 f9d4 	bl	80037ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001404:	2360      	movs	r3, #96	; 0x60
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	220c      	movs	r2, #12
 8001422:	4619      	mov	r1, r3
 8001424:	4813      	ldr	r0, [pc, #76]	; (8001474 <MX_TIM1_Init+0x134>)
 8001426:	f006 f981 	bl	800772c <HAL_TIM_PWM_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001430:	f002 f9bc 	bl	80037ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4807      	ldr	r0, [pc, #28]	; (8001474 <MX_TIM1_Init+0x134>)
 8001458:	f007 f814 	bl	8008484 <HAL_TIMEx_ConfigBreakDeadTime>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001462:	f002 f9a3 	bl	80037ac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <MX_TIM1_Init+0x134>)
 8001468:	f002 fbf6 	bl	8003c58 <HAL_TIM_MspPostInit>
}
 800146c:	bf00      	nop
 800146e:	3758      	adds	r7, #88	; 0x58
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000178 	.word	0x20000178
 8001478:	40010000 	.word	0x40010000

0800147c <MX_TIM2_Init>:

// ! @brief TIM2 Initialization Function
static void MX_TIM2_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	2224      	movs	r2, #36	; 0x24
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f00a fea6 	bl	800c1dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
  htim2.Instance = TIM2;
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MX_TIM2_Init+0xa4>)
 800149a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800149e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <MX_TIM2_Init+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_TIM2_Init+0xa4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_TIM2_Init+0xa4>)
 80014ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_TIM2_Init+0xa4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_TIM2_Init+0xa4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014c0:	2303      	movs	r3, #3
 80014c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014c8:	2301      	movs	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014d0:	230a      	movs	r3, #10
 80014d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014d8:	2301      	movs	r3, #1
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80014e0:	230a      	movs	r3, #10
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <MX_TIM2_Init+0xa4>)
 80014ec:	f005 fe46 	bl	800717c <HAL_TIM_Encoder_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014f6:	f002 f959 	bl	80037ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <MX_TIM2_Init+0xa4>)
 8001508:	f006 ff40 	bl	800838c <HAL_TIMEx_MasterConfigSynchronization>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001512:	f002 f94b 	bl	80037ac <Error_Handler>
  }
}
 8001516:	bf00      	nop
 8001518:	3730      	adds	r7, #48	; 0x30
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200001c0 	.word	0x200001c0

08001524 <MX_TIM3_Init>:

// ! @brief TIM3 Initialization Function
static void MX_TIM3_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	2224      	movs	r2, #36	; 0x24
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f00a fe52 	bl	800c1dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
  htim3.Instance = TIM3;
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <MX_TIM3_Init+0xa0>)
 8001542:	4a21      	ldr	r2, [pc, #132]	; (80015c8 <MX_TIM3_Init+0xa4>)
 8001544:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <MX_TIM3_Init+0xa0>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <MX_TIM3_Init+0xa0>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <MX_TIM3_Init+0xa0>)
 8001554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001558:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <MX_TIM3_Init+0xa0>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <MX_TIM3_Init+0xa0>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001566:	2303      	movs	r3, #3
 8001568:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800156e:	2301      	movs	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001576:	230a      	movs	r3, #10
 8001578:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800157e:	2301      	movs	r3, #1
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001586:	230a      	movs	r3, #10
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	4619      	mov	r1, r3
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <MX_TIM3_Init+0xa0>)
 8001592:	f005 fdf3 	bl	800717c <HAL_TIM_Encoder_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800159c:	f002 f906 	bl	80037ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_TIM3_Init+0xa0>)
 80015ae:	f006 feed 	bl	800838c <HAL_TIMEx_MasterConfigSynchronization>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80015b8:	f002 f8f8 	bl	80037ac <Error_Handler>
  }
}
 80015bc:	bf00      	nop
 80015be:	3730      	adds	r7, #48	; 0x30
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000208 	.word	0x20000208
 80015c8:	40000400 	.word	0x40000400

080015cc <MX_TIM4_Init>:

// ! @brief TIM4 Initialization Function
static void MX_TIM4_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <MX_TIM4_Init+0xa0>)
 80015ea:	4a21      	ldr	r2, [pc, #132]	; (8001670 <MX_TIM4_Init+0xa4>)
 80015ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <MX_TIM4_Init+0xa0>)
 80015f0:	2210      	movs	r2, #16
 80015f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_TIM4_Init+0xa0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <MX_TIM4_Init+0xa0>)
 80015fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001600:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_TIM4_Init+0xa0>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_TIM4_Init+0xa0>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800160e:	4817      	ldr	r0, [pc, #92]	; (800166c <MX_TIM4_Init+0xa0>)
 8001610:	f005 fc3c 	bl	8006e8c <HAL_TIM_IC_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800161a:	f002 f8c7 	bl	80037ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001626:	f107 0310 	add.w	r3, r7, #16
 800162a:	4619      	mov	r1, r3
 800162c:	480f      	ldr	r0, [pc, #60]	; (800166c <MX_TIM4_Init+0xa0>)
 800162e:	f006 fead 	bl	800838c <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001638:	f002 f8b8 	bl	80037ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800163c:	2300      	movs	r3, #0
 800163e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001640:	2301      	movs	r3, #1
 8001642:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	4619      	mov	r1, r3
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <MX_TIM4_Init+0xa0>)
 8001654:	f005 ffce 	bl	80075f4 <HAL_TIM_IC_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800165e:	f002 f8a5 	bl	80037ac <Error_Handler>
  }
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000250 	.word	0x20000250
 8001670:	40000800 	.word	0x40000800

08001674 <MX_TIM8_Init>:

//! @brief TIM8 Initialization Function
static void MX_TIM8_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b096      	sub	sp, #88	; 0x58
 8001678:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]
 80016a2:	615a      	str	r2, [r3, #20]
 80016a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2220      	movs	r2, #32
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00a fd95 	bl	800c1dc <memset>
  htim8.Instance = TIM8;
 80016b2:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <MX_TIM8_Init+0x14c>)
 80016b4:	4a43      	ldr	r2, [pc, #268]	; (80017c4 <MX_TIM8_Init+0x150>)
 80016b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016b8:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <MX_TIM8_Init+0x14c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016be:	4b40      	ldr	r3, [pc, #256]	; (80017c0 <MX_TIM8_Init+0x14c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80016c4:	4b3e      	ldr	r3, [pc, #248]	; (80017c0 <MX_TIM8_Init+0x14c>)
 80016c6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016cc:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <MX_TIM8_Init+0x14c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <MX_TIM8_Init+0x14c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <MX_TIM8_Init+0x14c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016de:	4838      	ldr	r0, [pc, #224]	; (80017c0 <MX_TIM8_Init+0x14c>)
 80016e0:	f005 fa64 	bl	8006bac <HAL_TIM_Base_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80016ea:	f002 f85f 	bl	80037ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016f8:	4619      	mov	r1, r3
 80016fa:	4831      	ldr	r0, [pc, #196]	; (80017c0 <MX_TIM8_Init+0x14c>)
 80016fc:	f006 f8d8 	bl	80078b0 <HAL_TIM_ConfigClockSource>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001706:	f002 f851 	bl	80037ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800170a:	482d      	ldr	r0, [pc, #180]	; (80017c0 <MX_TIM8_Init+0x14c>)
 800170c:	f005 fa9d 	bl	8006c4a <HAL_TIM_PWM_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001716:	f002 f849 	bl	80037ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001726:	4619      	mov	r1, r3
 8001728:	4825      	ldr	r0, [pc, #148]	; (80017c0 <MX_TIM8_Init+0x14c>)
 800172a:	f006 fe2f 	bl	800838c <HAL_TIMEx_MasterConfigSynchronization>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001734:	f002 f83a 	bl	80037ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001738:	2360      	movs	r3, #96	; 0x60
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	2200      	movs	r2, #0
 800175a:	4619      	mov	r1, r3
 800175c:	4818      	ldr	r0, [pc, #96]	; (80017c0 <MX_TIM8_Init+0x14c>)
 800175e:	f005 ffe5 	bl	800772c <HAL_TIM_PWM_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001768:	f002 f820 	bl	80037ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	2204      	movs	r2, #4
 8001772:	4619      	mov	r1, r3
 8001774:	4812      	ldr	r0, [pc, #72]	; (80017c0 <MX_TIM8_Init+0x14c>)
 8001776:	f005 ffd9 	bl	800772c <HAL_TIM_PWM_ConfigChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001780:	f002 f814 	bl	80037ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800179c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4806      	ldr	r0, [pc, #24]	; (80017c0 <MX_TIM8_Init+0x14c>)
 80017a8:	f006 fe6c 	bl	8008484 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80017b2:	f001 fffb 	bl	80037ac <Error_Handler>
  }
}
 80017b6:	bf00      	nop
 80017b8:	3758      	adds	r7, #88	; 0x58
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000298 	.word	0x20000298
 80017c4:	40010400 	.word	0x40010400

080017c8 <MX_USART3_UART_Init>:

// ! @brief USART3 Initialization Function
static void MX_USART3_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_USART3_UART_Init+0x4c>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <MX_USART3_UART_Init+0x50>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <MX_USART3_UART_Init+0x4c>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_USART3_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_USART3_UART_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_USART3_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_USART3_UART_Init+0x4c>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <MX_USART3_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_USART3_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_USART3_UART_Init+0x4c>)
 8001800:	f006 fea6 	bl	8008550 <HAL_UART_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800180a:	f001 ffcf 	bl	80037ac <Error_Handler>
  }
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200002e0 	.word	0x200002e0
 8001818:	40004800 	.word	0x40004800

0800181c <MX_GPIO_Init>:

// ! @brief GPIO Initialization Function
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	4b5b      	ldr	r3, [pc, #364]	; (80019a4 <MX_GPIO_Init+0x188>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a5a      	ldr	r2, [pc, #360]	; (80019a4 <MX_GPIO_Init+0x188>)
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b58      	ldr	r3, [pc, #352]	; (80019a4 <MX_GPIO_Init+0x188>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	61bb      	str	r3, [r7, #24]
 800184c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	4b54      	ldr	r3, [pc, #336]	; (80019a4 <MX_GPIO_Init+0x188>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a53      	ldr	r2, [pc, #332]	; (80019a4 <MX_GPIO_Init+0x188>)
 8001858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b51      	ldr	r3, [pc, #324]	; (80019a4 <MX_GPIO_Init+0x188>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <MX_GPIO_Init+0x188>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a4c      	ldr	r2, [pc, #304]	; (80019a4 <MX_GPIO_Init+0x188>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <MX_GPIO_Init+0x188>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b46      	ldr	r3, [pc, #280]	; (80019a4 <MX_GPIO_Init+0x188>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a45      	ldr	r2, [pc, #276]	; (80019a4 <MX_GPIO_Init+0x188>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b43      	ldr	r3, [pc, #268]	; (80019a4 <MX_GPIO_Init+0x188>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b3f      	ldr	r3, [pc, #252]	; (80019a4 <MX_GPIO_Init+0x188>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a3e      	ldr	r2, [pc, #248]	; (80019a4 <MX_GPIO_Init+0x188>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b3c      	ldr	r3, [pc, #240]	; (80019a4 <MX_GPIO_Init+0x188>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <MX_GPIO_Init+0x188>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a37      	ldr	r2, [pc, #220]	; (80019a4 <MX_GPIO_Init+0x188>)
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <MX_GPIO_Init+0x188>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80018da:	2200      	movs	r2, #0
 80018dc:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80018e0:	4831      	ldr	r0, [pc, #196]	; (80019a8 <MX_GPIO_Init+0x18c>)
 80018e2:	f003 fd19 	bl	8005318 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	213c      	movs	r1, #60	; 0x3c
 80018ea:	4830      	ldr	r0, [pc, #192]	; (80019ac <MX_GPIO_Init+0x190>)
 80018ec:	f003 fd14 	bl	8005318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018f6:	482e      	ldr	r0, [pc, #184]	; (80019b0 <MX_GPIO_Init+0x194>)
 80018f8:	f003 fd0e 	bl	8005318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001902:	482c      	ldr	r0, [pc, #176]	; (80019b4 <MX_GPIO_Init+0x198>)
 8001904:	f003 fd08 	bl	8005318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001908:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 800190c:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	4821      	ldr	r0, [pc, #132]	; (80019a8 <MX_GPIO_Init+0x18c>)
 8001922:	f003 fb5d 	bl	8004fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001926:	233c      	movs	r3, #60	; 0x3c
 8001928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001932:	2302      	movs	r3, #2
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	4619      	mov	r1, r3
 800193c:	481b      	ldr	r0, [pc, #108]	; (80019ac <MX_GPIO_Init+0x190>)
 800193e:	f003 fb4f 	bl	8004fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001948:	2301      	movs	r3, #1
 800194a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4619      	mov	r1, r3
 800195a:	4815      	ldr	r0, [pc, #84]	; (80019b0 <MX_GPIO_Init+0x194>)
 800195c:	f003 fb40 	bl	8004fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 8001960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001966:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800196a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	480f      	ldr	r0, [pc, #60]	; (80019b4 <MX_GPIO_Init+0x198>)
 8001978:	f003 fb32 	bl	8004fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 800197c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001982:	2301      	movs	r3, #1
 8001984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	4807      	ldr	r0, [pc, #28]	; (80019b4 <MX_GPIO_Init+0x198>)
 8001996:	f003 fb23 	bl	8004fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800199a:	bf00      	nop
 800199c:	3730      	adds	r7, #48	; 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40020400 	.word	0x40020400
 80019b4:	40020c00 	.word	0x40020c00

080019b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// communication
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	/* to prevent unused argument(s) compilation warning */
	UNUSED(huart);
	HAL_UART_Receive_IT(&huart3, aRxBuffer, 5);
 80019c0:	2205      	movs	r2, #5
 80019c2:	4904      	ldr	r1, [pc, #16]	; (80019d4 <HAL_UART_RxCpltCallback+0x1c>)
 80019c4:	4804      	ldr	r0, [pc, #16]	; (80019d8 <HAL_UART_RxCpltCallback+0x20>)
 80019c6:	f006 fea2 	bl	800870e <HAL_UART_Receive_IT>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000034c 	.word	0x2000034c
 80019d8:	200002e0 	.word	0x200002e0

080019dc <delay>:
			start = 0;
 	    }
}

// ultrasonic
void delay(uint16_t time) {
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <delay+0x30>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim4) < time)
 80019ee:	bf00      	nop
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <delay+0x30>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d3f9      	bcc.n	80019f0 <delay+0x14>
		;
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000250 	.word	0x20000250

08001a10 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7f1b      	ldrb	r3, [r3, #28]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	f040 808a 	bne.w	8001b36 <HAL_TIM_IC_CaptureCallback+0x126>
		if (Is_First_Captured == 0) {
 8001a22:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d11b      	bne.n	8001a62 <HAL_TIM_IC_CaptureCallback+0x52>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f006 f807 	bl	8007a40 <HAL_TIM_ReadCapturedValue>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b45      	ldr	r3, [pc, #276]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001a38:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a1a      	ldr	r2, [r3, #32]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 020a 	bic.w	r2, r2, #10
 8001a4e:	621a      	str	r2, [r3, #32]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6a1a      	ldr	r2, [r3, #32]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0202 	orr.w	r2, r2, #2
 8001a5e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8001a60:	e069      	b.n	8001b36 <HAL_TIM_IC_CaptureCallback+0x126>
		} else if (Is_First_Captured == 1) {
 8001a62:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d165      	bne.n	8001b36 <HAL_TIM_IC_CaptureCallback+0x126>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f005 ffe7 	bl	8007a40 <HAL_TIM_ReadCapturedValue>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a78:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8001a82:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	dd0a      	ble.n	8001aa4 <HAL_TIM_IC_CaptureCallback+0x94>
				Difference = IC_Val2 - IC_Val1;
 8001a8e:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001aa0:	801a      	strh	r2, [r3, #0]
 8001aa2:	e011      	b.n	8001ac8 <HAL_TIM_IC_CaptureCallback+0xb8>
			else if (IC_Val1 > IC_Val2) {
 8001aa4:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	dd0b      	ble.n	8001ac8 <HAL_TIM_IC_CaptureCallback+0xb8>
				Difference = (65535 - IC_Val1) + IC_Val2;
 8001ab0:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001ac6:	801a      	strh	r2, [r3, #0]
			Distance = Difference * .0343 / 2;
 8001ac8:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd21 	bl	8000514 <__aeabi_i2d>
 8001ad2:	a31b      	add	r3, pc, #108	; (adr r3, 8001b40 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe fd86 	bl	80005e8 <__aeabi_dmul>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aec:	f7fe fea6 	bl	800083c <__aeabi_ddiv>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7ff f84e 	bl	8000b98 <__aeabi_d2uiz>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001b02:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0;
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6a1a      	ldr	r2, [r3, #32]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 020a 	bic.w	r2, r2, #10
 8001b18:	621a      	str	r2, [r3, #32]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a12      	ldr	r2, [r2, #32]
 8001b24:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0202 	bic.w	r2, r2, #2
 8001b34:	60da      	str	r2, [r3, #12]
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	04816f00 	.word	0x04816f00
 8001b44:	3fa18fc5 	.word	0x3fa18fc5
 8001b48:	200003b8 	.word	0x200003b8
 8001b4c:	200003bc 	.word	0x200003bc
 8001b50:	200003c0 	.word	0x200003c0
 8001b54:	200003c4 	.word	0x200003c4
 8001b58:	200003c6 	.word	0x200003c6
 8001b5c:	20000250 	.word	0x20000250

08001b60 <HCSR04_Read>:

void HCSR04_Read(void) //Call when u want to get reading from US
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b6a:	480b      	ldr	r0, [pc, #44]	; (8001b98 <HCSR04_Read+0x38>)
 8001b6c:	f003 fbd4 	bl	8005318 <HAL_GPIO_WritePin>
	delay(10);
 8001b70:	200a      	movs	r0, #10
 8001b72:	f7ff ff33 	bl	80019dc <delay>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b7c:	4806      	ldr	r0, [pc, #24]	; (8001b98 <HCSR04_Read+0x38>)
 8001b7e:	f003 fbcb 	bl	8005318 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HCSR04_Read+0x3c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <HCSR04_Read+0x3c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0202 	orr.w	r2, r2, #2
 8001b90:	60da      	str	r2, [r3, #12]
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40020c00 	.word	0x40020c00
 8001b9c:	20000250 	.word	0x20000250

08001ba0 <buzzerBeep>:

}


void buzzerBeep()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer On
 8001ba4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ba8:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <buzzerBeep+0x24>)
 8001baa:	f003 fbce 	bl	800534a <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8001bae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb2:	f002 fc4d 	bl	8004450 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer Off
 8001bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bba:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <buzzerBeep+0x24>)
 8001bbc:	f003 fbc5 	bl	800534a <HAL_GPIO_TogglePin>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40020400 	.word	0x40020400

08001bc8 <moveCarRight>:
	e_brake = 1;
	pwmVal_servo = SERVOCENTER;
	osDelay(300);
}

void moveCarRight(double angle) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVORIGHT;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <moveCarRight+0x58>)
 8001bd4:	22d2      	movs	r2, #210	; 0xd2
 8001bd6:	801a      	strh	r2, [r3, #0]
	osDelay(200);
 8001bd8:	20c8      	movs	r0, #200	; 0xc8
 8001bda:	f007 fe41 	bl	8009860 <osDelay>
	e_brake = 0;
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <moveCarRight+0x5c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
	control = 1;
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <moveCarRight+0x60>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <moveCarRight+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <moveCarRight+0x68>)
 8001bf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bfa:	f7fe fb3d 	bl	8000278 <__aeabi_dsub>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	490b      	ldr	r1, [pc, #44]	; (8001c30 <moveCarRight+0x68>)
 8001c04:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck2());
 8001c08:	bf00      	nop
 8001c0a:	f000 fb03 	bl	8002214 <finishCheck2>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1fa      	bne.n	8001c0a <moveCarRight+0x42>
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000368 	.word	0x20000368
 8001c28:	20000358 	.word	0x20000358
 8001c2c:	20000364 	.word	0x20000364
 8001c30:	20000388 	.word	0x20000388

08001c34 <moveCarRightFaster>:

void moveCarRightFaster(double angle) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVORIGHT;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <moveCarRightFaster+0x58>)
 8001c40:	22d2      	movs	r2, #210	; 0xd2
 8001c42:	801a      	strh	r2, [r3, #0]
	osDelay(100);
 8001c44:	2064      	movs	r0, #100	; 0x64
 8001c46:	f007 fe0b 	bl	8009860 <osDelay>
	e_brake = 0;
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <moveCarRightFaster+0x5c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
	control = 1;
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <moveCarRightFaster+0x60>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <moveCarRightFaster+0x64>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <moveCarRightFaster+0x68>)
 8001c5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c66:	f7fe fb07 	bl	8000278 <__aeabi_dsub>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	490b      	ldr	r1, [pc, #44]	; (8001c9c <moveCarRightFaster+0x68>)
 8001c70:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck2());
 8001c74:	bf00      	nop
 8001c76:	f000 facd 	bl	8002214 <finishCheck2>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1fa      	bne.n	8001c76 <moveCarRightFaster+0x42>
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000368 	.word	0x20000368
 8001c94:	20000358 	.word	0x20000358
 8001c98:	20000364 	.word	0x20000364
 8001c9c:	20000388 	.word	0x20000388

08001ca0 <moveCarLeftFaster>:

void moveCarLeftFaster(double angle) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVOLEFT;
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <moveCarLeftFaster+0x58>)
 8001cac:	2269      	movs	r2, #105	; 0x69
 8001cae:	801a      	strh	r2, [r3, #0]
	osDelay(100);
 8001cb0:	2064      	movs	r0, #100	; 0x64
 8001cb2:	f007 fdd5 	bl	8009860 <osDelay>
	e_brake = 0;
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <moveCarLeftFaster+0x5c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
	control = 1;
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <moveCarLeftFaster+0x60>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <moveCarLeftFaster+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <moveCarLeftFaster+0x68>)
 8001cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cd2:	f7fe fad3 	bl	800027c <__adddf3>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	490b      	ldr	r1, [pc, #44]	; (8001d08 <moveCarLeftFaster+0x68>)
 8001cdc:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck2());
 8001ce0:	bf00      	nop
 8001ce2:	f000 fa97 	bl	8002214 <finishCheck2>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1fa      	bne.n	8001ce2 <moveCarLeftFaster+0x42>
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000368 	.word	0x20000368
 8001d00:	20000358 	.word	0x20000358
 8001d04:	20000364 	.word	0x20000364
 8001d08:	20000388 	.word	0x20000388

08001d0c <moveCarLeft>:

void moveCarLeft(double angle) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVOLEFT;
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <moveCarLeft+0x58>)
 8001d18:	2269      	movs	r2, #105	; 0x69
 8001d1a:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 8001d1c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d20:	f007 fd9e 	bl	8009860 <osDelay>
	e_brake = 0;
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <moveCarLeft+0x5c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
	control = 1;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <moveCarLeft+0x60>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <moveCarLeft+0x64>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <moveCarLeft+0x68>)
 8001d38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d40:	f7fe fa9c 	bl	800027c <__adddf3>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	490a      	ldr	r1, [pc, #40]	; (8001d74 <moveCarLeft+0x68>)
 8001d4a:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck2());
 8001d4e:	bf00      	nop
 8001d50:	f000 fa60 	bl	8002214 <finishCheck2>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1fa      	bne.n	8001d50 <moveCarLeft+0x44>
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000368 	.word	0x20000368
 8001d6c:	20000358 	.word	0x20000358
 8001d70:	20000364 	.word	0x20000364
 8001d74:	20000388 	.word	0x20000388

08001d78 <PID_Control>:

// error correction
int PID_Control(int error, int right) {//straights
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
	if (right) { //rightMotor
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d018      	beq.n	8001dba <PID_Control+0x42>
		if (error > 0) { //go forward
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	dd0a      	ble.n	8001da4 <PID_Control+0x2c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001d8e:	2201      	movs	r2, #1
 8001d90:	2110      	movs	r1, #16
 8001d92:	4835      	ldr	r0, [pc, #212]	; (8001e68 <PID_Control+0xf0>)
 8001d94:	f003 fac0 	bl	8005318 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2120      	movs	r1, #32
 8001d9c:	4832      	ldr	r0, [pc, #200]	; (8001e68 <PID_Control+0xf0>)
 8001d9e:	f003 fabb 	bl	8005318 <HAL_GPIO_WritePin>
 8001da2:	e022      	b.n	8001dea <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001da4:	2200      	movs	r2, #0
 8001da6:	2110      	movs	r1, #16
 8001da8:	482f      	ldr	r0, [pc, #188]	; (8001e68 <PID_Control+0xf0>)
 8001daa:	f003 fab5 	bl	8005318 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001dae:	2201      	movs	r2, #1
 8001db0:	2120      	movs	r1, #32
 8001db2:	482d      	ldr	r0, [pc, #180]	; (8001e68 <PID_Control+0xf0>)
 8001db4:	f003 fab0 	bl	8005318 <HAL_GPIO_WritePin>
 8001db8:	e017      	b.n	8001dea <PID_Control+0x72>
		}
	} else { //leftMotor
		if (error > 0) { //go forward
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	dd0a      	ble.n	8001dd6 <PID_Control+0x5e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2108      	movs	r1, #8
 8001dc4:	4828      	ldr	r0, [pc, #160]	; (8001e68 <PID_Control+0xf0>)
 8001dc6:	f003 faa7 	bl	8005318 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2104      	movs	r1, #4
 8001dce:	4826      	ldr	r0, [pc, #152]	; (8001e68 <PID_Control+0xf0>)
 8001dd0:	f003 faa2 	bl	8005318 <HAL_GPIO_WritePin>
 8001dd4:	e009      	b.n	8001dea <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2108      	movs	r1, #8
 8001dda:	4823      	ldr	r0, [pc, #140]	; (8001e68 <PID_Control+0xf0>)
 8001ddc:	f003 fa9c 	bl	8005318 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001de0:	2201      	movs	r2, #1
 8001de2:	2104      	movs	r1, #4
 8001de4:	4820      	ldr	r0, [pc, #128]	; (8001e68 <PID_Control+0xf0>)
 8001de6:	f003 fa97 	bl	8005318 <HAL_GPIO_WritePin>
		}
	}
	error = abs(error);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bfb8      	it	lt
 8001df0:	425b      	neglt	r3, r3
 8001df2:	607b      	str	r3, [r7, #4]
	if (error > 2000) {
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001dfa:	dd02      	ble.n	8001e02 <PID_Control+0x8a>
		return 4000; // 3000
 8001dfc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001e00:	e02d      	b.n	8001e5e <PID_Control+0xe6>
	} else if (error > 500) {
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e08:	dd02      	ble.n	8001e10 <PID_Control+0x98>
		return 3000; // 2500
 8001e0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001e0e:	e026      	b.n	8001e5e <PID_Control+0xe6>
	} else if (error > 200) {
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2bc8      	cmp	r3, #200	; 0xc8
 8001e14:	dd02      	ble.n	8001e1c <PID_Control+0xa4>
		return 2500; // 1700
 8001e16:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001e1a:	e020      	b.n	8001e5e <PID_Control+0xe6>
	} else if (error > 100) {
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	dd02      	ble.n	8001e28 <PID_Control+0xb0>
		return 1500; // 1000
 8001e22:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001e26:	e01a      	b.n	8001e5e <PID_Control+0xe6>
	} else if (error > 2) {
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	dd07      	ble.n	8001e3e <PID_Control+0xc6>
		times_acceptable++;
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <PID_Control+0xf4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <PID_Control+0xf4>)
 8001e36:	6013      	str	r3, [r2, #0]
		return 700;
 8001e38:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001e3c:	e00f      	b.n	8001e5e <PID_Control+0xe6>
	} else if (error >= 1) {
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	dd06      	ble.n	8001e52 <PID_Control+0xda>
		times_acceptable++;
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <PID_Control+0xf4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <PID_Control+0xf4>)
 8001e4c:	6013      	str	r3, [r2, #0]
		return 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e005      	b.n	8001e5e <PID_Control+0xe6>
	} else {
		times_acceptable++;
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <PID_Control+0xf4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <PID_Control+0xf4>)
 8001e5a:	6013      	str	r3, [r2, #0]
		return 0;
 8001e5c:	2300      	movs	r3, #0
	}
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	20000364 	.word	0x20000364

08001e70 <PID_Juke>:
int PID_Juke(double error, int right)//ultrasonic
{
 8001e70:	b5b0      	push	{r4, r5, r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	ed87 0b02 	vstr	d0, [r7, #8]
 8001e7a:	6078      	str	r0, [r7, #4]
	//int outputPWM = 0;
	int temp = 1;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]

	//degree of acceptance will be 28-28.5, 40?  //10

	if (error < usTargetGLOBAL){
 8001e80:	4b68      	ldr	r3, [pc, #416]	; (8002024 <PID_Juke+0x1b4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fb45 	bl	8000514 <__aeabi_i2d>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e92:	f7fe fe1b 	bl	8000acc <__aeabi_dcmplt>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d010      	beq.n	8001ebe <PID_Juke+0x4e>
		error = usTargetGLOBAL*2 - error ;
 8001e9c:	4b61      	ldr	r3, [pc, #388]	; (8002024 <PID_Juke+0x1b4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fb36 	bl	8000514 <__aeabi_i2d>
 8001ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eac:	f7fe f9e4 	bl	8000278 <__aeabi_dsub>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	e9c7 2302 	strd	r2, r3, [r7, #8]
		temp = -1;
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebc:	617b      	str	r3, [r7, #20]
	}


	if(right){//rightMotor
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d018      	beq.n	8001ef6 <PID_Juke+0x86>
		if(temp>0){//go forward
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	dd0a      	ble.n	8001ee0 <PID_Juke+0x70>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2110      	movs	r1, #16
 8001ece:	4856      	ldr	r0, [pc, #344]	; (8002028 <PID_Juke+0x1b8>)
 8001ed0:	f003 fa22 	bl	8005318 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2120      	movs	r1, #32
 8001ed8:	4853      	ldr	r0, [pc, #332]	; (8002028 <PID_Juke+0x1b8>)
 8001eda:	f003 fa1d 	bl	8005318 <HAL_GPIO_WritePin>
 8001ede:	e022      	b.n	8001f26 <PID_Juke+0xb6>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2110      	movs	r1, #16
 8001ee4:	4850      	ldr	r0, [pc, #320]	; (8002028 <PID_Juke+0x1b8>)
 8001ee6:	f003 fa17 	bl	8005318 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	2120      	movs	r1, #32
 8001eee:	484e      	ldr	r0, [pc, #312]	; (8002028 <PID_Juke+0x1b8>)
 8001ef0:	f003 fa12 	bl	8005318 <HAL_GPIO_WritePin>
 8001ef4:	e017      	b.n	8001f26 <PID_Juke+0xb6>
		}
	}else{//leftMotor
		if(temp>0){//go forward
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	dd0a      	ble.n	8001f12 <PID_Juke+0xa2>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001efc:	2201      	movs	r2, #1
 8001efe:	2108      	movs	r1, #8
 8001f00:	4849      	ldr	r0, [pc, #292]	; (8002028 <PID_Juke+0x1b8>)
 8001f02:	f003 fa09 	bl	8005318 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2104      	movs	r1, #4
 8001f0a:	4847      	ldr	r0, [pc, #284]	; (8002028 <PID_Juke+0x1b8>)
 8001f0c:	f003 fa04 	bl	8005318 <HAL_GPIO_WritePin>
 8001f10:	e009      	b.n	8001f26 <PID_Juke+0xb6>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001f12:	2200      	movs	r2, #0
 8001f14:	2108      	movs	r1, #8
 8001f16:	4844      	ldr	r0, [pc, #272]	; (8002028 <PID_Juke+0x1b8>)
 8001f18:	f003 f9fe 	bl	8005318 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	2104      	movs	r1, #4
 8001f20:	4841      	ldr	r0, [pc, #260]	; (8002028 <PID_Juke+0x1b8>)
 8001f22:	f003 f9f9 	bl	8005318 <HAL_GPIO_WritePin>
		}
	}

	if(error<0){
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f32:	f7fe fdcb 	bl	8000acc <__aeabi_dcmplt>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <PID_Juke+0xd8>
		error *= -1;
 8001f3c:	68bc      	ldr	r4, [r7, #8]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f44:	e9c7 4502 	strd	r4, r5, [r7, #8]
	}

	if(error > 40){
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	4b37      	ldr	r3, [pc, #220]	; (800202c <PID_Juke+0x1bc>)
 8001f4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f52:	f7fe fdd9 	bl	8000b08 <__aeabi_dcmpgt>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <PID_Juke+0xf2>
		return 4000; // 4000
 8001f5c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001f60:	e05b      	b.n	800201a <PID_Juke+0x1aa>
	}else if(error > usTargetGLOBAL+9){
 8001f62:	4b30      	ldr	r3, [pc, #192]	; (8002024 <PID_Juke+0x1b4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3309      	adds	r3, #9
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fad3 	bl	8000514 <__aeabi_i2d>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f76:	f7fe fdc7 	bl	8000b08 <__aeabi_dcmpgt>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <PID_Juke+0x116>
		return 3500; // 3300
 8001f80:	f640 53ac 	movw	r3, #3500	; 0xdac
 8001f84:	e049      	b.n	800201a <PID_Juke+0x1aa>
	}else if(error > usTargetGLOBAL+5){
 8001f86:	4b27      	ldr	r3, [pc, #156]	; (8002024 <PID_Juke+0x1b4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3305      	adds	r3, #5
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fac1 	bl	8000514 <__aeabi_i2d>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f9a:	f7fe fdb5 	bl	8000b08 <__aeabi_dcmpgt>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <PID_Juke+0x13a>
		return 1500; //900
 8001fa4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001fa8:	e037      	b.n	800201a <PID_Juke+0x1aa>
	}
	else if(error > usTargetGLOBAL+3){
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <PID_Juke+0x1b4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3303      	adds	r3, #3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe faaf 	bl	8000514 <__aeabi_i2d>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fbe:	f7fe fda3 	bl	8000b08 <__aeabi_dcmpgt>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <PID_Juke+0x168>
			times_acceptable++; // there is None here
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <PID_Juke+0x1c0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	4a18      	ldr	r2, [pc, #96]	; (8002030 <PID_Juke+0x1c0>)
 8001fd0:	6013      	str	r3, [r2, #0]
			return 900; //900
 8001fd2:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001fd6:	e020      	b.n	800201a <PID_Juke+0x1aa>
	}else if(error <=usTargetGLOBAL+.5){
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <PID_Juke+0x1b4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fa99 	bl	8000514 <__aeabi_i2d>
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <PID_Juke+0x1c4>)
 8001fe8:	f7fe f948 	bl	800027c <__adddf3>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ff4:	f7fe fd74 	bl	8000ae0 <__aeabi_dcmple>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d006      	beq.n	800200c <PID_Juke+0x19c>
		times_acceptable++;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <PID_Juke+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <PID_Juke+0x1c0>)
 8002006:	6013      	str	r3, [r2, #0]
		return 0;
 8002008:	2300      	movs	r3, #0
 800200a:	e006      	b.n	800201a <PID_Juke+0x1aa>
	}else{
		times_acceptable +=500;; //500
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <PID_Juke+0x1c0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002014:	4a06      	ldr	r2, [pc, #24]	; (8002030 <PID_Juke+0x1c0>)
 8002016:	6013      	str	r3, [r2, #0]
		return 0;
 8002018:	2300      	movs	r3, #0
	}


}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bdb0      	pop	{r4, r5, r7, pc}
 8002022:	bf00      	nop
 8002024:	20000004 	.word	0x20000004
 8002028:	40020000 	.word	0x40020000
 800202c:	40440000 	.word	0x40440000
 8002030:	20000364 	.word	0x20000364
 8002034:	3fe00000 	.word	0x3fe00000

08002038 <PID_Angle>:

int PID_Angle(double errord, int right) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002042:	6078      	str	r0, [r7, #4]
	int error = (int) (errord * 10);
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	4b4e      	ldr	r3, [pc, #312]	; (8002184 <PID_Angle+0x14c>)
 800204a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800204e:	f7fe facb 	bl	80005e8 <__aeabi_dmul>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	f7fe fd75 	bl	8000b48 <__aeabi_d2iz>
 800205e:	4603      	mov	r3, r0
 8002060:	617b      	str	r3, [r7, #20]
	if (right) { //rightMotor
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d018      	beq.n	800209a <PID_Angle+0x62>
		if (error > 0) { //go forward
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	dd0a      	ble.n	8002084 <PID_Angle+0x4c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 800206e:	2201      	movs	r2, #1
 8002070:	2110      	movs	r1, #16
 8002072:	4845      	ldr	r0, [pc, #276]	; (8002188 <PID_Angle+0x150>)
 8002074:	f003 f950 	bl	8005318 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	2120      	movs	r1, #32
 800207c:	4842      	ldr	r0, [pc, #264]	; (8002188 <PID_Angle+0x150>)
 800207e:	f003 f94b 	bl	8005318 <HAL_GPIO_WritePin>
 8002082:	e022      	b.n	80020ca <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8002084:	2200      	movs	r2, #0
 8002086:	2110      	movs	r1, #16
 8002088:	483f      	ldr	r0, [pc, #252]	; (8002188 <PID_Angle+0x150>)
 800208a:	f003 f945 	bl	8005318 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800208e:	2201      	movs	r2, #1
 8002090:	2120      	movs	r1, #32
 8002092:	483d      	ldr	r0, [pc, #244]	; (8002188 <PID_Angle+0x150>)
 8002094:	f003 f940 	bl	8005318 <HAL_GPIO_WritePin>
 8002098:	e017      	b.n	80020ca <PID_Angle+0x92>
		}
	} else { //leftMotor
		if (error < 0) { //go forward
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b00      	cmp	r3, #0
 800209e:	da0a      	bge.n	80020b6 <PID_Angle+0x7e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 80020a0:	2201      	movs	r2, #1
 80020a2:	2108      	movs	r1, #8
 80020a4:	4838      	ldr	r0, [pc, #224]	; (8002188 <PID_Angle+0x150>)
 80020a6:	f003 f937 	bl	8005318 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2104      	movs	r1, #4
 80020ae:	4836      	ldr	r0, [pc, #216]	; (8002188 <PID_Angle+0x150>)
 80020b0:	f003 f932 	bl	8005318 <HAL_GPIO_WritePin>
 80020b4:	e009      	b.n	80020ca <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 80020b6:	2200      	movs	r2, #0
 80020b8:	2108      	movs	r1, #8
 80020ba:	4833      	ldr	r0, [pc, #204]	; (8002188 <PID_Angle+0x150>)
 80020bc:	f003 f92c 	bl	8005318 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80020c0:	2201      	movs	r2, #1
 80020c2:	2104      	movs	r1, #4
 80020c4:	4830      	ldr	r0, [pc, #192]	; (8002188 <PID_Angle+0x150>)
 80020c6:	f003 f927 	bl	8005318 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bfb8      	it	lt
 80020d0:	425b      	neglt	r3, r3
 80020d2:	617b      	str	r3, [r7, #20]
	if (error > 1000){
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020da:	dd02      	ble.n	80020e2 <PID_Angle+0xaa>
		return 6000; // new add
 80020dc:	f241 7370 	movw	r3, #6000	; 0x1770
 80020e0:	e04c      	b.n	800217c <PID_Angle+0x144>
	}else if (error > 700) {
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80020e8:	dd02      	ble.n	80020f0 <PID_Angle+0xb8>
		return 5500;
 80020ea:	f241 537c 	movw	r3, #5500	; 0x157c
 80020ee:	e045      	b.n	800217c <PID_Angle+0x144>
	}else if (error > 300) {
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80020f6:	dd02      	ble.n	80020fe <PID_Angle+0xc6>
		return 3600; // 3300
 80020f8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80020fc:	e03e      	b.n	800217c <PID_Angle+0x144>
	} else if (error > 200) {
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2bc8      	cmp	r3, #200	; 0xc8
 8002102:	dd02      	ble.n	800210a <PID_Angle+0xd2>
		return 3200; // 3000
 8002104:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002108:	e038      	b.n	800217c <PID_Angle+0x144>
	} else if (error > 150) {
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b96      	cmp	r3, #150	; 0x96
 800210e:	dd02      	ble.n	8002116 <PID_Angle+0xde>
		return 3000; // 2400
 8002110:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002114:	e032      	b.n	800217c <PID_Angle+0x144>
	} else if (error > 100) {
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b64      	cmp	r3, #100	; 0x64
 800211a:	dd02      	ble.n	8002122 <PID_Angle+0xea>
		return 2600; // 2000
 800211c:	f640 2328 	movw	r3, #2600	; 0xa28
 8002120:	e02c      	b.n	800217c <PID_Angle+0x144>
	}else if (error > 70) {
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b46      	cmp	r3, #70	; 0x46
 8002126:	dd02      	ble.n	800212e <PID_Angle+0xf6>
//		times_acceptable++;
		return 1500;
 8002128:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800212c:	e026      	b.n	800217c <PID_Angle+0x144>
	} else if (error > 50) {
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b32      	cmp	r3, #50	; 0x32
 8002132:	dd07      	ble.n	8002144 <PID_Angle+0x10c>
		times_acceptable++;
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <PID_Angle+0x154>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	4a14      	ldr	r2, [pc, #80]	; (800218c <PID_Angle+0x154>)
 800213c:	6013      	str	r3, [r2, #0]
		return 1000; // 1000
 800213e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002142:	e01b      	b.n	800217c <PID_Angle+0x144>
	} else if (error >= 25) {
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b18      	cmp	r3, #24
 8002148:	dd07      	ble.n	800215a <PID_Angle+0x122>
		times_acceptable++;
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <PID_Angle+0x154>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	4a0e      	ldr	r2, [pc, #56]	; (800218c <PID_Angle+0x154>)
 8002152:	6013      	str	r3, [r2, #0]
		return 900; // 1000
 8002154:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002158:	e010      	b.n	800217c <PID_Angle+0x144>
	} else if (error >= 8) {
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b07      	cmp	r3, #7
 800215e:	dd07      	ble.n	8002170 <PID_Angle+0x138>
		times_acceptable++;
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <PID_Angle+0x154>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3301      	adds	r3, #1
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <PID_Angle+0x154>)
 8002168:	6013      	str	r3, [r2, #0]
		return 800;
 800216a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800216e:	e005      	b.n	800217c <PID_Angle+0x144>
	} else {
		times_acceptable++;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <PID_Angle+0x154>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	4a05      	ldr	r2, [pc, #20]	; (800218c <PID_Angle+0x154>)
 8002178:	6013      	str	r3, [r2, #0]
		return 200; // 200
 800217a:	23c8      	movs	r3, #200	; 0xc8
	}
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40240000 	.word	0x40240000
 8002188:	40020000 	.word	0x40020000
 800218c:	20000364 	.word	0x20000364

08002190 <finishCheck>:

int finishCheck() {
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
	if (times_acceptable > 20) {
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <finishCheck+0x58>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b14      	cmp	r3, #20
 800219a:	dd22      	ble.n	80021e2 <finishCheck+0x52>
		e_brake = 1;
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <finishCheck+0x5c>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
		pwmVal_L = pwmVal_R = 0;
 80021a2:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <finishCheck+0x60>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	801a      	strh	r2, [r3, #0]
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <finishCheck+0x60>)
 80021aa:	881a      	ldrh	r2, [r3, #0]
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <finishCheck+0x64>)
 80021ae:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <finishCheck+0x68>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <finishCheck+0x6c>)
 80021b6:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <finishCheck+0x70>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a11      	ldr	r2, [pc, #68]	; (8002204 <finishCheck+0x74>)
 80021be:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <finishCheck+0x58>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
		straightUS = 0;
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <finishCheck+0x78>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
		errorcorrection = 0;
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <finishCheck+0x7c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
		control = 0;
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <finishCheck+0x80>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
		osDelay(30);
 80021d8:	201e      	movs	r0, #30
 80021da:	f007 fb41 	bl	8009860 <osDelay>

		return 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <finishCheck+0x54>
	}
	return 1;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000364 	.word	0x20000364
 80021ec:	20000368 	.word	0x20000368
 80021f0:	20000352 	.word	0x20000352
 80021f4:	20000354 	.word	0x20000354
 80021f8:	20000378 	.word	0x20000378
 80021fc:	20000380 	.word	0x20000380
 8002200:	20000374 	.word	0x20000374
 8002204:	2000037c 	.word	0x2000037c
 8002208:	20000370 	.word	0x20000370
 800220c:	2000036c 	.word	0x2000036c
 8002210:	20000358 	.word	0x20000358

08002214 <finishCheck2>:
int finishCheck2() {
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
	if (times_acceptable > 8) { // 5
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <finishCheck2+0x1c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b08      	cmp	r3, #8
 800221e:	dd01      	ble.n	8002224 <finishCheck2+0x10>

		return 0;
 8002220:	2300      	movs	r3, #0
 8002222:	e000      	b.n	8002226 <finishCheck2+0x12>
	}
	return 1;
 8002224:	2301      	movs	r3, #1
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	20000364 	.word	0x20000364

08002234 <finished>:

void finished() {
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
		e_brake = 1;
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <finished+0x50>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]
		pwmVal_L = pwmVal_R = 0;
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <finished+0x54>)
 8002240:	2200      	movs	r2, #0
 8002242:	801a      	strh	r2, [r3, #0]
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <finished+0x54>)
 8002246:	881a      	ldrh	r2, [r3, #0]
 8002248:	4b10      	ldr	r3, [pc, #64]	; (800228c <finished+0x58>)
 800224a:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <finished+0x5c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a10      	ldr	r2, [pc, #64]	; (8002294 <finished+0x60>)
 8002252:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <finished+0x64>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a10      	ldr	r2, [pc, #64]	; (800229c <finished+0x68>)
 800225a:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <finished+0x6c>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
		control = 0;
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <finished+0x70>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
		control2 = 0;
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <finished+0x74>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
		control3 = 0;
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <finished+0x78>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
		straightUS = 0;
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <finished+0x7c>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
		osDelay(30);
 800227a:	201e      	movs	r0, #30
 800227c:	f007 faf0 	bl	8009860 <osDelay>

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000368 	.word	0x20000368
 8002288:	20000352 	.word	0x20000352
 800228c:	20000354 	.word	0x20000354
 8002290:	20000378 	.word	0x20000378
 8002294:	20000380 	.word	0x20000380
 8002298:	20000374 	.word	0x20000374
 800229c:	2000037c 	.word	0x2000037c
 80022a0:	20000364 	.word	0x20000364
 80022a4:	20000358 	.word	0x20000358
 80022a8:	2000035c 	.word	0x2000035c
 80022ac:	20000360 	.word	0x20000360
 80022b0:	20000370 	.word	0x20000370

080022b4 <IRCheck>:

void IRCheck(int a){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	pwmVal_servo = a;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	b29a      	uxth	r2, r3
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <IRCheck+0x2c>)
 80022c2:	801a      	strh	r2, [r3, #0]
	osDelay(30);
 80022c4:	201e      	movs	r0, #30
 80022c6:	f007 facb 	bl	8009860 <osDelay>
	e_brake = 0;
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <IRCheck+0x30>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
	control = 1;
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <IRCheck+0x34>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000368 	.word	0x20000368
 80022e8:	20000358 	.word	0x20000358

080022ec <readByte>:

// gyro
void readByte(uint8_t addr, uint8_t *data) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 80022f8:	4a0f      	ldr	r2, [pc, #60]	; (8002338 <readByte+0x4c>)
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 1, 10);
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <readByte+0x50>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	b299      	uxth	r1, r3
 8002308:	230a      	movs	r3, #10
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2301      	movs	r3, #1
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <readByte+0x4c>)
 8002310:	480b      	ldr	r0, [pc, #44]	; (8002340 <readByte+0x54>)
 8002312:	f003 f979 	bl	8005608 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress << 1, data, 2, 20);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <readByte+0x50>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	b299      	uxth	r1, r3
 8002320:	2314      	movs	r3, #20
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2302      	movs	r3, #2
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	4805      	ldr	r0, [pc, #20]	; (8002340 <readByte+0x54>)
 800232a:	f003 fa6b 	bl	8005804 <HAL_I2C_Master_Receive>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000398 	.word	0x20000398
 800233c:	20000002 	.word	0x20000002
 8002340:	20000124 	.word	0x20000124

08002344 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af02      	add	r7, sp, #8
 800234a:	4603      	mov	r3, r0
 800234c:	460a      	mov	r2, r1
 800234e:	71fb      	strb	r3, [r7, #7]
 8002350:	4613      	mov	r3, r2
 8002352:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <writeByte+0x3c>)
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 800235a:	4a09      	ldr	r2, [pc, #36]	; (8002380 <writeByte+0x3c>)
 800235c:	79bb      	ldrb	r3, [r7, #6]
 800235e:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <writeByte+0x40>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	b299      	uxth	r1, r3
 800236a:	2314      	movs	r3, #20
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2302      	movs	r3, #2
 8002370:	4a03      	ldr	r2, [pc, #12]	; (8002380 <writeByte+0x3c>)
 8002372:	4805      	ldr	r0, [pc, #20]	; (8002388 <writeByte+0x44>)
 8002374:	f003 f948 	bl	8005608 <HAL_I2C_Master_Transmit>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000398 	.word	0x20000398
 8002384:	20000002 	.word	0x20000002
 8002388:	20000124 	.word	0x20000124

0800238c <gyroInit>:

void gyroInit() {
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8002390:	2100      	movs	r1, #0
 8002392:	2006      	movs	r0, #6
 8002394:	f7ff ffd6 	bl	8002344 <writeByte>
	osDelay(10);
 8002398:	200a      	movs	r0, #10
 800239a:	f007 fa61 	bl	8009860 <osDelay>
	writeByte(0x03, 0x80);
 800239e:	2180      	movs	r1, #128	; 0x80
 80023a0:	2003      	movs	r0, #3
 80023a2:	f7ff ffcf 	bl	8002344 <writeByte>
	osDelay(10);
 80023a6:	200a      	movs	r0, #10
 80023a8:	f007 fa5a 	bl	8009860 <osDelay>
	writeByte(0x07, 0x07);
 80023ac:	2107      	movs	r1, #7
 80023ae:	2007      	movs	r0, #7
 80023b0:	f7ff ffc8 	bl	8002344 <writeByte>
	osDelay(10);
 80023b4:	200a      	movs	r0, #10
 80023b6:	f007 fa53 	bl	8009860 <osDelay>
	writeByte(0x06, 0x01);
 80023ba:	2101      	movs	r1, #1
 80023bc:	2006      	movs	r0, #6
 80023be:	f7ff ffc1 	bl	8002344 <writeByte>
	osDelay(10);
 80023c2:	200a      	movs	r0, #10
 80023c4:	f007 fa4c 	bl	8009860 <osDelay>
	writeByte(0x7F, 0x20);
 80023c8:	2120      	movs	r1, #32
 80023ca:	207f      	movs	r0, #127	; 0x7f
 80023cc:	f7ff ffba 	bl	8002344 <writeByte>
	osDelay(10);
 80023d0:	200a      	movs	r0, #10
 80023d2:	f007 fa45 	bl	8009860 <osDelay>
	writeByte(0x01, 0x2F);
 80023d6:	212f      	movs	r1, #47	; 0x2f
 80023d8:	2001      	movs	r0, #1
 80023da:	f7ff ffb3 	bl	8002344 <writeByte>
	osDelay(10);
 80023de:	200a      	movs	r0, #10
 80023e0:	f007 fa3e 	bl	8009860 <osDelay>
	writeByte(0x0, 0x00);
 80023e4:	2100      	movs	r1, #0
 80023e6:	2000      	movs	r0, #0
 80023e8:	f7ff ffac 	bl	8002344 <writeByte>
	osDelay(10);
 80023ec:	200a      	movs	r0, #10
 80023ee:	f007 fa37 	bl	8009860 <osDelay>
	writeByte(0x7F, 0x00);
 80023f2:	2100      	movs	r1, #0
 80023f4:	207f      	movs	r0, #127	; 0x7f
 80023f6:	f7ff ffa5 	bl	8002344 <writeByte>
	osDelay(10);
 80023fa:	200a      	movs	r0, #10
 80023fc:	f007 fa30 	bl	8009860 <osDelay>
	writeByte(0x07, 0x00);
 8002400:	2100      	movs	r1, #0
 8002402:	2007      	movs	r0, #7
 8002404:	f7ff ff9e 	bl	8002344 <writeByte>
	osDelay(10);
 8002408:	200a      	movs	r0, #10
 800240a:	f007 fa29 	bl	8009860 <osDelay>
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800241c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002420:	4803      	ldr	r0, [pc, #12]	; (8002430 <StartDefaultTask+0x1c>)
 8002422:	f002 ff92 	bl	800534a <HAL_GPIO_TogglePin>
		osDelay(2000);
 8002426:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800242a:	f007 fa19 	bl	8009860 <osDelay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800242e:	e7f5      	b.n	800241c <StartDefaultTask+0x8>
 8002430:	40021000 	.word	0x40021000
 8002434:	00000000 	.word	0x00000000

08002438 <StartMotorTask>:
	}
  /* USER CODE END 5 */
}

void StartMotorTask(void *argument)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	//control = 1 gives free rein over the servo direction
  /* USER CODE BEGIN StartMotorTask */
	pwmVal_R = 0;
 8002440:	4b9d      	ldr	r3, [pc, #628]	; (80026b8 <StartMotorTask+0x280>)
 8002442:	2200      	movs	r2, #0
 8002444:	801a      	strh	r2, [r3, #0]
	pwmVal_L = 0;
 8002446:	4b9d      	ldr	r3, [pc, #628]	; (80026bc <StartMotorTask+0x284>)
 8002448:	2200      	movs	r2, #0
 800244a:	801a      	strh	r2, [r3, #0]
	int straightCorrection = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002450:	2100      	movs	r1, #0
 8002452:	489b      	ldr	r0, [pc, #620]	; (80026c0 <StartMotorTask+0x288>)
 8002454:	f004 fc52 	bl	8006cfc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002458:	2104      	movs	r1, #4
 800245a:	4899      	ldr	r0, [pc, #612]	; (80026c0 <StartMotorTask+0x288>)
 800245c:	f004 fc4e 	bl	8006cfc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002460:	210c      	movs	r1, #12
 8002462:	4898      	ldr	r0, [pc, #608]	; (80026c4 <StartMotorTask+0x28c>)
 8002464:	f004 fc4a 	bl	8006cfc <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = SERVOCENTER; //Centre
 8002468:	4b96      	ldr	r3, [pc, #600]	; (80026c4 <StartMotorTask+0x28c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2295      	movs	r2, #149	; 0x95
 800246e:	641a      	str	r2, [r3, #64]	; 0x40


	osDelay(300);
 8002470:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002474:	f007 f9f4 	bl	8009860 <osDelay>


	/* Infinite loop */
	for (;;) {
		htim1.Instance->CCR4 = pwmVal_servo;
 8002478:	4b93      	ldr	r3, [pc, #588]	; (80026c8 <StartMotorTask+0x290>)
 800247a:	881a      	ldrh	r2, [r3, #0]
 800247c:	4b91      	ldr	r3, [pc, #580]	; (80026c4 <StartMotorTask+0x28c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
		error_angle = target_angle - total_angle;
 8002482:	4b92      	ldr	r3, [pc, #584]	; (80026cc <StartMotorTask+0x294>)
 8002484:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002488:	4b91      	ldr	r3, [pc, #580]	; (80026d0 <StartMotorTask+0x298>)
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	f7fd fef3 	bl	8000278 <__aeabi_dsub>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	498f      	ldr	r1, [pc, #572]	; (80026d4 <StartMotorTask+0x29c>)
 8002498:	e9c1 2300 	strd	r2, r3, [r1]
		if(control == 1){
 800249c:	4b8e      	ldr	r3, [pc, #568]	; (80026d8 <StartMotorTask+0x2a0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	f040 8129 	bne.w	80026f8 <StartMotorTask+0x2c0>
			if (pwmVal_servo < 127) { //106 //TURN LEFT
 80024a6:	4b88      	ldr	r3, [pc, #544]	; (80026c8 <StartMotorTask+0x290>)
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	2b7e      	cmp	r3, #126	; 0x7e
 80024ac:	d836      	bhi.n	800251c <StartMotorTask+0xe4>
				//gyroCheck = PID_Angle(error_angle, 1);
				pwmVal_R = PID_Angle(error_angle, 1);  //right is master
 80024ae:	4b89      	ldr	r3, [pc, #548]	; (80026d4 <StartMotorTask+0x29c>)
 80024b0:	ed93 7b00 	vldr	d7, [r3]
 80024b4:	2001      	movs	r0, #1
 80024b6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ba:	eef0 0a67 	vmov.f32	s1, s15
 80024be:	f7ff fdbb 	bl	8002038 <PID_Angle>
 80024c2:	4603      	mov	r3, r0
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b7c      	ldr	r3, [pc, #496]	; (80026b8 <StartMotorTask+0x280>)
 80024c8:	801a      	strh	r2, [r3, #0]
				pwmVal_L = pwmVal_R * (0.33); //left is slave
 80024ca:	4b7b      	ldr	r3, [pc, #492]	; (80026b8 <StartMotorTask+0x280>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe f820 	bl	8000514 <__aeabi_i2d>
 80024d4:	a372      	add	r3, pc, #456	; (adr r3, 80026a0 <StartMotorTask+0x268>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fe f885 	bl	80005e8 <__aeabi_dmul>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	f7fe fb57 	bl	8000b98 <__aeabi_d2uiz>
 80024ea:	4603      	mov	r3, r0
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	4b73      	ldr	r3, [pc, #460]	; (80026bc <StartMotorTask+0x284>)
 80024f0:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- reverse
 80024f2:	2201      	movs	r2, #1
 80024f4:	2108      	movs	r1, #8
 80024f6:	4879      	ldr	r0, [pc, #484]	; (80026dc <StartMotorTask+0x2a4>)
 80024f8:	f002 ff0e 	bl	8005318 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80024fc:	2200      	movs	r2, #0
 80024fe:	2104      	movs	r1, #4
 8002500:	4876      	ldr	r0, [pc, #472]	; (80026dc <StartMotorTask+0x2a4>)
 8002502:	f002 ff09 	bl	8005318 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - Forward
 8002506:	2200      	movs	r2, #0
 8002508:	2120      	movs	r1, #32
 800250a:	4874      	ldr	r0, [pc, #464]	; (80026dc <StartMotorTask+0x2a4>)
 800250c:	f002 ff04 	bl	8005318 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002510:	2201      	movs	r2, #1
 8002512:	2110      	movs	r1, #16
 8002514:	4871      	ldr	r0, [pc, #452]	; (80026dc <StartMotorTask+0x2a4>)
 8002516:	f002 feff 	bl	8005318 <HAL_GPIO_WritePin>
 800251a:	e315      	b.n	8002b48 <StartMotorTask+0x710>
			} else if (pwmVal_servo > 189) { //230 //TURN RIGHT
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <StartMotorTask+0x290>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	2bbd      	cmp	r3, #189	; 0xbd
 8002522:	d936      	bls.n	8002592 <StartMotorTask+0x15a>
				//gyroCheck = PID_Angle(error_angle, 0);
				pwmVal_L = PID_Angle(error_angle, 0);
 8002524:	4b6b      	ldr	r3, [pc, #428]	; (80026d4 <StartMotorTask+0x29c>)
 8002526:	ed93 7b00 	vldr	d7, [r3]
 800252a:	2000      	movs	r0, #0
 800252c:	eeb0 0a47 	vmov.f32	s0, s14
 8002530:	eef0 0a67 	vmov.f32	s1, s15
 8002534:	f7ff fd80 	bl	8002038 <PID_Angle>
 8002538:	4603      	mov	r3, r0
 800253a:	b29a      	uxth	r2, r3
 800253c:	4b5f      	ldr	r3, [pc, #380]	; (80026bc <StartMotorTask+0x284>)
 800253e:	801a      	strh	r2, [r3, #0]
				pwmVal_R = pwmVal_L * (0.37); //right is slave
 8002540:	4b5e      	ldr	r3, [pc, #376]	; (80026bc <StartMotorTask+0x284>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fd ffe5 	bl	8000514 <__aeabi_i2d>
 800254a:	a357      	add	r3, pc, #348	; (adr r3, 80026a8 <StartMotorTask+0x270>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f7fe f84a 	bl	80005e8 <__aeabi_dmul>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f7fe fb1c 	bl	8000b98 <__aeabi_d2uiz>
 8002560:	4603      	mov	r3, r0
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b54      	ldr	r3, [pc, #336]	; (80026b8 <StartMotorTask+0x280>)
 8002566:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- reverse
 8002568:	2201      	movs	r2, #1
 800256a:	2108      	movs	r1, #8
 800256c:	485b      	ldr	r0, [pc, #364]	; (80026dc <StartMotorTask+0x2a4>)
 800256e:	f002 fed3 	bl	8005318 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002572:	2200      	movs	r2, #0
 8002574:	2104      	movs	r1, #4
 8002576:	4859      	ldr	r0, [pc, #356]	; (80026dc <StartMotorTask+0x2a4>)
 8002578:	f002 fece 	bl	8005318 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - Forward
 800257c:	2200      	movs	r2, #0
 800257e:	2120      	movs	r1, #32
 8002580:	4856      	ldr	r0, [pc, #344]	; (80026dc <StartMotorTask+0x2a4>)
 8002582:	f002 fec9 	bl	8005318 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002586:	2201      	movs	r2, #1
 8002588:	2110      	movs	r1, #16
 800258a:	4854      	ldr	r0, [pc, #336]	; (80026dc <StartMotorTask+0x2a4>)
 800258c:	f002 fec4 	bl	8005318 <HAL_GPIO_WritePin>
 8002590:	e2da      	b.n	8002b48 <StartMotorTask+0x710>
			}
			else{
				if(control2 ==1 && control3 == 0){
 8002592:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <StartMotorTask+0x2a8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d10c      	bne.n	80025b4 <StartMotorTask+0x17c>
 800259a:	4b52      	ldr	r3, [pc, #328]	; (80026e4 <StartMotorTask+0x2ac>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d108      	bne.n	80025b4 <StartMotorTask+0x17c>
					pwmVal_R = 4500; // 2600
 80025a2:	4b45      	ldr	r3, [pc, #276]	; (80026b8 <StartMotorTask+0x280>)
 80025a4:	f241 1294 	movw	r2, #4500	; 0x1194
 80025a8:	801a      	strh	r2, [r3, #0]
					pwmVal_L = 4500; // 2600
 80025aa:	4b44      	ldr	r3, [pc, #272]	; (80026bc <StartMotorTask+0x284>)
 80025ac:	f241 1294 	movw	r2, #4500	; 0x1194
 80025b0:	801a      	strh	r2, [r3, #0]
 80025b2:	e018      	b.n	80025e6 <StartMotorTask+0x1ae>
				} else if (control2 == 1 && control3 == 1) {
 80025b4:	4b4a      	ldr	r3, [pc, #296]	; (80026e0 <StartMotorTask+0x2a8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d10c      	bne.n	80025d6 <StartMotorTask+0x19e>
 80025bc:	4b49      	ldr	r3, [pc, #292]	; (80026e4 <StartMotorTask+0x2ac>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d108      	bne.n	80025d6 <StartMotorTask+0x19e>
					pwmVal_R = 3000; // 2600
 80025c4:	4b3c      	ldr	r3, [pc, #240]	; (80026b8 <StartMotorTask+0x280>)
 80025c6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80025ca:	801a      	strh	r2, [r3, #0]
					pwmVal_L = 3000; // 2600 run slight real slow
 80025cc:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <StartMotorTask+0x284>)
 80025ce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80025d2:	801a      	strh	r2, [r3, #0]
 80025d4:	e007      	b.n	80025e6 <StartMotorTask+0x1ae>
				}
				else{
					pwmVal_R = 5000; // 4000
 80025d6:	4b38      	ldr	r3, [pc, #224]	; (80026b8 <StartMotorTask+0x280>)
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	801a      	strh	r2, [r3, #0]
					pwmVal_L = 5000; // 4000
 80025de:	4b37      	ldr	r3, [pc, #220]	; (80026bc <StartMotorTask+0x284>)
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	801a      	strh	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- reverse
 80025e6:	2201      	movs	r2, #1
 80025e8:	2108      	movs	r1, #8
 80025ea:	483c      	ldr	r0, [pc, #240]	; (80026dc <StartMotorTask+0x2a4>)
 80025ec:	f002 fe94 	bl	8005318 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2104      	movs	r1, #4
 80025f4:	4839      	ldr	r0, [pc, #228]	; (80026dc <StartMotorTask+0x2a4>)
 80025f6:	f002 fe8f 	bl	8005318 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - Forward
 80025fa:	2200      	movs	r2, #0
 80025fc:	2120      	movs	r1, #32
 80025fe:	4837      	ldr	r0, [pc, #220]	; (80026dc <StartMotorTask+0x2a4>)
 8002600:	f002 fe8a 	bl	8005318 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002604:	2201      	movs	r2, #1
 8002606:	2110      	movs	r1, #16
 8002608:	4834      	ldr	r0, [pc, #208]	; (80026dc <StartMotorTask+0x2a4>)
 800260a:	f002 fe85 	bl	8005318 <HAL_GPIO_WritePin>
				if(errorcorrection == 1){
 800260e:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <StartMotorTask+0x2b0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	f040 8298 	bne.w	8002b48 <StartMotorTask+0x710>
					if (error_angle>5){ // if turn left, 106. right 230. left +. right -.
 8002618:	4b2e      	ldr	r3, [pc, #184]	; (80026d4 <StartMotorTask+0x29c>)
 800261a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	4b32      	ldr	r3, [pc, #200]	; (80026ec <StartMotorTask+0x2b4>)
 8002624:	f7fe fa70 	bl	8000b08 <__aeabi_dcmpgt>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <StartMotorTask+0x1fe>
						pwmVal_servo=((8*5)/5 + 150);
 800262e:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <StartMotorTask+0x290>)
 8002630:	229e      	movs	r2, #158	; 0x9e
 8002632:	801a      	strh	r2, [r3, #0]
 8002634:	e288      	b.n	8002b48 <StartMotorTask+0x710>
					}
					else if(error_angle<-5){
 8002636:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <StartMotorTask+0x29c>)
 8002638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <StartMotorTask+0x2b8>)
 8002642:	f7fe fa43 	bl	8000acc <__aeabi_dcmplt>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <StartMotorTask+0x21c>
						pwmVal_servo=((-8*5)/5 + 150);
 800264c:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <StartMotorTask+0x290>)
 800264e:	228e      	movs	r2, #142	; 0x8e
 8002650:	801a      	strh	r2, [r3, #0]
 8002652:	e279      	b.n	8002b48 <StartMotorTask+0x710>
					}else{
						pwmVal_servo=((8*error_angle)/5 + 150);
 8002654:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <StartMotorTask+0x29c>)
 8002656:	e9d3 0100 	ldrd	r0, r1, [r3]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <StartMotorTask+0x2bc>)
 8002660:	f7fd ffc2 	bl	80005e8 <__aeabi_dmul>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <StartMotorTask+0x2b4>)
 8002672:	f7fe f8e3 	bl	800083c <__aeabi_ddiv>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	a30c      	add	r3, pc, #48	; (adr r3, 80026b0 <StartMotorTask+0x278>)
 8002680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002684:	f7fd fdfa 	bl	800027c <__adddf3>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	f7fe fa82 	bl	8000b98 <__aeabi_d2uiz>
 8002694:	4603      	mov	r3, r0
 8002696:	b29a      	uxth	r2, r3
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <StartMotorTask+0x290>)
 800269a:	801a      	strh	r2, [r3, #0]
 800269c:	e254      	b.n	8002b48 <StartMotorTask+0x710>
 800269e:	bf00      	nop
 80026a0:	51eb851f 	.word	0x51eb851f
 80026a4:	3fd51eb8 	.word	0x3fd51eb8
 80026a8:	7ae147ae 	.word	0x7ae147ae
 80026ac:	3fd7ae14 	.word	0x3fd7ae14
 80026b0:	00000000 	.word	0x00000000
 80026b4:	4062c000 	.word	0x4062c000
 80026b8:	20000352 	.word	0x20000352
 80026bc:	20000354 	.word	0x20000354
 80026c0:	20000298 	.word	0x20000298
 80026c4:	20000178 	.word	0x20000178
 80026c8:	20000000 	.word	0x20000000
 80026cc:	20000388 	.word	0x20000388
 80026d0:	20000390 	.word	0x20000390
 80026d4:	200003b0 	.word	0x200003b0
 80026d8:	20000358 	.word	0x20000358
 80026dc:	40020000 	.word	0x40020000
 80026e0:	2000035c 	.word	0x2000035c
 80026e4:	20000360 	.word	0x20000360
 80026e8:	2000036c 	.word	0x2000036c
 80026ec:	40140000 	.word	0x40140000
 80026f0:	c0140000 	.word	0xc0140000
 80026f4:	40200000 	.word	0x40200000
				}
			}

		}
		else{
			if (pwmVal_servo < 127) { //106 //TURN LEFT
 80026f8:	4bb3      	ldr	r3, [pc, #716]	; (80029c8 <StartMotorTask+0x590>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	2b7e      	cmp	r3, #126	; 0x7e
 80026fe:	d87a      	bhi.n	80027f6 <StartMotorTask+0x3be>
				pwmVal_R = PID_Angle(error_angle, 1)*1.1;  //right is master
 8002700:	4bb2      	ldr	r3, [pc, #712]	; (80029cc <StartMotorTask+0x594>)
 8002702:	ed93 7b00 	vldr	d7, [r3]
 8002706:	2001      	movs	r0, #1
 8002708:	eeb0 0a47 	vmov.f32	s0, s14
 800270c:	eef0 0a67 	vmov.f32	s1, s15
 8002710:	f7ff fc92 	bl	8002038 <PID_Angle>
 8002714:	4603      	mov	r3, r0
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd fefc 	bl	8000514 <__aeabi_i2d>
 800271c:	a3a0      	add	r3, pc, #640	; (adr r3, 80029a0 <StartMotorTask+0x568>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	f7fd ff61 	bl	80005e8 <__aeabi_dmul>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	f7fe fa33 	bl	8000b98 <__aeabi_d2uiz>
 8002732:	4603      	mov	r3, r0
 8002734:	b29a      	uxth	r2, r3
 8002736:	4ba6      	ldr	r3, [pc, #664]	; (80029d0 <StartMotorTask+0x598>)
 8002738:	801a      	strh	r2, [r3, #0]
				pwmVal_L = pwmVal_R * (0.33); //left is slave
 800273a:	4ba5      	ldr	r3, [pc, #660]	; (80029d0 <StartMotorTask+0x598>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd fee8 	bl	8000514 <__aeabi_i2d>
 8002744:	a398      	add	r3, pc, #608	; (adr r3, 80029a8 <StartMotorTask+0x570>)
 8002746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274a:	f7fd ff4d 	bl	80005e8 <__aeabi_dmul>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f7fe fa1f 	bl	8000b98 <__aeabi_d2uiz>
 800275a:	4603      	mov	r3, r0
 800275c:	b29a      	uxth	r2, r3
 800275e:	4b9d      	ldr	r3, [pc, #628]	; (80029d4 <StartMotorTask+0x59c>)
 8002760:	801a      	strh	r2, [r3, #0]

				if (error_angle > 0) {
 8002762:	4b9a      	ldr	r3, [pc, #616]	; (80029cc <StartMotorTask+0x594>)
 8002764:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	f7fe f9ca 	bl	8000b08 <__aeabi_dcmpgt>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d014      	beq.n	80027a4 <StartMotorTask+0x36c>
					//go forward
					//pwmVal_L = pwmVal_R * (0.79); //left is slave
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- reverse
 800277a:	2201      	movs	r2, #1
 800277c:	2108      	movs	r1, #8
 800277e:	4896      	ldr	r0, [pc, #600]	; (80029d8 <StartMotorTask+0x5a0>)
 8002780:	f002 fdca 	bl	8005318 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002784:	2200      	movs	r2, #0
 8002786:	2104      	movs	r1, #4
 8002788:	4893      	ldr	r0, [pc, #588]	; (80029d8 <StartMotorTask+0x5a0>)
 800278a:	f002 fdc5 	bl	8005318 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - Forward
 800278e:	2200      	movs	r2, #0
 8002790:	2120      	movs	r1, #32
 8002792:	4891      	ldr	r0, [pc, #580]	; (80029d8 <StartMotorTask+0x5a0>)
 8002794:	f002 fdc0 	bl	8005318 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002798:	2201      	movs	r2, #1
 800279a:	2110      	movs	r1, #16
 800279c:	488e      	ldr	r0, [pc, #568]	; (80029d8 <StartMotorTask+0x5a0>)
 800279e:	f002 fdbb 	bl	8005318 <HAL_GPIO_WritePin>
 80027a2:	e1d1      	b.n	8002b48 <StartMotorTask+0x710>
				} else {
					//go backward
					pwmVal_L = pwmVal_R * (0.49); //left is slave
 80027a4:	4b8a      	ldr	r3, [pc, #552]	; (80029d0 <StartMotorTask+0x598>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd feb3 	bl	8000514 <__aeabi_i2d>
 80027ae:	a380      	add	r3, pc, #512	; (adr r3, 80029b0 <StartMotorTask+0x578>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	f7fd ff18 	bl	80005e8 <__aeabi_dmul>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f7fe f9ea 	bl	8000b98 <__aeabi_d2uiz>
 80027c4:	4603      	mov	r3, r0
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	4b82      	ldr	r3, [pc, #520]	; (80029d4 <StartMotorTask+0x59c>)
 80027ca:	801a      	strh	r2, [r3, #0]
					//pwmVal_servo = 106;
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - forward
 80027cc:	2200      	movs	r2, #0
 80027ce:	2108      	movs	r1, #8
 80027d0:	4881      	ldr	r0, [pc, #516]	; (80029d8 <StartMotorTask+0x5a0>)
 80027d2:	f002 fda1 	bl	8005318 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80027d6:	2201      	movs	r2, #1
 80027d8:	2104      	movs	r1, #4
 80027da:	487f      	ldr	r0, [pc, #508]	; (80029d8 <StartMotorTask+0x5a0>)
 80027dc:	f002 fd9c 	bl	8005318 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- reverse
 80027e0:	2201      	movs	r2, #1
 80027e2:	2120      	movs	r1, #32
 80027e4:	487c      	ldr	r0, [pc, #496]	; (80029d8 <StartMotorTask+0x5a0>)
 80027e6:	f002 fd97 	bl	8005318 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2110      	movs	r1, #16
 80027ee:	487a      	ldr	r0, [pc, #488]	; (80029d8 <StartMotorTask+0x5a0>)
 80027f0:	f002 fd92 	bl	8005318 <HAL_GPIO_WritePin>
 80027f4:	e1a8      	b.n	8002b48 <StartMotorTask+0x710>
				}
			} else if (pwmVal_servo > 189) { //230 //TURN RIGHT
 80027f6:	4b74      	ldr	r3, [pc, #464]	; (80029c8 <StartMotorTask+0x590>)
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	2bbd      	cmp	r3, #189	; 0xbd
 80027fc:	d96b      	bls.n	80028d6 <StartMotorTask+0x49e>
				pwmVal_L = PID_Angle(error_angle, 0);
 80027fe:	4b73      	ldr	r3, [pc, #460]	; (80029cc <StartMotorTask+0x594>)
 8002800:	ed93 7b00 	vldr	d7, [r3]
 8002804:	2000      	movs	r0, #0
 8002806:	eeb0 0a47 	vmov.f32	s0, s14
 800280a:	eef0 0a67 	vmov.f32	s1, s15
 800280e:	f7ff fc13 	bl	8002038 <PID_Angle>
 8002812:	4603      	mov	r3, r0
 8002814:	b29a      	uxth	r2, r3
 8002816:	4b6f      	ldr	r3, [pc, #444]	; (80029d4 <StartMotorTask+0x59c>)
 8002818:	801a      	strh	r2, [r3, #0]
				pwmVal_R = pwmVal_L * (0.37); //right is slave
 800281a:	4b6e      	ldr	r3, [pc, #440]	; (80029d4 <StartMotorTask+0x59c>)
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fd fe78 	bl	8000514 <__aeabi_i2d>
 8002824:	a364      	add	r3, pc, #400	; (adr r3, 80029b8 <StartMotorTask+0x580>)
 8002826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282a:	f7fd fedd 	bl	80005e8 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	f7fe f9af 	bl	8000b98 <__aeabi_d2uiz>
 800283a:	4603      	mov	r3, r0
 800283c:	b29a      	uxth	r2, r3
 800283e:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <StartMotorTask+0x598>)
 8002840:	801a      	strh	r2, [r3, #0]

				if (error_angle < 0) {
 8002842:	4b62      	ldr	r3, [pc, #392]	; (80029cc <StartMotorTask+0x594>)
 8002844:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	f7fe f93c 	bl	8000acc <__aeabi_dcmplt>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d014      	beq.n	8002884 <StartMotorTask+0x44c>
					//go forward
					//pwmVal_R = pwmVal_L * (0.37); //right is slave
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- Reverse
 800285a:	2201      	movs	r2, #1
 800285c:	2110      	movs	r1, #16
 800285e:	485e      	ldr	r0, [pc, #376]	; (80029d8 <StartMotorTask+0x5a0>)
 8002860:	f002 fd5a 	bl	8005318 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002864:	2200      	movs	r2, #0
 8002866:	2120      	movs	r1, #32
 8002868:	485b      	ldr	r0, [pc, #364]	; (80029d8 <StartMotorTask+0x5a0>)
 800286a:	f002 fd55 	bl	8005318 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - forward
 800286e:	2200      	movs	r2, #0
 8002870:	2104      	movs	r1, #4
 8002872:	4859      	ldr	r0, [pc, #356]	; (80029d8 <StartMotorTask+0x5a0>)
 8002874:	f002 fd50 	bl	8005318 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002878:	2201      	movs	r2, #1
 800287a:	2108      	movs	r1, #8
 800287c:	4856      	ldr	r0, [pc, #344]	; (80029d8 <StartMotorTask+0x5a0>)
 800287e:	f002 fd4b 	bl	8005318 <HAL_GPIO_WritePin>
 8002882:	e161      	b.n	8002b48 <StartMotorTask+0x710>
				} else {
					//go backward
					pwmVal_R = pwmVal_L * (0.305); //right is slave
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <StartMotorTask+0x59c>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7fd fe43 	bl	8000514 <__aeabi_i2d>
 800288e:	a34c      	add	r3, pc, #304	; (adr r3, 80029c0 <StartMotorTask+0x588>)
 8002890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002894:	f7fd fea8 	bl	80005e8 <__aeabi_dmul>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	f7fe f97a 	bl	8000b98 <__aeabi_d2uiz>
 80028a4:	4603      	mov	r3, r0
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	4b49      	ldr	r3, [pc, #292]	; (80029d0 <StartMotorTask+0x598>)
 80028aa:	801a      	strh	r2, [r3, #0]

					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 80028ac:	2200      	movs	r2, #0
 80028ae:	2110      	movs	r1, #16
 80028b0:	4849      	ldr	r0, [pc, #292]	; (80029d8 <StartMotorTask+0x5a0>)
 80028b2:	f002 fd31 	bl	8005318 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80028b6:	2201      	movs	r2, #1
 80028b8:	2120      	movs	r1, #32
 80028ba:	4847      	ldr	r0, [pc, #284]	; (80029d8 <StartMotorTask+0x5a0>)
 80028bc:	f002 fd2c 	bl	8005318 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- forward
 80028c0:	2201      	movs	r2, #1
 80028c2:	2104      	movs	r1, #4
 80028c4:	4844      	ldr	r0, [pc, #272]	; (80029d8 <StartMotorTask+0x5a0>)
 80028c6:	f002 fd27 	bl	8005318 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2108      	movs	r1, #8
 80028ce:	4842      	ldr	r0, [pc, #264]	; (80029d8 <StartMotorTask+0x5a0>)
 80028d0:	f002 fd22 	bl	8005318 <HAL_GPIO_WritePin>
 80028d4:	e138      	b.n	8002b48 <StartMotorTask+0x710>
				}
			} else {
				if(straightUS) {
 80028d6:	4b41      	ldr	r3, [pc, #260]	; (80029dc <StartMotorTask+0x5a4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d03f      	beq.n	800295e <StartMotorTask+0x526>
					pwmVal_L = PID_Juke(Distance, 1);
 80028de:	4b40      	ldr	r3, [pc, #256]	; (80029e0 <StartMotorTask+0x5a8>)
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fe06 	bl	80004f4 <__aeabi_ui2d>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	2001      	movs	r0, #1
 80028ee:	ec43 2b10 	vmov	d0, r2, r3
 80028f2:	f7ff fabd 	bl	8001e70 <PID_Juke>
 80028f6:	4603      	mov	r3, r0
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <StartMotorTask+0x59c>)
 80028fc:	801a      	strh	r2, [r3, #0]
					if (abs(leftEncoderVal)<abs(rightEncoderVal)){
 80028fe:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <StartMotorTask+0x5ac>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002906:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800290a:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <StartMotorTask+0x5b0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	bfb8      	it	lt
 8002912:	425b      	neglt	r3, r3
 8002914:	429a      	cmp	r2, r3
 8002916:	da03      	bge.n	8002920 <StartMotorTask+0x4e8>
						straightCorrection++;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3301      	adds	r3, #1
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e002      	b.n	8002926 <StartMotorTask+0x4ee>
					} else{ straightCorrection--;}
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3b01      	subs	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
					if (pwmVal_R<1000){
 8002926:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <StartMotorTask+0x598>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800292e:	d201      	bcs.n	8002934 <StartMotorTask+0x4fc>
						straightCorrection=0;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]
					}
					pwmVal_R = PID_Juke(Distance, 0) + straightCorrection;
 8002934:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <StartMotorTask+0x5a8>)
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7fd fddb 	bl	80004f4 <__aeabi_ui2d>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	2000      	movs	r0, #0
 8002944:	ec43 2b10 	vmov	d0, r2, r3
 8002948:	f7ff fa92 	bl	8001e70 <PID_Juke>
 800294c:	4603      	mov	r3, r0
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	b29b      	uxth	r3, r3
 8002954:	4413      	add	r3, r2
 8002956:	b29a      	uxth	r2, r3
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <StartMotorTask+0x598>)
 800295a:	801a      	strh	r2, [r3, #0]
 800295c:	e063      	b.n	8002a26 <StartMotorTask+0x5ee>

				}
				else {
					pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1);
 800295e:	4b23      	ldr	r3, [pc, #140]	; (80029ec <StartMotorTask+0x5b4>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <StartMotorTask+0x5b0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2101      	movs	r1, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fa04 	bl	8001d78 <PID_Control>
 8002970:	4603      	mov	r3, r0
 8002972:	b29a      	uxth	r2, r3
 8002974:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <StartMotorTask+0x59c>)
 8002976:	801a      	strh	r2, [r3, #0]
					if (abs(leftEncoderVal)<abs(rightEncoderVal)){
 8002978:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <StartMotorTask+0x5ac>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002980:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002984:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <StartMotorTask+0x5b0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	bfb8      	it	lt
 800298c:	425b      	neglt	r3, r3
 800298e:	429a      	cmp	r2, r3
 8002990:	da2e      	bge.n	80029f0 <StartMotorTask+0x5b8>
						straightCorrection++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3301      	adds	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e02d      	b.n	80029f6 <StartMotorTask+0x5be>
 800299a:	bf00      	nop
 800299c:	f3af 8000 	nop.w
 80029a0:	9999999a 	.word	0x9999999a
 80029a4:	3ff19999 	.word	0x3ff19999
 80029a8:	51eb851f 	.word	0x51eb851f
 80029ac:	3fd51eb8 	.word	0x3fd51eb8
 80029b0:	f5c28f5c 	.word	0xf5c28f5c
 80029b4:	3fdf5c28 	.word	0x3fdf5c28
 80029b8:	7ae147ae 	.word	0x7ae147ae
 80029bc:	3fd7ae14 	.word	0x3fd7ae14
 80029c0:	b851eb85 	.word	0xb851eb85
 80029c4:	3fd3851e 	.word	0x3fd3851e
 80029c8:	20000000 	.word	0x20000000
 80029cc:	200003b0 	.word	0x200003b0
 80029d0:	20000352 	.word	0x20000352
 80029d4:	20000354 	.word	0x20000354
 80029d8:	40020000 	.word	0x40020000
 80029dc:	20000370 	.word	0x20000370
 80029e0:	200003c6 	.word	0x200003c6
 80029e4:	20000378 	.word	0x20000378
 80029e8:	20000374 	.word	0x20000374
 80029ec:	2000037c 	.word	0x2000037c
					} else {
						straightCorrection--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	60fb      	str	r3, [r7, #12]
					}
					if (pwmVal_R<1000){
 80029f6:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <StartMotorTask+0x798>)
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029fe:	d201      	bcs.n	8002a04 <StartMotorTask+0x5cc>
						straightCorrection=0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
					}
					pwmVal_R = PID_Control(leftTarget - leftEncoderVal, 0) + straightCorrection;
 8002a04:	4b73      	ldr	r3, [pc, #460]	; (8002bd4 <StartMotorTask+0x79c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b73      	ldr	r3, [pc, #460]	; (8002bd8 <StartMotorTask+0x7a0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff f9b1 	bl	8001d78 <PID_Control>
 8002a16:	4603      	mov	r3, r0
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	4b6b      	ldr	r3, [pc, #428]	; (8002bd0 <StartMotorTask+0x798>)
 8002a24:	801a      	strh	r2, [r3, #0]
				}
				//line correction equation is pwmVal = (19*error)/5 + SERVOCENTER
				if (errorcorrection == 1){
 8002a26:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <StartMotorTask+0x7a4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	f040 808c 	bne.w	8002b48 <StartMotorTask+0x710>
					if(Distance>usTargetGLOBAL){
 8002a30:	4b6b      	ldr	r3, [pc, #428]	; (8002be0 <StartMotorTask+0x7a8>)
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b6b      	ldr	r3, [pc, #428]	; (8002be4 <StartMotorTask+0x7ac>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	dd42      	ble.n	8002ac4 <StartMotorTask+0x68c>
						if (error_angle>5){ // if turn left, 106. right 230. left +. right -.
 8002a3e:	4b6a      	ldr	r3, [pc, #424]	; (8002be8 <StartMotorTask+0x7b0>)
 8002a40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	4b68      	ldr	r3, [pc, #416]	; (8002bec <StartMotorTask+0x7b4>)
 8002a4a:	f7fe f85d 	bl	8000b08 <__aeabi_dcmpgt>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <StartMotorTask+0x624>
							pwmVal_servo=((-8*5)/5 + 150);
 8002a54:	4b66      	ldr	r3, [pc, #408]	; (8002bf0 <StartMotorTask+0x7b8>)
 8002a56:	228e      	movs	r2, #142	; 0x8e
 8002a58:	801a      	strh	r2, [r3, #0]
 8002a5a:	e075      	b.n	8002b48 <StartMotorTask+0x710>
						}
						else if(error_angle<-5){
 8002a5c:	4b62      	ldr	r3, [pc, #392]	; (8002be8 <StartMotorTask+0x7b0>)
 8002a5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <StartMotorTask+0x7bc>)
 8002a68:	f7fe f830 	bl	8000acc <__aeabi_dcmplt>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <StartMotorTask+0x642>
							pwmVal_servo=((8*5)/5 + 150);
 8002a72:	4b5f      	ldr	r3, [pc, #380]	; (8002bf0 <StartMotorTask+0x7b8>)
 8002a74:	229e      	movs	r2, #158	; 0x9e
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	e066      	b.n	8002b48 <StartMotorTask+0x710>
						}else{
							pwmVal_servo=((-8*error_angle)/5 + 150);
 8002a7a:	4b5b      	ldr	r3, [pc, #364]	; (8002be8 <StartMotorTask+0x7b0>)
 8002a7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	4b5c      	ldr	r3, [pc, #368]	; (8002bf8 <StartMotorTask+0x7c0>)
 8002a86:	f7fd fdaf 	bl	80005e8 <__aeabi_dmul>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	4b55      	ldr	r3, [pc, #340]	; (8002bec <StartMotorTask+0x7b4>)
 8002a98:	f7fd fed0 	bl	800083c <__aeabi_ddiv>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	a346      	add	r3, pc, #280	; (adr r3, 8002bc0 <StartMotorTask+0x788>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f7fd fbe7 	bl	800027c <__adddf3>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f7fe f86f 	bl	8000b98 <__aeabi_d2uiz>
 8002aba:	4603      	mov	r3, r0
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	4b4c      	ldr	r3, [pc, #304]	; (8002bf0 <StartMotorTask+0x7b8>)
 8002ac0:	801a      	strh	r2, [r3, #0]
 8002ac2:	e041      	b.n	8002b48 <StartMotorTask+0x710>
						}
					} else {
						if (error_angle>5){ // if turn left, 106. right 230. left +. right -.
 8002ac4:	4b48      	ldr	r3, [pc, #288]	; (8002be8 <StartMotorTask+0x7b0>)
 8002ac6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	4b47      	ldr	r3, [pc, #284]	; (8002bec <StartMotorTask+0x7b4>)
 8002ad0:	f7fe f81a 	bl	8000b08 <__aeabi_dcmpgt>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <StartMotorTask+0x6aa>
							pwmVal_servo=((8*5)/5 + 150);
 8002ada:	4b45      	ldr	r3, [pc, #276]	; (8002bf0 <StartMotorTask+0x7b8>)
 8002adc:	229e      	movs	r2, #158	; 0x9e
 8002ade:	801a      	strh	r2, [r3, #0]
 8002ae0:	e032      	b.n	8002b48 <StartMotorTask+0x710>
						}
						else if(error_angle<-5){
 8002ae2:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <StartMotorTask+0x7b0>)
 8002ae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <StartMotorTask+0x7bc>)
 8002aee:	f7fd ffed 	bl	8000acc <__aeabi_dcmplt>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <StartMotorTask+0x6c8>
							pwmVal_servo=((-8*5)/5 + 150);
 8002af8:	4b3d      	ldr	r3, [pc, #244]	; (8002bf0 <StartMotorTask+0x7b8>)
 8002afa:	228e      	movs	r2, #142	; 0x8e
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	e023      	b.n	8002b48 <StartMotorTask+0x710>
						}else{
							pwmVal_servo=((8*error_angle)/5 + 150);
 8002b00:	4b39      	ldr	r3, [pc, #228]	; (8002be8 <StartMotorTask+0x7b0>)
 8002b02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	4b3c      	ldr	r3, [pc, #240]	; (8002bfc <StartMotorTask+0x7c4>)
 8002b0c:	f7fd fd6c 	bl	80005e8 <__aeabi_dmul>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	4b33      	ldr	r3, [pc, #204]	; (8002bec <StartMotorTask+0x7b4>)
 8002b1e:	f7fd fe8d 	bl	800083c <__aeabi_ddiv>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	a325      	add	r3, pc, #148	; (adr r3, 8002bc0 <StartMotorTask+0x788>)
 8002b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b30:	f7fd fba4 	bl	800027c <__adddf3>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7fe f82c 	bl	8000b98 <__aeabi_d2uiz>
 8002b40:	4603      	mov	r3, r0
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	4b2a      	ldr	r3, [pc, #168]	; (8002bf0 <StartMotorTask+0x7b8>)
 8002b46:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}

		if (e_brake) {
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <StartMotorTask+0x7c8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <StartMotorTask+0x736>
			pwmVal_L = pwmVal_R = 0;
 8002b50:	4b1f      	ldr	r3, [pc, #124]	; (8002bd0 <StartMotorTask+0x798>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	801a      	strh	r2, [r3, #0]
 8002b56:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <StartMotorTask+0x798>)
 8002b58:	881a      	ldrh	r2, [r3, #0]
 8002b5a:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <StartMotorTask+0x7cc>)
 8002b5c:	801a      	strh	r2, [r3, #0]
			leftTarget = leftEncoderVal;
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <StartMotorTask+0x7a0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <StartMotorTask+0x79c>)
 8002b64:	6013      	str	r3, [r2, #0]
			rightTarget = rightEncoderVal;
 8002b66:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <StartMotorTask+0x7d0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a28      	ldr	r2, [pc, #160]	; (8002c0c <StartMotorTask+0x7d4>)
 8002b6c:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L);
 8002b6e:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <StartMotorTask+0x7cc>)
 8002b70:	881a      	ldrh	r2, [r3, #0]
 8002b72:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <StartMotorTask+0x7d8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	635a      	str	r2, [r3, #52]	; 0x34

		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(pwmVal_R * 1.15));
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <StartMotorTask+0x798>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fd fcc9 	bl	8000514 <__aeabi_i2d>
 8002b82:	a311      	add	r3, pc, #68	; (adr r3, 8002bc8 <StartMotorTask+0x790>)
 8002b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b88:	f7fd fd2e 	bl	80005e8 <__aeabi_dmul>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	491f      	ldr	r1, [pc, #124]	; (8002c10 <StartMotorTask+0x7d8>)
 8002b92:	680c      	ldr	r4, [r1, #0]
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	f7fd fffe 	bl	8000b98 <__aeabi_d2uiz>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	63a3      	str	r3, [r4, #56]	; 0x38
		osDelay(1);
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f006 fe5d 	bl	8009860 <osDelay>

		if (times_acceptable > 1000) {
 8002ba6:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <StartMotorTask+0x7dc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bae:	f77f ac63 	ble.w	8002478 <StartMotorTask+0x40>
			times_acceptable = 1001;
 8002bb2:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <StartMotorTask+0x7dc>)
 8002bb4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002bb8:	601a      	str	r2, [r3, #0]
		htim1.Instance->CCR4 = pwmVal_servo;
 8002bba:	e45d      	b.n	8002478 <StartMotorTask+0x40>
 8002bbc:	f3af 8000 	nop.w
 8002bc0:	00000000 	.word	0x00000000
 8002bc4:	4062c000 	.word	0x4062c000
 8002bc8:	66666666 	.word	0x66666666
 8002bcc:	3ff26666 	.word	0x3ff26666
 8002bd0:	20000352 	.word	0x20000352
 8002bd4:	20000380 	.word	0x20000380
 8002bd8:	20000378 	.word	0x20000378
 8002bdc:	2000036c 	.word	0x2000036c
 8002be0:	200003c6 	.word	0x200003c6
 8002be4:	20000004 	.word	0x20000004
 8002be8:	200003b0 	.word	0x200003b0
 8002bec:	40140000 	.word	0x40140000
 8002bf0:	20000000 	.word	0x20000000
 8002bf4:	c0140000 	.word	0xc0140000
 8002bf8:	c0200000 	.word	0xc0200000
 8002bfc:	40200000 	.word	0x40200000
 8002c00:	20000368 	.word	0x20000368
 8002c04:	20000354 	.word	0x20000354
 8002c08:	20000374 	.word	0x20000374
 8002c0c:	2000037c 	.word	0x2000037c
 8002c10:	20000298 	.word	0x20000298
 8002c14:	20000364 	.word	0x20000364

08002c18 <StartOLEDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8002c18:	b5b0      	push	{r4, r5, r7, lr}
 8002c1a:	b09e      	sub	sp, #120	; 0x78
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	uint8_t usVal[20] = { 0 };
 8002c20:	2300      	movs	r3, #0
 8002c22:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
	uint8_t gyroVal[20] = { 0 };
 8002c32:	2300      	movs	r3, #0
 8002c34:	647b      	str	r3, [r7, #68]	; 0x44
 8002c36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	60da      	str	r2, [r3, #12]
	uint8_t command[20] = { 0 };
 8002c44:	2300      	movs	r3, #0
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
 8002c48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
	uint8_t lefty[20] = { 0 };
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	f107 0320 	add.w	r3, r7, #32
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
	uint8_t righty[20] = { 0 };
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	f107 030c 	add.w	r3, r7, #12
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
	for (;;) {
		sprintf(usVal, "Distance: %d \0", (int) Distance);
 8002c7a:	4b46      	ldr	r3, [pc, #280]	; (8002d94 <StartOLEDTask+0x17c>)
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c84:	4944      	ldr	r1, [pc, #272]	; (8002d98 <StartOLEDTask+0x180>)
 8002c86:	4618      	mov	r0, r3
 8002c88:	f009 fa88 	bl	800c19c <siprintf>
		OLED_ShowString(0, 10, usVal);
 8002c8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c90:	461a      	mov	r2, r3
 8002c92:	210a      	movs	r1, #10
 8002c94:	2000      	movs	r0, #0
 8002c96:	f001 faab 	bl	80041f0 <OLED_ShowString>

		int decimals = abs((int) ((total_angle - (int) (total_angle)) * 1000));
 8002c9a:	4b40      	ldr	r3, [pc, #256]	; (8002d9c <StartOLEDTask+0x184>)
 8002c9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ca0:	4b3e      	ldr	r3, [pc, #248]	; (8002d9c <StartOLEDTask+0x184>)
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ff4d 	bl	8000b48 <__aeabi_d2iz>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fc2f 	bl	8000514 <__aeabi_i2d>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4620      	mov	r0, r4
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	f7fd fadb 	bl	8000278 <__aeabi_dsub>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <StartOLEDTask+0x188>)
 8002cd0:	f7fd fc8a 	bl	80005e8 <__aeabi_dmul>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f7fd ff34 	bl	8000b48 <__aeabi_d2iz>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bfb8      	it	lt
 8002ce6:	425b      	neglt	r3, r3
 8002ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
		sprintf(gyroVal, "TGyro: %d.%d \0", (int) total_angle, decimals);
 8002cea:	4b2c      	ldr	r3, [pc, #176]	; (8002d9c <StartOLEDTask+0x184>)
 8002cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f7fd ff28 	bl	8000b48 <__aeabi_d2iz>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d00:	4928      	ldr	r1, [pc, #160]	; (8002da4 <StartOLEDTask+0x18c>)
 8002d02:	f009 fa4b 	bl	800c19c <siprintf>
		OLED_ShowString(0, 20, gyroVal);
 8002d06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2114      	movs	r1, #20
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f001 fa6e 	bl	80041f0 <OLED_ShowString>
		sprintf(lefty, "IRL: %d \0", irDistance1);
 8002d14:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <StartOLEDTask+0x190>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	4923      	ldr	r1, [pc, #140]	; (8002dac <StartOLEDTask+0x194>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f009 fa3c 	bl	800c19c <siprintf>
		OLED_ShowString(0, 30, lefty);
 8002d24:	f107 031c 	add.w	r3, r7, #28
 8002d28:	461a      	mov	r2, r3
 8002d2a:	211e      	movs	r1, #30
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f001 fa5f 	bl	80041f0 <OLED_ShowString>
		sprintf(righty, "IRR: %d \0", irDistance2);
 8002d32:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <StartOLEDTask+0x198>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	f107 0308 	add.w	r3, r7, #8
 8002d3a:	491e      	ldr	r1, [pc, #120]	; (8002db4 <StartOLEDTask+0x19c>)
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f009 fa2d 	bl	800c19c <siprintf>
		OLED_ShowString(0, 40, righty);
 8002d42:	f107 0308 	add.w	r3, r7, #8
 8002d46:	461a      	mov	r2, r3
 8002d48:	2128      	movs	r1, #40	; 0x28
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f001 fa50 	bl	80041f0 <OLED_ShowString>

		sprintf(command, "C: %c%c%c%c \0", aRxBuffer[0],aRxBuffer[1],aRxBuffer[2],aRxBuffer[3]);
 8002d50:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <StartOLEDTask+0x1a0>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	4619      	mov	r1, r3
 8002d56:	4b18      	ldr	r3, [pc, #96]	; (8002db8 <StartOLEDTask+0x1a0>)
 8002d58:	785b      	ldrb	r3, [r3, #1]
 8002d5a:	461c      	mov	r4, r3
 8002d5c:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <StartOLEDTask+0x1a0>)
 8002d5e:	789b      	ldrb	r3, [r3, #2]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <StartOLEDTask+0x1a0>)
 8002d64:	78db      	ldrb	r3, [r3, #3]
 8002d66:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	9200      	str	r2, [sp, #0]
 8002d6e:	4623      	mov	r3, r4
 8002d70:	460a      	mov	r2, r1
 8002d72:	4912      	ldr	r1, [pc, #72]	; (8002dbc <StartOLEDTask+0x1a4>)
 8002d74:	f009 fa12 	bl	800c19c <siprintf>
		OLED_ShowString(0, 50, command);
 8002d78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	2132      	movs	r1, #50	; 0x32
 8002d80:	2000      	movs	r0, #0
 8002d82:	f001 fa35 	bl	80041f0 <OLED_ShowString>

		OLED_Refresh_Gram();
 8002d86:	f001 f8bf 	bl	8003f08 <OLED_Refresh_Gram>
		osDelay(100);
 8002d8a:	2064      	movs	r0, #100	; 0x64
 8002d8c:	f006 fd68 	bl	8009860 <osDelay>
	for (;;) {
 8002d90:	e773      	b.n	8002c7a <StartOLEDTask+0x62>
 8002d92:	bf00      	nop
 8002d94:	200003c6 	.word	0x200003c6
 8002d98:	0800daec 	.word	0x0800daec
 8002d9c:	20000390 	.word	0x20000390
 8002da0:	408f4000 	.word	0x408f4000
 8002da4:	0800dafc 	.word	0x0800dafc
 8002da8:	200003d4 	.word	0x200003d4
 8002dac:	0800db0c 	.word	0x0800db0c
 8002db0:	200003d8 	.word	0x200003d8
 8002db4:	0800db18 	.word	0x0800db18
 8002db8:	2000034c 	.word	0x2000034c
 8002dbc:	0800db24 	.word	0x0800db24

08002dc0 <StartGyroTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument)
{
 8002dc0:	b5b0      	push	{r4, r5, r7, lr}
 8002dc2:	b08a      	sub	sp, #40	; 0x28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGyroTask */
	gyroInit();
 8002dc8:	f7ff fae0 	bl	800238c <gyroInit>
	uint8_t val[2] = { 0, 0 };
 8002dcc:	2300      	movs	r3, #0
 8002dce:	813b      	strh	r3, [r7, #8]

	int16_t angular_speed = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	817b      	strh	r3, [r7, #10]

	uint32_t tick = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
	double offset = 0;
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double trash = 0;
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int i = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
	while (i < 300) { // 300, reduce the calibration
 8002df4:	e048      	b.n	8002e88 <StartGyroTask+0xc8>
		osDelay(30); // 50, reduce the sampling
 8002df6:	201e      	movs	r0, #30
 8002df8:	f006 fd32 	bl	8009860 <osDelay>
		readByte(0x37, val);
 8002dfc:	f107 0308 	add.w	r3, r7, #8
 8002e00:	4619      	mov	r1, r3
 8002e02:	2037      	movs	r0, #55	; 0x37
 8002e04:	f7ff fa72 	bl	80022ec <readByte>
		angular_speed = (val[0] << 8) | val[1];
 8002e08:	7a3b      	ldrb	r3, [r7, #8]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	b21a      	sxth	r2, r3
 8002e0e:	7a7b      	ldrb	r3, [r7, #9]
 8002e10:	b21b      	sxth	r3, r3
 8002e12:	4313      	orrs	r3, r2
 8002e14:	817b      	strh	r3, [r7, #10]
		trash += (double) ((double) angular_speed)
 8002e16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd fb7a 	bl	8000514 <__aeabi_i2d>
 8002e20:	4604      	mov	r4, r0
 8002e22:	460d      	mov	r5, r1
				* ((HAL_GetTick() - tick) / 16400.0);
 8002e24:	f001 fb08 	bl	8004438 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fb60 	bl	80004f4 <__aeabi_ui2d>
 8002e34:	a34a      	add	r3, pc, #296	; (adr r3, 8002f60 <StartGyroTask+0x1a0>)
 8002e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3a:	f7fd fcff 	bl	800083c <__aeabi_ddiv>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4620      	mov	r0, r4
 8002e44:	4629      	mov	r1, r5
 8002e46:	f7fd fbcf 	bl	80005e8 <__aeabi_dmul>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
		trash += (double) ((double) angular_speed)
 8002e4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e52:	f7fd fa13 	bl	800027c <__adddf3>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		offset += angular_speed;
 8002e5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd fb56 	bl	8000514 <__aeabi_i2d>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e70:	f7fd fa04 	bl	800027c <__adddf3>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	e9c7 2306 	strd	r2, r3, [r7, #24]
		tick = HAL_GetTick();
 8002e7c:	f001 fadc 	bl	8004438 <HAL_GetTick>
 8002e80:	6278      	str	r0, [r7, #36]	; 0x24
		i++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3301      	adds	r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
	while (i < 300) { // 300, reduce the calibration
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002e8e:	dbb2      	blt.n	8002df6 <StartGyroTask+0x36>
	}
	buzzerBeep();
 8002e90:	f7fe fe86 	bl	8001ba0 <buzzerBeep>
	k = 1;
 8002e94:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <StartGyroTask+0x1a8>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
	offset = offset / i;
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f7fd fb3a 	bl	8000514 <__aeabi_i2d>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ea8:	f7fd fcc8 	bl	800083c <__aeabi_ddiv>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	e9c7 2306 	strd	r2, r3, [r7, #24]

	tick = HAL_GetTick();
 8002eb4:	f001 fac0 	bl	8004438 <HAL_GetTick>
 8002eb8:	6278      	str	r0, [r7, #36]	; 0x24
	/* Infinite loop */
	for (;;) {

		osDelay(10);
 8002eba:	200a      	movs	r0, #10
 8002ebc:	f006 fcd0 	bl	8009860 <osDelay>
		if (HAL_GetTick() - tick >= 2) {
 8002ec0:	f001 faba 	bl	8004438 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d9f5      	bls.n	8002eba <StartGyroTask+0xfa>
			readByte(0x37, val);
 8002ece:	f107 0308 	add.w	r3, r7, #8
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	2037      	movs	r0, #55	; 0x37
 8002ed6:	f7ff fa09 	bl	80022ec <readByte>
			angular_speed = (val[0] << 8) | val[1];
 8002eda:	7a3b      	ldrb	r3, [r7, #8]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	b21a      	sxth	r2, r3
 8002ee0:	7a7b      	ldrb	r3, [r7, #9]
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	817b      	strh	r3, [r7, #10]
			total_angle += (double) ((double) angular_speed - offset)
 8002ee8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fd fb11 	bl	8000514 <__aeabi_i2d>
 8002ef2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ef6:	f7fd f9bf 	bl	8000278 <__aeabi_dsub>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4614      	mov	r4, r2
 8002f00:	461d      	mov	r5, r3
					* ((HAL_GetTick() - tick) / 16400.0);
 8002f02:	f001 fa99 	bl	8004438 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd faf1 	bl	80004f4 <__aeabi_ui2d>
 8002f12:	a313      	add	r3, pc, #76	; (adr r3, 8002f60 <StartGyroTask+0x1a0>)
 8002f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f18:	f7fd fc90 	bl	800083c <__aeabi_ddiv>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4620      	mov	r0, r4
 8002f22:	4629      	mov	r1, r5
 8002f24:	f7fd fb60 	bl	80005e8 <__aeabi_dmul>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
			total_angle += (double) ((double) angular_speed - offset)
 8002f30:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <StartGyroTask+0x1ac>)
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	f7fd f9a1 	bl	800027c <__adddf3>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	490b      	ldr	r1, [pc, #44]	; (8002f6c <StartGyroTask+0x1ac>)
 8002f40:	e9c1 2300 	strd	r2, r3, [r1]
//			total_angle += (double) ((double) angular_speed / 16.4 * 0.01);
			i -= angular_speed;
 8002f44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	60fb      	str	r3, [r7, #12]
			tick = HAL_GetTick();
 8002f4e:	f001 fa73 	bl	8004438 <HAL_GetTick>
 8002f52:	6278      	str	r0, [r7, #36]	; 0x24
			i++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3301      	adds	r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]
		osDelay(10);
 8002f5a:	e7ae      	b.n	8002eba <StartGyroTask+0xfa>
 8002f5c:	f3af 8000 	nop.w
 8002f60:	00000000 	.word	0x00000000
 8002f64:	40d00400 	.word	0x40d00400
 8002f68:	200003c8 	.word	0x200003c8
 8002f6c:	20000390 	.word	0x20000390

08002f70 <StartUltrasonicTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUltrasonicTask */
void StartUltrasonicTask(void *argument)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUltrasonicTask */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);  // HC-SR04 Sensor
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4806      	ldr	r0, [pc, #24]	; (8002f94 <StartUltrasonicTask+0x24>)
 8002f7c:	f003 ffd6 	bl	8006f2c <HAL_TIM_IC_Start_IT>
	osDelay(5000);
 8002f80:	f241 3088 	movw	r0, #5000	; 0x1388
 8002f84:	f006 fc6c 	bl	8009860 <osDelay>
	/* Infinite loop */
	for (;;) {
		HCSR04_Read();
 8002f88:	f7fe fdea 	bl	8001b60 <HCSR04_Read>
		osDelay(100);
 8002f8c:	2064      	movs	r0, #100	; 0x64
 8002f8e:	f006 fc67 	bl	8009860 <osDelay>
		HCSR04_Read();
 8002f92:	e7f9      	b.n	8002f88 <StartUltrasonicTask+0x18>
 8002f94:	20000250 	.word	0x20000250

08002f98 <StartCommunicateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommunicateTask */
void StartCommunicateTask(void *argument)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	char ack = 'A';
 8002fa0:	2341      	movs	r3, #65	; 0x41
 8002fa2:	73fb      	strb	r3, [r7, #15]
	int corr = 8;
 8002fa4:	2308      	movs	r3, #8
 8002fa6:	60bb      	str	r3, [r7, #8]
	aRxBuffer[0] = 'E';
 8002fa8:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <StartCommunicateTask+0x30>)
 8002faa:	2245      	movs	r2, #69	; 0x45
 8002fac:	701a      	strb	r2, [r3, #0]
	aRxBuffer[1] = 'M';
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <StartCommunicateTask+0x30>)
 8002fb0:	224d      	movs	r2, #77	; 0x4d
 8002fb2:	705a      	strb	r2, [r3, #1]
	aRxBuffer[2] = 'P';
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <StartCommunicateTask+0x30>)
 8002fb6:	2250      	movs	r2, #80	; 0x50
 8002fb8:	709a      	strb	r2, [r3, #2]
	aRxBuffer[3] = 'T';
 8002fba:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <StartCommunicateTask+0x30>)
 8002fbc:	2254      	movs	r2, #84	; 0x54
 8002fbe:	70da      	strb	r2, [r3, #3]
	aRxBuffer[4] = 'Y';
 8002fc0:	4b01      	ldr	r3, [pc, #4]	; (8002fc8 <StartCommunicateTask+0x30>)
 8002fc2:	2259      	movs	r2, #89	; 0x59
 8002fc4:	711a      	strb	r2, [r3, #4]

	/* Infinite loop */
	for (;;) {
 8002fc6:	e7fe      	b.n	8002fc6 <StartCommunicateTask+0x2e>
 8002fc8:	2000034c 	.word	0x2000034c

08002fcc <StartEncoderRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderRTask */
void StartEncoderRTask(void *argument)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderRTask */
	/* Infinite loop */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002fd4:	213c      	movs	r1, #60	; 0x3c
 8002fd6:	481d      	ldr	r0, [pc, #116]	; (800304c <StartEncoderRTask+0x80>)
 8002fd8:	f004 f976 	bl	80072c8 <HAL_TIM_Encoder_Start>
	int cnt1;
	int dirR = 1;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8002fe0:	f001 fa2a 	bl	8004438 <HAL_GetTick>
 8002fe4:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 8002fe6:	f001 fa27 	bl	8004438 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b0a      	cmp	r3, #10
 8002ff2:	d9f8      	bls.n	8002fe6 <StartEncoderRTask+0x1a>
			cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8002ff4:	4b15      	ldr	r3, [pc, #84]	; (800304c <StartEncoderRTask+0x80>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	60bb      	str	r3, [r7, #8]
			if (cnt1 > 32000) {
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003002:	dd06      	ble.n	8003012 <StartEncoderRTask+0x46>
				dirR = 1;
 8003004:	2301      	movs	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt1);
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	e004      	b.n	800301c <StartEncoderRTask+0x50>
			} else {
				dirR = -1;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
 8003016:	617b      	str	r3, [r7, #20]
				diff = cnt1;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	613b      	str	r3, [r7, #16]
			}

			if (dirR == 1) {
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d106      	bne.n	8003030 <StartEncoderRTask+0x64>
				rightEncoderVal -= diff;
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <StartEncoderRTask+0x84>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	4a09      	ldr	r2, [pc, #36]	; (8003050 <StartEncoderRTask+0x84>)
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e005      	b.n	800303c <StartEncoderRTask+0x70>
			} else {
				rightEncoderVal += diff;
 8003030:	4b07      	ldr	r3, [pc, #28]	; (8003050 <StartEncoderRTask+0x84>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	4a05      	ldr	r2, [pc, #20]	; (8003050 <StartEncoderRTask+0x84>)
 800303a:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim3, 0);
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <StartEncoderRTask+0x80>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2200      	movs	r2, #0
 8003042:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8003044:	f001 f9f8 	bl	8004438 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - tick > 10L) {
 800304a:	e7cc      	b.n	8002fe6 <StartEncoderRTask+0x1a>
 800304c:	20000208 	.word	0x20000208
 8003050:	20000374 	.word	0x20000374

08003054 <StartEncoderLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderLTask */
void StartEncoderLTask(void *argument)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderLTask */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800305c:	213c      	movs	r1, #60	; 0x3c
 800305e:	481d      	ldr	r0, [pc, #116]	; (80030d4 <StartEncoderLTask+0x80>)
 8003060:	f004 f932 	bl	80072c8 <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 8003064:	2301      	movs	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8003068:	f001 f9e6 	bl	8004438 <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 800306e:	f001 f9e3 	bl	8004438 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b0a      	cmp	r3, #10
 800307a:	d9f8      	bls.n	800306e <StartEncoderLTask+0x1a>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 800307c:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <StartEncoderLTask+0x80>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	60bb      	str	r3, [r7, #8]
			if (cnt2 > 32000) {
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800308a:	dd06      	ble.n	800309a <StartEncoderLTask+0x46>
				dirL = 1;
 800308c:	2301      	movs	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	e004      	b.n	80030a4 <StartEncoderLTask+0x50>
			} else {
				dirL = -1;
 800309a:	f04f 33ff 	mov.w	r3, #4294967295
 800309e:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	613b      	str	r3, [r7, #16]
			}
			if (dirL == 1) {
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d106      	bne.n	80030b8 <StartEncoderLTask+0x64>
				leftEncoderVal += diff;
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <StartEncoderLTask+0x84>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4413      	add	r3, r2
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <StartEncoderLTask+0x84>)
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e005      	b.n	80030c4 <StartEncoderLTask+0x70>
			} else {
				leftEncoderVal -= diff;
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <StartEncoderLTask+0x84>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	4a05      	ldr	r2, [pc, #20]	; (80030d8 <StartEncoderLTask+0x84>)
 80030c2:	6013      	str	r3, [r2, #0]
			}
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <StartEncoderLTask+0x80>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2200      	movs	r2, #0
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 80030cc:	f001 f9b4 	bl	8004438 <HAL_GetTick>
 80030d0:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - tick > 10L) {
 80030d2:	e7cc      	b.n	800306e <StartEncoderLTask+0x1a>
 80030d4:	200001c0 	.word	0x200001c0
 80030d8:	20000378 	.word	0x20000378

080030dc <moveCarStraightSensor>:
  /* USER CODE END StartEncoderLTask */
}

// ! Move car straight with the US as well
void moveCarStraightSensor(int usTarget)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
	usTargetGLOBAL= usTarget;
 80030e4:	4a11      	ldr	r2, [pc, #68]	; (800312c <moveCarStraightSensor+0x50>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6013      	str	r3, [r2, #0]
	pwmVal_servo = SERVOCENTER;
 80030ea:	4b11      	ldr	r3, [pc, #68]	; (8003130 <moveCarStraightSensor+0x54>)
 80030ec:	2295      	movs	r2, #149	; 0x95
 80030ee:	801a      	strh	r2, [r3, #0]
	osDelay(100);
 80030f0:	2064      	movs	r0, #100	; 0x64
 80030f2:	f006 fbb5 	bl	8009860 <osDelay>
	straightUS = 1;
 80030f6:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <moveCarStraightSensor+0x58>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
	control = 0;
 80030fc:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <moveCarStraightSensor+0x5c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
	errorcorrection = 1;
 8003102:	4b0e      	ldr	r3, [pc, #56]	; (800313c <moveCarStraightSensor+0x60>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]
	e_brake = 0;
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <moveCarStraightSensor+0x64>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 800310e:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <moveCarStraightSensor+0x68>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
	while(finishCheck());
 8003114:	bf00      	nop
 8003116:	f7ff f83b 	bl	8002190 <finishCheck>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1fa      	bne.n	8003116 <moveCarStraightSensor+0x3a>


}
 8003120:	bf00      	nop
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000004 	.word	0x20000004
 8003130:	20000000 	.word	0x20000000
 8003134:	20000370 	.word	0x20000370
 8003138:	20000358 	.word	0x20000358
 800313c:	2000036c 	.word	0x2000036c
 8003140:	20000368 	.word	0x20000368
 8003144:	20000364 	.word	0x20000364

08003148 <StartTask2>:

// ! Main task
void StartTask2(void *argument)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	//to be in straight 127 < x <189
	//IRdistance 2 is Right IR
	//change move car straight to allow for
  int pass = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	if (pass) {
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	f040 8237 	bne.w	80035ca <StartTask2+0x482>
		break;
	}
    while(k!=1){
 800315c:	e002      	b.n	8003164 <StartTask2+0x1c>
    	osDelay(50);
 800315e:	2032      	movs	r0, #50	; 0x32
 8003160:	f006 fb7e 	bl	8009860 <osDelay>
    while(k!=1){
 8003164:	4ba6      	ldr	r3, [pc, #664]	; (8003400 <StartTask2+0x2b8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d1f8      	bne.n	800315e <StartTask2+0x16>
    }
    // aRxBuffer[0] = 'S';   //HERE IF HARDCODE -------------------------
    while(aRxBuffer[1] != 'S'){
 800316c:	e002      	b.n	8003174 <StartTask2+0x2c>
    	osDelay(5);
 800316e:	2005      	movs	r0, #5
 8003170:	f006 fb76 	bl	8009860 <osDelay>
    while(aRxBuffer[1] != 'S'){
 8003174:	4ba3      	ldr	r3, [pc, #652]	; (8003404 <StartTask2+0x2bc>)
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	2b53      	cmp	r3, #83	; 0x53
 800317a:	d1f8      	bne.n	800316e <StartTask2+0x26>
    }
	//rightEncoderVal = leftEncoderVal=0;

	//errorcorrection = 1;
	times_acceptable=0;
 800317c:	4ba2      	ldr	r3, [pc, #648]	; (8003408 <StartTask2+0x2c0>)
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
//	while (firstDistance < 60) {
//		firstDistance = Distance;
//		osDelay(50);
//	}
	//IRCheck(SERVOCENTER);
	osDelay(100);
 8003182:	2064      	movs	r0, #100	; 0x64
 8003184:	f006 fb6c 	bl	8009860 <osDelay>

	// ! first movement
	moveCarStraightSensor(28); // doesnt change the direction
 8003188:	201c      	movs	r0, #28
 800318a:	f7ff ffa7 	bl	80030dc <moveCarStraightSensor>


	// osDelay(100);
	// Pause to take picture
	HAL_UART_Transmit(&huart3, "A", 1,0xFFFF);
 800318e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003192:	2201      	movs	r2, #1
 8003194:	499d      	ldr	r1, [pc, #628]	; (800340c <StartTask2+0x2c4>)
 8003196:	489e      	ldr	r0, [pc, #632]	; (8003410 <StartTask2+0x2c8>)
 8003198:	f005 fa27 	bl	80085ea <HAL_UART_Transmit>
	// aRxBuffer[1]='L';
	nexttask = 'Z';
 800319c:	4b9d      	ldr	r3, [pc, #628]	; (8003414 <StartTask2+0x2cc>)
 800319e:	225a      	movs	r2, #90	; 0x5a
 80031a0:	701a      	strb	r2, [r3, #0]
	while(nexttask == 'Z'){
 80031a2:	e00b      	b.n	80031bc <StartTask2+0x74>
		if(/*update==2 &&*/ aRxBuffer[2]=='L' || aRxBuffer[2]=='R'){
 80031a4:	4b97      	ldr	r3, [pc, #604]	; (8003404 <StartTask2+0x2bc>)
 80031a6:	789b      	ldrb	r3, [r3, #2]
 80031a8:	2b4c      	cmp	r3, #76	; 0x4c
 80031aa:	d003      	beq.n	80031b4 <StartTask2+0x6c>
 80031ac:	4b95      	ldr	r3, [pc, #596]	; (8003404 <StartTask2+0x2bc>)
 80031ae:	789b      	ldrb	r3, [r3, #2]
 80031b0:	2b52      	cmp	r3, #82	; 0x52
 80031b2:	d103      	bne.n	80031bc <StartTask2+0x74>
				nexttask = aRxBuffer[2];
 80031b4:	4b93      	ldr	r3, [pc, #588]	; (8003404 <StartTask2+0x2bc>)
 80031b6:	789a      	ldrb	r2, [r3, #2]
 80031b8:	4b96      	ldr	r3, [pc, #600]	; (8003414 <StartTask2+0x2cc>)
 80031ba:	701a      	strb	r2, [r3, #0]
	while(nexttask == 'Z'){
 80031bc:	4b95      	ldr	r3, [pc, #596]	; (8003414 <StartTask2+0x2cc>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b5a      	cmp	r3, #90	; 0x5a
 80031c2:	d0ef      	beq.n	80031a4 <StartTask2+0x5c>
		}
	}


    if(nexttask == 'L'){
 80031c4:	4b93      	ldr	r3, [pc, #588]	; (8003414 <StartTask2+0x2cc>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b4c      	cmp	r3, #76	; 0x4c
 80031ca:	d123      	bne.n	8003214 <StartTask2+0xcc>
    	moveCarLeft(50); // ! second movement
 80031cc:	ed9f 0b7a 	vldr	d0, [pc, #488]	; 80033b8 <StartTask2+0x270>
 80031d0:	f7fe fd9c 	bl	8001d0c <moveCarLeft>
    	moveCarRight(55); // ! third movement, 105
 80031d4:	ed9f 0b7a 	vldr	d0, [pc, #488]	; 80033c0 <StartTask2+0x278>
 80031d8:	f7fe fcf6 	bl	8001bc8 <moveCarRight>
    	finished();
 80031dc:	f7ff f82a 	bl	8002234 <finished>
    	if(aRxBuffer[0] == 'I'){
 80031e0:	4b88      	ldr	r3, [pc, #544]	; (8003404 <StartTask2+0x2bc>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b49      	cmp	r3, #73	; 0x49
 80031e6:	d10a      	bne.n	80031fe <StartTask2+0xb6>

    	    	moveCarStraightSensor(35); //testing new shit
 80031e8:	2023      	movs	r0, #35	; 0x23
 80031ea:	f7ff ff77 	bl	80030dc <moveCarStraightSensor>
    	    	HAL_UART_Transmit(&huart3, "A", 1,0xFFFF);
 80031ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031f2:	2201      	movs	r2, #1
 80031f4:	4985      	ldr	r1, [pc, #532]	; (800340c <StartTask2+0x2c4>)
 80031f6:	4886      	ldr	r0, [pc, #536]	; (8003410 <StartTask2+0x2c8>)
 80031f8:	f005 f9f7 	bl	80085ea <HAL_UART_Transmit>
 80031fc:	e031      	b.n	8003262 <StartTask2+0x11a>
    	    }
    	else
    	    		{
    				moveCarStraightSensor(35);
 80031fe:	2023      	movs	r0, #35	; 0x23
 8003200:	f7ff ff6c 	bl	80030dc <moveCarStraightSensor>
    	    		HAL_UART_Transmit(&huart3, "A", 1,0xFFFF);
 8003204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003208:	2201      	movs	r2, #1
 800320a:	4980      	ldr	r1, [pc, #512]	; (800340c <StartTask2+0x2c4>)
 800320c:	4880      	ldr	r0, [pc, #512]	; (8003410 <StartTask2+0x2c8>)
 800320e:	f005 f9ec 	bl	80085ea <HAL_UART_Transmit>
 8003212:	e026      	b.n	8003262 <StartTask2+0x11a>
//    	osDelay(50);
		//moveCarStraightSensor(28); //test
//		osDelay(50);

    }
    else if(nexttask == 'R'){
 8003214:	4b7f      	ldr	r3, [pc, #508]	; (8003414 <StartTask2+0x2cc>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b52      	cmp	r3, #82	; 0x52
 800321a:	d122      	bne.n	8003262 <StartTask2+0x11a>
    	moveCarRight(50);
 800321c:	ed9f 0b66 	vldr	d0, [pc, #408]	; 80033b8 <StartTask2+0x270>
 8003220:	f7fe fcd2 	bl	8001bc8 <moveCarRight>
    	moveCarLeft(55);
 8003224:	ed9f 0b66 	vldr	d0, [pc, #408]	; 80033c0 <StartTask2+0x278>
 8003228:	f7fe fd70 	bl	8001d0c <moveCarLeft>
    	finished();
 800322c:	f7ff f802 	bl	8002234 <finished>
//    	osDelay(50);
    	if(aRxBuffer[0] == 'I'){
 8003230:	4b74      	ldr	r3, [pc, #464]	; (8003404 <StartTask2+0x2bc>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b49      	cmp	r3, #73	; 0x49
 8003236:	d10a      	bne.n	800324e <StartTask2+0x106>

    	moveCarStraightSensor(35); //testing new shit
 8003238:	2023      	movs	r0, #35	; 0x23
 800323a:	f7ff ff4f 	bl	80030dc <moveCarStraightSensor>
    	HAL_UART_Transmit(&huart3, "A", 1,0xFFFF);
 800323e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003242:	2201      	movs	r2, #1
 8003244:	4971      	ldr	r1, [pc, #452]	; (800340c <StartTask2+0x2c4>)
 8003246:	4872      	ldr	r0, [pc, #456]	; (8003410 <StartTask2+0x2c8>)
 8003248:	f005 f9cf 	bl	80085ea <HAL_UART_Transmit>
 800324c:	e009      	b.n	8003262 <StartTask2+0x11a>
    }
    	else
    		{
    		moveCarStraightSensor(35);
 800324e:	2023      	movs	r0, #35	; 0x23
 8003250:	f7ff ff44 	bl	80030dc <moveCarStraightSensor>
    		HAL_UART_Transmit(&huart3, "A", 1,0xFFFF);
 8003254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003258:	2201      	movs	r2, #1
 800325a:	496c      	ldr	r1, [pc, #432]	; (800340c <StartTask2+0x2c4>)
 800325c:	486c      	ldr	r0, [pc, #432]	; (8003410 <StartTask2+0x2c8>)
 800325e:	f005 f9c4 	bl	80085ea <HAL_UART_Transmit>
//    	osDelay(50);

    }

	// aRxBuffer[2] = 'R';
    nexttask = 'Z';
 8003262:	4b6c      	ldr	r3, [pc, #432]	; (8003414 <StartTask2+0x2cc>)
 8003264:	225a      	movs	r2, #90	; 0x5a
 8003266:	701a      	strb	r2, [r3, #0]
	while(nexttask == 'Z'){
 8003268:	e00b      	b.n	8003282 <StartTask2+0x13a>
		if(/*update==2 &&*/ aRxBuffer[3]=='L' || aRxBuffer[3]=='R'){
 800326a:	4b66      	ldr	r3, [pc, #408]	; (8003404 <StartTask2+0x2bc>)
 800326c:	78db      	ldrb	r3, [r3, #3]
 800326e:	2b4c      	cmp	r3, #76	; 0x4c
 8003270:	d003      	beq.n	800327a <StartTask2+0x132>
 8003272:	4b64      	ldr	r3, [pc, #400]	; (8003404 <StartTask2+0x2bc>)
 8003274:	78db      	ldrb	r3, [r3, #3]
 8003276:	2b52      	cmp	r3, #82	; 0x52
 8003278:	d103      	bne.n	8003282 <StartTask2+0x13a>
				nexttask = aRxBuffer[3];
 800327a:	4b62      	ldr	r3, [pc, #392]	; (8003404 <StartTask2+0x2bc>)
 800327c:	78da      	ldrb	r2, [r3, #3]
 800327e:	4b65      	ldr	r3, [pc, #404]	; (8003414 <StartTask2+0x2cc>)
 8003280:	701a      	strb	r2, [r3, #0]
	while(nexttask == 'Z'){
 8003282:	4b64      	ldr	r3, [pc, #400]	; (8003414 <StartTask2+0x2cc>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b5a      	cmp	r3, #90	; 0x5a
 8003288:	d0ef      	beq.n	800326a <StartTask2+0x122>
		}
	}


	if(nexttask == 'L'){
 800328a:	4b62      	ldr	r3, [pc, #392]	; (8003414 <StartTask2+0x2cc>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b4c      	cmp	r3, #76	; 0x4c
 8003290:	f040 80e7 	bne.w	8003462 <StartTask2+0x31a>


		if (aRxBuffer[2] == 'L') {
 8003294:	4b5b      	ldr	r3, [pc, #364]	; (8003404 <StartTask2+0x2bc>)
 8003296:	789b      	ldrb	r3, [r3, #2]
 8003298:	2b4c      	cmp	r3, #76	; 0x4c
 800329a:	d104      	bne.n	80032a6 <StartTask2+0x15e>
//			moveCarLeft(95);
			moveCarLeft(65);
 800329c:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 80033c8 <StartTask2+0x280>
 80032a0:	f7fe fd34 	bl	8001d0c <moveCarLeft>
 80032a4:	e00c      	b.n	80032c0 <StartTask2+0x178>
		} else if (aRxBuffer[2] == 'R'){
 80032a6:	4b57      	ldr	r3, [pc, #348]	; (8003404 <StartTask2+0x2bc>)
 80032a8:	789b      	ldrb	r3, [r3, #2]
 80032aa:	2b52      	cmp	r3, #82	; 0x52
 80032ac:	d104      	bne.n	80032b8 <StartTask2+0x170>
			moveCarLeft(85);
 80032ae:	ed9f 0b48 	vldr	d0, [pc, #288]	; 80033d0 <StartTask2+0x288>
 80032b2:	f7fe fd2b 	bl	8001d0c <moveCarLeft>
 80032b6:	e003      	b.n	80032c0 <StartTask2+0x178>
		} else {
			moveCarLeft(90);
 80032b8:	ed9f 0b47 	vldr	d0, [pc, #284]	; 80033d8 <StartTask2+0x290>
 80032bc:	f7fe fd26 	bl	8001d0c <moveCarLeft>
		}
		osDelay(200);
 80032c0:	20c8      	movs	r0, #200	; 0xc8
 80032c2:	f006 facd 	bl	8009860 <osDelay>
		while(irDistance2<30){ // lets the car move until the IR detects less than 27
 80032c6:	e008      	b.n	80032da <StartTask2+0x192>
			control2 = 1;
 80032c8:	4b53      	ldr	r3, [pc, #332]	; (8003418 <StartTask2+0x2d0>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
			control3 = 1; // should not juke during the facing second obstacle
 80032ce:	4b53      	ldr	r3, [pc, #332]	; (800341c <StartTask2+0x2d4>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

			IRCheck(SERVOCENTER); // sets control to 1, value inside is for servo motor
 80032d4:	2095      	movs	r0, #149	; 0x95
 80032d6:	f7fe ffed 	bl	80022b4 <IRCheck>
		while(irDistance2<30){ // lets the car move until the IR detects less than 27
 80032da:	4b51      	ldr	r3, [pc, #324]	; (8003420 <StartTask2+0x2d8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b1d      	cmp	r3, #29
 80032e0:	ddf2      	ble.n	80032c8 <StartTask2+0x180>
			// 150 is center, 105 is most left, 210 is most right
		}
		finished();
 80032e2:	f7fe ffa7 	bl	8002234 <finished>
		osDelay(50);
 80032e6:	2032      	movs	r0, #50	; 0x32
 80032e8:	f006 faba 	bl	8009860 <osDelay>
		if (aRxBuffer[2] == 'L'){
 80032ec:	4b45      	ldr	r3, [pc, #276]	; (8003404 <StartTask2+0x2bc>)
 80032ee:	789b      	ldrb	r3, [r3, #2]
 80032f0:	2b4c      	cmp	r3, #76	; 0x4c
 80032f2:	d104      	bne.n	80032fe <StartTask2+0x1b6>
			// 175 - 30 = 145
//			moveCarRightFaster(75);
//			moveCarRightFaster(70);
			moveCarRightFaster(145);
 80032f4:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 80033e0 <StartTask2+0x298>
 80032f8:	f7fe fc9c 	bl	8001c34 <moveCarRightFaster>
 80032fc:	e00e      	b.n	800331c <StartTask2+0x1d4>
		} else if (aRxBuffer[2] == 'R') {
 80032fe:	4b41      	ldr	r3, [pc, #260]	; (8003404 <StartTask2+0x2bc>)
 8003300:	789b      	ldrb	r3, [r3, #2]
 8003302:	2b52      	cmp	r3, #82	; 0x52
 8003304:	d10a      	bne.n	800331c <StartTask2+0x1d4>
			// normal route
			moveCarRightFaster(175);
 8003306:	ed9f 0b38 	vldr	d0, [pc, #224]	; 80033e8 <StartTask2+0x2a0>
 800330a:	f7fe fc93 	bl	8001c34 <moveCarRightFaster>
//			moveCarRightFaster(70);
//			moveCarRightFaster(105);
		}
//		moveCarRightFaster(175);

		while(irDistance2>30){ // lets the car move until the IR detects less than 27
 800330e:	e005      	b.n	800331c <StartTask2+0x1d4>
			control2=1;
 8003310:	4b41      	ldr	r3, [pc, #260]	; (8003418 <StartTask2+0x2d0>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]
			IRCheck(SERVOCENTER); // sets control to 1, value inside is for servo motor
 8003316:	2095      	movs	r0, #149	; 0x95
 8003318:	f7fe ffcc 	bl	80022b4 <IRCheck>
		while(irDistance2>30){ // lets the car move until the IR detects less than 27
 800331c:	4b40      	ldr	r3, [pc, #256]	; (8003420 <StartTask2+0x2d8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b1e      	cmp	r3, #30
 8003322:	dcf5      	bgt.n	8003310 <StartTask2+0x1c8>
			// 150 is center, 105 is most left, 210 is most right
		}
		finished();
 8003324:	f7fe ff86 	bl	8002234 <finished>
		osDelay(50);
 8003328:	2032      	movs	r0, #50	; 0x32
 800332a:	f006 fa99 	bl	8009860 <osDelay>
		while(irDistance2<30){ // lets the car move until the IR detects less than 27
 800332e:	e005      	b.n	800333c <StartTask2+0x1f4>
			control2=1;
 8003330:	4b39      	ldr	r3, [pc, #228]	; (8003418 <StartTask2+0x2d0>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]
			IRCheck(SERVOCENTER); // sets control to 1, value inside is for servo motor
 8003336:	2095      	movs	r0, #149	; 0x95
 8003338:	f7fe ffbc 	bl	80022b4 <IRCheck>
		while(irDistance2<30){ // lets the car move until the IR detects less than 27
 800333c:	4b38      	ldr	r3, [pc, #224]	; (8003420 <StartTask2+0x2d8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b1d      	cmp	r3, #29
 8003342:	ddf5      	ble.n	8003330 <StartTask2+0x1e8>
			// 150 is center, 105 is most left, 210 is most right
		}
		finished();
 8003344:	f7fe ff76 	bl	8002234 <finished>
		moveCarRight(90);
 8003348:	ed9f 0b23 	vldr	d0, [pc, #140]	; 80033d8 <StartTask2+0x290>
 800334c:	f7fe fc3c 	bl	8001bc8 <moveCarRight>
		moveCarRightFaster(58);
 8003350:	ed9f 0b27 	vldr	d0, [pc, #156]	; 80033f0 <StartTask2+0x2a8>
 8003354:	f7fe fc6e 	bl	8001c34 <moveCarRightFaster>
		moveCarLeftFaster(50); // 55
 8003358:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80033b8 <StartTask2+0x270>
 800335c:	f7fe fca0 	bl	8001ca0 <moveCarLeftFaster>
		finished();
 8003360:	f7fe ff68 	bl	8002234 <finished>
		osDelay(30);
 8003364:	201e      	movs	r0, #30
 8003366:	f006 fa7b 	bl	8009860 <osDelay>
		while(irDistance2>30){ // lets the car move until the IR detects less than 27
 800336a:	e008      	b.n	800337e <StartTask2+0x236>
			control2=1;
 800336c:	4b2a      	ldr	r3, [pc, #168]	; (8003418 <StartTask2+0x2d0>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]
			control3=1;
 8003372:	4b2a      	ldr	r3, [pc, #168]	; (800341c <StartTask2+0x2d4>)
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]
			IRCheck(158); // sets control to 1, value inside is for servo motor
 8003378:	209e      	movs	r0, #158	; 0x9e
 800337a:	f7fe ff9b 	bl	80022b4 <IRCheck>
		while(irDistance2>30){ // lets the car move until the IR detects less than 27
 800337e:	4b28      	ldr	r3, [pc, #160]	; (8003420 <StartTask2+0x2d8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b1e      	cmp	r3, #30
 8003384:	dcf2      	bgt.n	800336c <StartTask2+0x224>
			// 150 is center, 105 is most left, 210 is most right
		}
		finished();
 8003386:	f7fe ff55 	bl	8002234 <finished>
		if(irDistance2<20){
 800338a:	4b25      	ldr	r3, [pc, #148]	; (8003420 <StartTask2+0x2d8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b13      	cmp	r3, #19
 8003390:	dc48      	bgt.n	8003424 <StartTask2+0x2dc>
			IRCheck(SERVOCENTER);
 8003392:	2095      	movs	r0, #149	; 0x95
 8003394:	f7fe ff8e 	bl	80022b4 <IRCheck>
			osDelay(100);
 8003398:	2064      	movs	r0, #100	; 0x64
 800339a:	f006 fa61 	bl	8009860 <osDelay>
			moveCarRightFaster(45);
 800339e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80033f8 <StartTask2+0x2b0>
 80033a2:	f7fe fc47 	bl	8001c34 <moveCarRightFaster>
			moveCarLeftFaster(45);
 80033a6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80033f8 <StartTask2+0x2b0>
 80033aa:	f7fe fc79 	bl	8001ca0 <moveCarLeftFaster>
			moveCarStraightSensor(20);
 80033ae:	2014      	movs	r0, #20
 80033b0:	f7ff fe94 	bl	80030dc <moveCarStraightSensor>
 80033b4:	e04b      	b.n	800344e <StartTask2+0x306>
 80033b6:	bf00      	nop
 80033b8:	00000000 	.word	0x00000000
 80033bc:	40490000 	.word	0x40490000
 80033c0:	00000000 	.word	0x00000000
 80033c4:	404b8000 	.word	0x404b8000
 80033c8:	00000000 	.word	0x00000000
 80033cc:	40504000 	.word	0x40504000
 80033d0:	00000000 	.word	0x00000000
 80033d4:	40554000 	.word	0x40554000
 80033d8:	00000000 	.word	0x00000000
 80033dc:	40568000 	.word	0x40568000
 80033e0:	00000000 	.word	0x00000000
 80033e4:	40622000 	.word	0x40622000
 80033e8:	00000000 	.word	0x00000000
 80033ec:	4065e000 	.word	0x4065e000
 80033f0:	00000000 	.word	0x00000000
 80033f4:	404d0000 	.word	0x404d0000
 80033f8:	00000000 	.word	0x00000000
 80033fc:	40468000 	.word	0x40468000
 8003400:	200003c8 	.word	0x200003c8
 8003404:	2000034c 	.word	0x2000034c
 8003408:	20000364 	.word	0x20000364
 800340c:	0800db34 	.word	0x0800db34
 8003410:	200002e0 	.word	0x200002e0
 8003414:	20000003 	.word	0x20000003
 8003418:	2000035c 	.word	0x2000035c
 800341c:	20000360 	.word	0x20000360
 8003420:	200003d8 	.word	0x200003d8

		}
		else
		if(irDistance2<30){
 8003424:	4b7e      	ldr	r3, [pc, #504]	; (8003620 <StartTask2+0x4d8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b1d      	cmp	r3, #29
 800342a:	dc10      	bgt.n	800344e <StartTask2+0x306>
		IRCheck(SERVOCENTER);
 800342c:	2095      	movs	r0, #149	; 0x95
 800342e:	f7fe ff41 	bl	80022b4 <IRCheck>
		osDelay(100);
 8003432:	2064      	movs	r0, #100	; 0x64
 8003434:	f006 fa14 	bl	8009860 <osDelay>
		moveCarRightFaster(60);
 8003438:	ed9f 0b67 	vldr	d0, [pc, #412]	; 80035d8 <StartTask2+0x490>
 800343c:	f7fe fbfa 	bl	8001c34 <moveCarRightFaster>
		moveCarLeftFaster(60);
 8003440:	ed9f 0b65 	vldr	d0, [pc, #404]	; 80035d8 <StartTask2+0x490>
 8003444:	f7fe fc2c 	bl	8001ca0 <moveCarLeftFaster>
		moveCarStraightSensor(20);
 8003448:	2014      	movs	r0, #20
 800344a:	f7ff fe47 	bl	80030dc <moveCarStraightSensor>
		}
		aRxBuffer[0]='E';
 800344e:	4b75      	ldr	r3, [pc, #468]	; (8003624 <StartTask2+0x4dc>)
 8003450:	2245      	movs	r2, #69	; 0x45
 8003452:	701a      	strb	r2, [r3, #0]
		aRxBuffer[1]='M';
 8003454:	4b73      	ldr	r3, [pc, #460]	; (8003624 <StartTask2+0x4dc>)
 8003456:	224d      	movs	r2, #77	; 0x4d
 8003458:	705a      	strb	r2, [r3, #1]
		aRxBuffer[2]='P';
 800345a:	4b72      	ldr	r3, [pc, #456]	; (8003624 <StartTask2+0x4dc>)
 800345c:	2250      	movs	r2, #80	; 0x50
 800345e:	709a      	strb	r2, [r3, #2]
 8003460:	e0b0      	b.n	80035c4 <StartTask2+0x47c>
	}
	else if(nexttask == 'R'){
 8003462:	4b71      	ldr	r3, [pc, #452]	; (8003628 <StartTask2+0x4e0>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b52      	cmp	r3, #82	; 0x52
 8003468:	f040 80ac 	bne.w	80035c4 <StartTask2+0x47c>

		if (aRxBuffer[2] == 'L') {
 800346c:	4b6d      	ldr	r3, [pc, #436]	; (8003624 <StartTask2+0x4dc>)
 800346e:	789b      	ldrb	r3, [r3, #2]
 8003470:	2b4c      	cmp	r3, #76	; 0x4c
 8003472:	d104      	bne.n	800347e <StartTask2+0x336>
			moveCarRight(85);
 8003474:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 80035e0 <StartTask2+0x498>
 8003478:	f7fe fba6 	bl	8001bc8 <moveCarRight>
 800347c:	e00c      	b.n	8003498 <StartTask2+0x350>
		} else if (aRxBuffer[2] == 'R'){
 800347e:	4b69      	ldr	r3, [pc, #420]	; (8003624 <StartTask2+0x4dc>)
 8003480:	789b      	ldrb	r3, [r3, #2]
 8003482:	2b52      	cmp	r3, #82	; 0x52
 8003484:	d104      	bne.n	8003490 <StartTask2+0x348>
//			moveCarRight(95); the slow route, doesn't need to turn full 95, it always overshot
			moveCarRight(65);
 8003486:	ed9f 0b58 	vldr	d0, [pc, #352]	; 80035e8 <StartTask2+0x4a0>
 800348a:	f7fe fb9d 	bl	8001bc8 <moveCarRight>
 800348e:	e003      	b.n	8003498 <StartTask2+0x350>
		} else {
			moveCarRight(90);
 8003490:	ed9f 0b57 	vldr	d0, [pc, #348]	; 80035f0 <StartTask2+0x4a8>
 8003494:	f7fe fb98 	bl	8001bc8 <moveCarRight>
		}
		osDelay(200);
 8003498:	20c8      	movs	r0, #200	; 0xc8
 800349a:	f006 f9e1 	bl	8009860 <osDelay>
		while(irDistance1<30){ // lets the car move until the IR detects less than 27
 800349e:	e008      	b.n	80034b2 <StartTask2+0x36a>
			control2 = 1;
 80034a0:	4b62      	ldr	r3, [pc, #392]	; (800362c <StartTask2+0x4e4>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
			control3 = 1;
 80034a6:	4b62      	ldr	r3, [pc, #392]	; (8003630 <StartTask2+0x4e8>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
			IRCheck(SERVOCENTER); // sets control to 1, value inside is for servo motor
 80034ac:	2095      	movs	r0, #149	; 0x95
 80034ae:	f7fe ff01 	bl	80022b4 <IRCheck>
		while(irDistance1<30){ // lets the car move until the IR detects less than 27
 80034b2:	4b60      	ldr	r3, [pc, #384]	; (8003634 <StartTask2+0x4ec>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b1d      	cmp	r3, #29
 80034b8:	ddf2      	ble.n	80034a0 <StartTask2+0x358>
		}
		finished();
 80034ba:	f7fe febb 	bl	8002234 <finished>
		if (aRxBuffer[2] == 'R') {
 80034be:	4b59      	ldr	r3, [pc, #356]	; (8003624 <StartTask2+0x4dc>)
 80034c0:	789b      	ldrb	r3, [r3, #2]
 80034c2:	2b52      	cmp	r3, #82	; 0x52
 80034c4:	d104      	bne.n	80034d0 <StartTask2+0x388>
			// smart turns originally 175, but minus 30
//			moveCarLeftFaster(75);
//			moveCarLeftFaster(70);
			moveCarLeftFaster(145);
 80034c6:	ed9f 0b4c 	vldr	d0, [pc, #304]	; 80035f8 <StartTask2+0x4b0>
 80034ca:	f7fe fbe9 	bl	8001ca0 <moveCarLeftFaster>
 80034ce:	e00e      	b.n	80034ee <StartTask2+0x3a6>
		} else if (aRxBuffer[2] == 'L') {
 80034d0:	4b54      	ldr	r3, [pc, #336]	; (8003624 <StartTask2+0x4dc>)
 80034d2:	789b      	ldrb	r3, [r3, #2]
 80034d4:	2b4c      	cmp	r3, #76	; 0x4c
 80034d6:	d10a      	bne.n	80034ee <StartTask2+0x3a6>
			// normal route turns
			moveCarLeftFaster(175);
 80034d8:	ed9f 0b49 	vldr	d0, [pc, #292]	; 8003600 <StartTask2+0x4b8>
 80034dc:	f7fe fbe0 	bl	8001ca0 <moveCarLeftFaster>
//			moveCarLeftFaster(70);
//			moveCarLeftFaster(105);
		}
		while(irDistance1>30){ // lets the car move until the IR detects less than 27
 80034e0:	e005      	b.n	80034ee <StartTask2+0x3a6>
			control2=1;
 80034e2:	4b52      	ldr	r3, [pc, #328]	; (800362c <StartTask2+0x4e4>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
			IRCheck(SERVOCENTER); // sets control to 1, value inside is for servo motor
 80034e8:	2095      	movs	r0, #149	; 0x95
 80034ea:	f7fe fee3 	bl	80022b4 <IRCheck>
		while(irDistance1>30){ // lets the car move until the IR detects less than 27
 80034ee:	4b51      	ldr	r3, [pc, #324]	; (8003634 <StartTask2+0x4ec>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b1e      	cmp	r3, #30
 80034f4:	dcf5      	bgt.n	80034e2 <StartTask2+0x39a>
		}
		finished();
 80034f6:	f7fe fe9d 	bl	8002234 <finished>
		osDelay(50);
 80034fa:	2032      	movs	r0, #50	; 0x32
 80034fc:	f006 f9b0 	bl	8009860 <osDelay>
		while(irDistance1<30){ // lets the car move until the IR detects less than 27
 8003500:	e005      	b.n	800350e <StartTask2+0x3c6>
			control2=1;
 8003502:	4b4a      	ldr	r3, [pc, #296]	; (800362c <StartTask2+0x4e4>)
 8003504:	2201      	movs	r2, #1
 8003506:	601a      	str	r2, [r3, #0]
			IRCheck(SERVOCENTER); // sets control to 1, value inside is for servo motor
 8003508:	2095      	movs	r0, #149	; 0x95
 800350a:	f7fe fed3 	bl	80022b4 <IRCheck>
		while(irDistance1<30){ // lets the car move until the IR detects less than 27
 800350e:	4b49      	ldr	r3, [pc, #292]	; (8003634 <StartTask2+0x4ec>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b1d      	cmp	r3, #29
 8003514:	ddf5      	ble.n	8003502 <StartTask2+0x3ba>
			// 150 is center, 105 is most left, 210 is most right
		}
		finished();
 8003516:	f7fe fe8d 	bl	8002234 <finished>
		moveCarLeft(90);
 800351a:	ed9f 0b35 	vldr	d0, [pc, #212]	; 80035f0 <StartTask2+0x4a8>
 800351e:	f7fe fbf5 	bl	8001d0c <moveCarLeft>
		moveCarLeftFaster(57);
 8003522:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8003608 <StartTask2+0x4c0>
 8003526:	f7fe fbbb 	bl	8001ca0 <moveCarLeftFaster>
		moveCarRightFaster(50); // 55
 800352a:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8003610 <StartTask2+0x4c8>
 800352e:	f7fe fb81 	bl	8001c34 <moveCarRightFaster>
		finished();
 8003532:	f7fe fe7f 	bl	8002234 <finished>
		osDelay(30);
 8003536:	201e      	movs	r0, #30
 8003538:	f006 f992 	bl	8009860 <osDelay>
		while(irDistance1>30){ // lets the car move until the IR detects less than 27
 800353c:	e008      	b.n	8003550 <StartTask2+0x408>
			control2=1; // moving slowly for checking ir
 800353e:	4b3b      	ldr	r3, [pc, #236]	; (800362c <StartTask2+0x4e4>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]
			control3=1;
 8003544:	4b3a      	ldr	r3, [pc, #232]	; (8003630 <StartTask2+0x4e8>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]
			IRCheck(146); // sets control to 1, value inside is for servo motor
 800354a:	2092      	movs	r0, #146	; 0x92
 800354c:	f7fe feb2 	bl	80022b4 <IRCheck>
		while(irDistance1>30){ // lets the car move until the IR detects less than 27
 8003550:	4b38      	ldr	r3, [pc, #224]	; (8003634 <StartTask2+0x4ec>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b1e      	cmp	r3, #30
 8003556:	dcf2      	bgt.n	800353e <StartTask2+0x3f6>
			// 150 is center, 105 is most left, 210 is most right
		}
		finished();
 8003558:	f7fe fe6c 	bl	8002234 <finished>
		if(irDistance1<20){
 800355c:	4b35      	ldr	r3, [pc, #212]	; (8003634 <StartTask2+0x4ec>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b13      	cmp	r3, #19
 8003562:	dc11      	bgt.n	8003588 <StartTask2+0x440>
			IRCheck(SERVOCENTER);
 8003564:	2095      	movs	r0, #149	; 0x95
 8003566:	f7fe fea5 	bl	80022b4 <IRCheck>
			osDelay(100);
 800356a:	2064      	movs	r0, #100	; 0x64
 800356c:	f006 f978 	bl	8009860 <osDelay>
			moveCarLeftFaster(45);
 8003570:	ed9f 0b29 	vldr	d0, [pc, #164]	; 8003618 <StartTask2+0x4d0>
 8003574:	f7fe fb94 	bl	8001ca0 <moveCarLeftFaster>
			moveCarRightFaster(45);
 8003578:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8003618 <StartTask2+0x4d0>
 800357c:	f7fe fb5a 	bl	8001c34 <moveCarRightFaster>
			moveCarStraightSensor(20);
 8003580:	2014      	movs	r0, #20
 8003582:	f7ff fdab 	bl	80030dc <moveCarStraightSensor>
 8003586:	e014      	b.n	80035b2 <StartTask2+0x46a>
		}
		else
		if(irDistance1<30){
 8003588:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <StartTask2+0x4ec>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b1d      	cmp	r3, #29
 800358e:	dc10      	bgt.n	80035b2 <StartTask2+0x46a>
		IRCheck(SERVOCENTER);
 8003590:	2095      	movs	r0, #149	; 0x95
 8003592:	f7fe fe8f 	bl	80022b4 <IRCheck>
		osDelay(100);
 8003596:	2064      	movs	r0, #100	; 0x64
 8003598:	f006 f962 	bl	8009860 <osDelay>
		moveCarLeftFaster(60);
 800359c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80035d8 <StartTask2+0x490>
 80035a0:	f7fe fb7e 	bl	8001ca0 <moveCarLeftFaster>
		moveCarRightFaster(60);
 80035a4:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80035d8 <StartTask2+0x490>
 80035a8:	f7fe fb44 	bl	8001c34 <moveCarRightFaster>
		moveCarStraightSensor(20);
 80035ac:	2014      	movs	r0, #20
 80035ae:	f7ff fd95 	bl	80030dc <moveCarStraightSensor>
		}
		aRxBuffer[0]='E';
 80035b2:	4b1c      	ldr	r3, [pc, #112]	; (8003624 <StartTask2+0x4dc>)
 80035b4:	2245      	movs	r2, #69	; 0x45
 80035b6:	701a      	strb	r2, [r3, #0]
		aRxBuffer[1]='M';
 80035b8:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <StartTask2+0x4dc>)
 80035ba:	224d      	movs	r2, #77	; 0x4d
 80035bc:	705a      	strb	r2, [r3, #1]
		aRxBuffer[2]='P';
 80035be:	4b19      	ldr	r3, [pc, #100]	; (8003624 <StartTask2+0x4dc>)
 80035c0:	2250      	movs	r2, #80	; 0x50
 80035c2:	709a      	strb	r2, [r3, #2]
	}
	pass = 1;
 80035c4:	2301      	movs	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
	if (pass) {
 80035c8:	e5c4      	b.n	8003154 <StartTask2+0xc>
		break;
 80035ca:	bf00      	nop
  }
  /* USER CODE END StartTask2 */
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	f3af 8000 	nop.w
 80035d8:	00000000 	.word	0x00000000
 80035dc:	404e0000 	.word	0x404e0000
 80035e0:	00000000 	.word	0x00000000
 80035e4:	40554000 	.word	0x40554000
 80035e8:	00000000 	.word	0x00000000
 80035ec:	40504000 	.word	0x40504000
 80035f0:	00000000 	.word	0x00000000
 80035f4:	40568000 	.word	0x40568000
 80035f8:	00000000 	.word	0x00000000
 80035fc:	40622000 	.word	0x40622000
 8003600:	00000000 	.word	0x00000000
 8003604:	4065e000 	.word	0x4065e000
 8003608:	00000000 	.word	0x00000000
 800360c:	404c8000 	.word	0x404c8000
 8003610:	00000000 	.word	0x00000000
 8003614:	40490000 	.word	0x40490000
 8003618:	00000000 	.word	0x00000000
 800361c:	40468000 	.word	0x40468000
 8003620:	200003d8 	.word	0x200003d8
 8003624:	2000034c 	.word	0x2000034c
 8003628:	20000003 	.word	0x20000003
 800362c:	2000035c 	.word	0x2000035c
 8003630:	20000360 	.word	0x20000360
 8003634:	200003d4 	.word	0x200003d4

08003638 <StartIRTask>:

// ! Start IR task, to read
void StartIRTask(void *argument)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIRTask */
  /* Infinite loop */
  uint32_t tick = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	if (HAL_GetTick() - tick >= 2) {
 8003644:	f000 fef8 	bl	8004438 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d9f8      	bls.n	8003644 <StartIRTask+0xc>
	    HAL_ADC_Start(&hadc1);
 8003652:	484d      	ldr	r0, [pc, #308]	; (8003788 <StartIRTask+0x150>)
 8003654:	f000 ff64 	bl	8004520 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8003658:	210a      	movs	r1, #10
 800365a:	484b      	ldr	r0, [pc, #300]	; (8003788 <StartIRTask+0x150>)
 800365c:	f001 f865 	bl	800472a <HAL_ADC_PollForConversion>
		ADC_VAL1 = HAL_ADC_GetValue(&hadc1);
 8003660:	4849      	ldr	r0, [pc, #292]	; (8003788 <StartIRTask+0x150>)
 8003662:	f001 f8ed 	bl	8004840 <HAL_ADC_GetValue>
 8003666:	4603      	mov	r3, r0
 8003668:	4a48      	ldr	r2, [pc, #288]	; (800378c <StartIRTask+0x154>)
 800366a:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 800366c:	4846      	ldr	r0, [pc, #280]	; (8003788 <StartIRTask+0x150>)
 800366e:	f001 f829 	bl	80046c4 <HAL_ADC_Stop>

		HAL_ADC_Start(&hadc2);
 8003672:	4847      	ldr	r0, [pc, #284]	; (8003790 <StartIRTask+0x158>)
 8003674:	f000 ff54 	bl	8004520 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 10);
 8003678:	210a      	movs	r1, #10
 800367a:	4845      	ldr	r0, [pc, #276]	; (8003790 <StartIRTask+0x158>)
 800367c:	f001 f855 	bl	800472a <HAL_ADC_PollForConversion>
		ADC_VAL2 = HAL_ADC_GetValue(&hadc2);
 8003680:	4843      	ldr	r0, [pc, #268]	; (8003790 <StartIRTask+0x158>)
 8003682:	f001 f8dd 	bl	8004840 <HAL_ADC_GetValue>
 8003686:	4603      	mov	r3, r0
 8003688:	4a42      	ldr	r2, [pc, #264]	; (8003794 <StartIRTask+0x15c>)
 800368a:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc2);
 800368c:	4840      	ldr	r0, [pc, #256]	; (8003790 <StartIRTask+0x158>)
 800368e:	f001 f819 	bl	80046c4 <HAL_ADC_Stop>
		voltage1 = (float) (ADC_VAL1*5)/4095;
 8003692:	4b3e      	ldr	r3, [pc, #248]	; (800378c <StartIRTask+0x154>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	ee07 3a90 	vmov	s15, r3
 80036a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036a4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003798 <StartIRTask+0x160>
 80036a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036ac:	4b3b      	ldr	r3, [pc, #236]	; (800379c <StartIRTask+0x164>)
 80036ae:	edc3 7a00 	vstr	s15, [r3]
		irDistance1 = roundf(29.988 *pow(voltage1 , -1.173));
 80036b2:	4b3a      	ldr	r3, [pc, #232]	; (800379c <StartIRTask+0x164>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fc ff3e 	bl	8000538 <__aeabi_f2d>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8003778 <StartIRTask+0x140>
 80036c4:	ec43 2b10 	vmov	d0, r2, r3
 80036c8:	f009 fa62 	bl	800cb90 <pow>
 80036cc:	ec51 0b10 	vmov	r0, r1, d0
 80036d0:	a32b      	add	r3, pc, #172	; (adr r3, 8003780 <StartIRTask+0x148>)
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f7fc ff87 	bl	80005e8 <__aeabi_dmul>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	f7fd fa79 	bl	8000bd8 <__aeabi_d2f>
 80036e6:	4603      	mov	r3, r0
 80036e8:	ee00 3a10 	vmov	s0, r3
 80036ec:	f009 facc 	bl	800cc88 <roundf>
 80036f0:	eef0 7a40 	vmov.f32	s15, s0
 80036f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036f8:	ee17 2a90 	vmov	r2, s15
 80036fc:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <StartIRTask+0x168>)
 80036fe:	601a      	str	r2, [r3, #0]
		voltage2 = (float) (ADC_VAL2*5)/4095;
 8003700:	4b24      	ldr	r3, [pc, #144]	; (8003794 <StartIRTask+0x15c>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003712:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003798 <StartIRTask+0x160>
 8003716:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800371a:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <StartIRTask+0x16c>)
 800371c:	edc3 7a00 	vstr	s15, [r3]
		irDistance2 = roundf(29.988 *pow(voltage2 , -1.173));
 8003720:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <StartIRTask+0x16c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7fc ff07 	bl	8000538 <__aeabi_f2d>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8003778 <StartIRTask+0x140>
 8003732:	ec43 2b10 	vmov	d0, r2, r3
 8003736:	f009 fa2b 	bl	800cb90 <pow>
 800373a:	ec51 0b10 	vmov	r0, r1, d0
 800373e:	a310      	add	r3, pc, #64	; (adr r3, 8003780 <StartIRTask+0x148>)
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	f7fc ff50 	bl	80005e8 <__aeabi_dmul>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	f7fd fa42 	bl	8000bd8 <__aeabi_d2f>
 8003754:	4603      	mov	r3, r0
 8003756:	ee00 3a10 	vmov	s0, r3
 800375a:	f009 fa95 	bl	800cc88 <roundf>
 800375e:	eef0 7a40 	vmov.f32	s15, s0
 8003762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003766:	ee17 2a90 	vmov	r2, s15
 800376a:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <StartIRTask+0x170>)
 800376c:	601a      	str	r2, [r3, #0]
		tick = HAL_GetTick();
 800376e:	f000 fe63 	bl	8004438 <HAL_GetTick>
 8003772:	60f8      	str	r0, [r7, #12]
	if (HAL_GetTick() - tick >= 2) {
 8003774:	e766      	b.n	8003644 <StartIRTask+0xc>
 8003776:	bf00      	nop
 8003778:	a5e353f8 	.word	0xa5e353f8
 800377c:	bff2c49b 	.word	0xbff2c49b
 8003780:	916872b0 	.word	0x916872b0
 8003784:	403dfced 	.word	0x403dfced
 8003788:	20000094 	.word	0x20000094
 800378c:	200003dc 	.word	0x200003dc
 8003790:	200000dc 	.word	0x200000dc
 8003794:	200003e0 	.word	0x200003e0
 8003798:	457ff000 	.word	0x457ff000
 800379c:	200003cc 	.word	0x200003cc
 80037a0:	200003d4 	.word	0x200003d4
 80037a4:	200003d0 	.word	0x200003d0
 80037a8:	200003d8 	.word	0x200003d8

080037ac <Error_Handler>:
  }
  /* USER CODE END StartIRTask */
}

void Error_Handler(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037b0:	b672      	cpsid	i
}
 80037b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80037b4:	e7fe      	b.n	80037b4 <Error_Handler+0x8>
	...

080037b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	607b      	str	r3, [r7, #4]
 80037c2:	4b16      	ldr	r3, [pc, #88]	; (800381c <HAL_MspInit+0x64>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	4a15      	ldr	r2, [pc, #84]	; (800381c <HAL_MspInit+0x64>)
 80037c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037cc:	6453      	str	r3, [r2, #68]	; 0x44
 80037ce:	4b13      	ldr	r3, [pc, #76]	; (800381c <HAL_MspInit+0x64>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d6:	607b      	str	r3, [r7, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	4b0f      	ldr	r3, [pc, #60]	; (800381c <HAL_MspInit+0x64>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	4a0e      	ldr	r2, [pc, #56]	; (800381c <HAL_MspInit+0x64>)
 80037e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ea:	4b0c      	ldr	r3, [pc, #48]	; (800381c <HAL_MspInit+0x64>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037f6:	2200      	movs	r2, #0
 80037f8:	210f      	movs	r1, #15
 80037fa:	f06f 0001 	mvn.w	r0, #1
 80037fe:	f001 fb26 	bl	8004e4e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003802:	2200      	movs	r2, #0
 8003804:	2105      	movs	r1, #5
 8003806:	2005      	movs	r0, #5
 8003808:	f001 fb21 	bl	8004e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800380c:	2005      	movs	r0, #5
 800380e:	f001 fb3a 	bl	8004e86 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40023800 	.word	0x40023800

08003820 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003828:	f107 031c 	add.w	r3, r7, #28
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2e      	ldr	r2, [pc, #184]	; (80038f8 <HAL_ADC_MspInit+0xd8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d128      	bne.n	8003894 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_ADC_MspInit+0xdc>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <HAL_ADC_MspInit+0xdc>)
 800384c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003850:	6453      	str	r3, [r2, #68]	; 0x44
 8003852:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <HAL_ADC_MspInit+0xdc>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	4b26      	ldr	r3, [pc, #152]	; (80038fc <HAL_ADC_MspInit+0xdc>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	4a25      	ldr	r2, [pc, #148]	; (80038fc <HAL_ADC_MspInit+0xdc>)
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	6313      	str	r3, [r2, #48]	; 0x30
 800386e:	4b23      	ldr	r3, [pc, #140]	; (80038fc <HAL_ADC_MspInit+0xdc>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800387a:	2302      	movs	r3, #2
 800387c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800387e:	2303      	movs	r3, #3
 8003880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003886:	f107 031c 	add.w	r3, r7, #28
 800388a:	4619      	mov	r1, r3
 800388c:	481c      	ldr	r0, [pc, #112]	; (8003900 <HAL_ADC_MspInit+0xe0>)
 800388e:	f001 fba7 	bl	8004fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003892:	e02c      	b.n	80038ee <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1a      	ldr	r2, [pc, #104]	; (8003904 <HAL_ADC_MspInit+0xe4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d127      	bne.n	80038ee <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	4b16      	ldr	r3, [pc, #88]	; (80038fc <HAL_ADC_MspInit+0xdc>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	4a15      	ldr	r2, [pc, #84]	; (80038fc <HAL_ADC_MspInit+0xdc>)
 80038a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ac:	6453      	str	r3, [r2, #68]	; 0x44
 80038ae:	4b13      	ldr	r3, [pc, #76]	; (80038fc <HAL_ADC_MspInit+0xdc>)
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <HAL_ADC_MspInit+0xdc>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a0e      	ldr	r2, [pc, #56]	; (80038fc <HAL_ADC_MspInit+0xdc>)
 80038c4:	f043 0304 	orr.w	r3, r3, #4
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <HAL_ADC_MspInit+0xdc>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038d6:	2304      	movs	r3, #4
 80038d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038da:	2303      	movs	r3, #3
 80038dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038e2:	f107 031c 	add.w	r3, r7, #28
 80038e6:	4619      	mov	r1, r3
 80038e8:	4805      	ldr	r0, [pc, #20]	; (8003900 <HAL_ADC_MspInit+0xe0>)
 80038ea:	f001 fb79 	bl	8004fe0 <HAL_GPIO_Init>
}
 80038ee:	bf00      	nop
 80038f0:	3730      	adds	r7, #48	; 0x30
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40012000 	.word	0x40012000
 80038fc:	40023800 	.word	0x40023800
 8003900:	40020800 	.word	0x40020800
 8003904:	40012100 	.word	0x40012100

08003908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	; 0x28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003910:	f107 0314 	add.w	r3, r7, #20
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <HAL_I2C_MspInit+0x84>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d12c      	bne.n	8003984 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	4b18      	ldr	r3, [pc, #96]	; (8003990 <HAL_I2C_MspInit+0x88>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	4a17      	ldr	r2, [pc, #92]	; (8003990 <HAL_I2C_MspInit+0x88>)
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	6313      	str	r3, [r2, #48]	; 0x30
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <HAL_I2C_MspInit+0x88>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003946:	f44f 7340 	mov.w	r3, #768	; 0x300
 800394a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800394c:	2312      	movs	r3, #18
 800394e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003954:	2303      	movs	r3, #3
 8003956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003958:	2304      	movs	r3, #4
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	4619      	mov	r1, r3
 8003962:	480c      	ldr	r0, [pc, #48]	; (8003994 <HAL_I2C_MspInit+0x8c>)
 8003964:	f001 fb3c 	bl	8004fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <HAL_I2C_MspInit+0x88>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	4a07      	ldr	r2, [pc, #28]	; (8003990 <HAL_I2C_MspInit+0x88>)
 8003972:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003976:	6413      	str	r3, [r2, #64]	; 0x40
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_I2C_MspInit+0x88>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003984:	bf00      	nop
 8003986:	3728      	adds	r7, #40	; 0x28
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40005400 	.word	0x40005400
 8003990:	40023800 	.word	0x40023800
 8003994:	40020400 	.word	0x40020400

08003998 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a2f      	ldr	r2, [pc, #188]	; (8003a74 <HAL_TIM_Base_MspInit+0xdc>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d11e      	bne.n	80039f8 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	4b2e      	ldr	r3, [pc, #184]	; (8003a78 <HAL_TIM_Base_MspInit+0xe0>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	4a2d      	ldr	r2, [pc, #180]	; (8003a78 <HAL_TIM_Base_MspInit+0xe0>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ca:	4b2b      	ldr	r3, [pc, #172]	; (8003a78 <HAL_TIM_Base_MspInit+0xe0>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80039d6:	2200      	movs	r2, #0
 80039d8:	2105      	movs	r1, #5
 80039da:	2018      	movs	r0, #24
 80039dc:	f001 fa37 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80039e0:	2018      	movs	r0, #24
 80039e2:	f001 fa50 	bl	8004e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80039e6:	2200      	movs	r2, #0
 80039e8:	2105      	movs	r1, #5
 80039ea:	2019      	movs	r0, #25
 80039ec:	f001 fa2f 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80039f0:	2019      	movs	r0, #25
 80039f2:	f001 fa48 	bl	8004e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80039f6:	e038      	b.n	8003a6a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM8)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <HAL_TIM_Base_MspInit+0xe4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d133      	bne.n	8003a6a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <HAL_TIM_Base_MspInit+0xe0>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <HAL_TIM_Base_MspInit+0xe0>)
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	6453      	str	r3, [r2, #68]	; 0x44
 8003a12:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_TIM_Base_MspInit+0xe0>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <HAL_TIM_Base_MspInit+0xe0>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <HAL_TIM_Base_MspInit+0xe0>)
 8003a28:	f043 0304 	orr.w	r3, r3, #4
 8003a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_TIM_Base_MspInit+0xe0>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003a3a:	23c0      	movs	r3, #192	; 0xc0
 8003a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a46:	2300      	movs	r3, #0
 8003a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a4e:	f107 0314 	add.w	r3, r7, #20
 8003a52:	4619      	mov	r1, r3
 8003a54:	480a      	ldr	r0, [pc, #40]	; (8003a80 <HAL_TIM_Base_MspInit+0xe8>)
 8003a56:	f001 fac3 	bl	8004fe0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2105      	movs	r1, #5
 8003a5e:	202d      	movs	r0, #45	; 0x2d
 8003a60:	f001 f9f5 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003a64:	202d      	movs	r0, #45	; 0x2d
 8003a66:	f001 fa0e 	bl	8004e86 <HAL_NVIC_EnableIRQ>
}
 8003a6a:	bf00      	nop
 8003a6c:	3728      	adds	r7, #40	; 0x28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40010000 	.word	0x40010000
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40010400 	.word	0x40010400
 8003a80:	40020800 	.word	0x40020800

08003a84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08c      	sub	sp, #48	; 0x30
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 031c 	add.w	r3, r7, #28
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa4:	d14b      	bne.n	8003b3e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	4a3e      	ldr	r2, [pc, #248]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab6:	4b3c      	ldr	r3, [pc, #240]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4a37      	ldr	r2, [pc, #220]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad2:	4b35      	ldr	r3, [pc, #212]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a30      	ldr	r2, [pc, #192]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b2e      	ldr	r3, [pc, #184]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 8003afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b00:	2302      	movs	r3, #2
 8003b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 8003b10:	f107 031c 	add.w	r3, r7, #28
 8003b14:	4619      	mov	r1, r3
 8003b16:	4825      	ldr	r0, [pc, #148]	; (8003bac <HAL_TIM_Encoder_MspInit+0x128>)
 8003b18:	f001 fa62 	bl	8004fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 8003b1c:	2308      	movs	r3, #8
 8003b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b20:	2302      	movs	r3, #2
 8003b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 8003b30:	f107 031c 	add.w	r3, r7, #28
 8003b34:	4619      	mov	r1, r3
 8003b36:	481e      	ldr	r0, [pc, #120]	; (8003bb0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003b38:	f001 fa52 	bl	8004fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003b3c:	e030      	b.n	8003ba0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1c      	ldr	r2, [pc, #112]	; (8003bb4 <HAL_TIM_Encoder_MspInit+0x130>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d12b      	bne.n	8003ba0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b52:	f043 0302 	orr.w	r3, r3, #2
 8003b56:	6413      	str	r3, [r2, #64]	; 0x40
 8003b58:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b64:	2300      	movs	r3, #0
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	4a0e      	ldr	r2, [pc, #56]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	6313      	str	r3, [r2, #48]	; 0x30
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 8003b80:	23c0      	movs	r3, #192	; 0xc0
 8003b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	2302      	movs	r3, #2
 8003b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b90:	2302      	movs	r3, #2
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b94:	f107 031c 	add.w	r3, r7, #28
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4804      	ldr	r0, [pc, #16]	; (8003bac <HAL_TIM_Encoder_MspInit+0x128>)
 8003b9c:	f001 fa20 	bl	8004fe0 <HAL_GPIO_Init>
}
 8003ba0:	bf00      	nop
 8003ba2:	3730      	adds	r7, #48	; 0x30
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40020000 	.word	0x40020000
 8003bb0:	40020400 	.word	0x40020400
 8003bb4:	40000400 	.word	0x40000400

08003bb8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08a      	sub	sp, #40	; 0x28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc0:	f107 0314 	add.w	r3, r7, #20
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	609a      	str	r2, [r3, #8]
 8003bcc:	60da      	str	r2, [r3, #12]
 8003bce:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <HAL_TIM_IC_MspInit+0x94>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d134      	bne.n	8003c44 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <HAL_TIM_IC_MspInit+0x98>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	4a1b      	ldr	r2, [pc, #108]	; (8003c50 <HAL_TIM_IC_MspInit+0x98>)
 8003be4:	f043 0304 	orr.w	r3, r3, #4
 8003be8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bea:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <HAL_TIM_IC_MspInit+0x98>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <HAL_TIM_IC_MspInit+0x98>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	4a14      	ldr	r2, [pc, #80]	; (8003c50 <HAL_TIM_IC_MspInit+0x98>)
 8003c00:	f043 0308 	orr.w	r3, r3, #8
 8003c04:	6313      	str	r3, [r2, #48]	; 0x30
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <HAL_TIM_IC_MspInit+0x98>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8003c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c20:	2300      	movs	r3, #0
 8003c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c24:	2302      	movs	r3, #2
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8003c28:	f107 0314 	add.w	r3, r7, #20
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4809      	ldr	r0, [pc, #36]	; (8003c54 <HAL_TIM_IC_MspInit+0x9c>)
 8003c30:	f001 f9d6 	bl	8004fe0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003c34:	2200      	movs	r2, #0
 8003c36:	2105      	movs	r1, #5
 8003c38:	201e      	movs	r0, #30
 8003c3a:	f001 f908 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003c3e:	201e      	movs	r0, #30
 8003c40:	f001 f921 	bl	8004e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003c44:	bf00      	nop
 8003c46:	3728      	adds	r7, #40	; 0x28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40000800 	.word	0x40000800
 8003c50:	40023800 	.word	0x40023800
 8003c54:	40020c00 	.word	0x40020c00

08003c58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c60:	f107 030c 	add.w	r3, r7, #12
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a12      	ldr	r2, [pc, #72]	; (8003cc0 <HAL_TIM_MspPostInit+0x68>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d11e      	bne.n	8003cb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <HAL_TIM_MspPostInit+0x6c>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	4a10      	ldr	r2, [pc, #64]	; (8003cc4 <HAL_TIM_MspPostInit+0x6c>)
 8003c84:	f043 0310 	orr.w	r3, r3, #16
 8003c88:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <HAL_TIM_MspPostInit+0x6c>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cac:	f107 030c 	add.w	r3, r7, #12
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <HAL_TIM_MspPostInit+0x70>)
 8003cb4:	f001 f994 	bl	8004fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003cb8:	bf00      	nop
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40010000 	.word	0x40010000
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40021000 	.word	0x40021000

08003ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <HAL_UART_MspInit+0x94>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d134      	bne.n	8003d58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <HAL_UART_MspInit+0x98>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	4a1b      	ldr	r2, [pc, #108]	; (8003d64 <HAL_UART_MspInit+0x98>)
 8003cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfe:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_UART_MspInit+0x98>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <HAL_UART_MspInit+0x98>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <HAL_UART_MspInit+0x98>)
 8003d14:	f043 0304 	orr.w	r3, r3, #4
 8003d18:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <HAL_UART_MspInit+0x98>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d34:	2303      	movs	r3, #3
 8003d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d38:	2307      	movs	r3, #7
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d3c:	f107 0314 	add.w	r3, r7, #20
 8003d40:	4619      	mov	r1, r3
 8003d42:	4809      	ldr	r0, [pc, #36]	; (8003d68 <HAL_UART_MspInit+0x9c>)
 8003d44:	f001 f94c 	bl	8004fe0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2105      	movs	r1, #5
 8003d4c:	2027      	movs	r0, #39	; 0x27
 8003d4e:	f001 f87e 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003d52:	2027      	movs	r0, #39	; 0x27
 8003d54:	f001 f897 	bl	8004e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003d58:	bf00      	nop
 8003d5a:	3728      	adds	r7, #40	; 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40004800 	.word	0x40004800
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40020800 	.word	0x40020800

08003d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d70:	e7fe      	b.n	8003d70 <NMI_Handler+0x4>

08003d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d72:	b480      	push	{r7}
 8003d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d76:	e7fe      	b.n	8003d76 <HardFault_Handler+0x4>

08003d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d7c:	e7fe      	b.n	8003d7c <MemManage_Handler+0x4>

08003d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d82:	e7fe      	b.n	8003d82 <BusFault_Handler+0x4>

08003d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d88:	e7fe      	b.n	8003d88 <UsageFault_Handler+0x4>

08003d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d9c:	f000 fb38 	bl	8004410 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003da0:	f007 f996 	bl	800b0d0 <xTaskGetSchedulerState>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d001      	beq.n	8003dae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003daa:	f007 ff7d 	bl	800bca8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003db2:	b480      	push	{r7}
 8003db4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003dc4:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003dc6:	f003 fb0d 	bl	80073e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000178 	.word	0x20000178

08003dd4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003dd8:	4802      	ldr	r0, [pc, #8]	; (8003de4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003dda:	f003 fb03 	bl	80073e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000178 	.word	0x20000178

08003de8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003dec:	4802      	ldr	r0, [pc, #8]	; (8003df8 <TIM4_IRQHandler+0x10>)
 8003dee:	f003 faf9 	bl	80073e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000250 	.word	0x20000250

08003dfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003e00:	4802      	ldr	r0, [pc, #8]	; (8003e0c <USART3_IRQHandler+0x10>)
 8003e02:	f004 fcb5 	bl	8008770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	200002e0 	.word	0x200002e0

08003e10 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003e14:	4802      	ldr	r0, [pc, #8]	; (8003e20 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003e16:	f003 fae5 	bl	80073e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000298 	.word	0x20000298

08003e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e2c:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <_sbrk+0x5c>)
 8003e2e:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <_sbrk+0x60>)
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e38:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <_sbrk+0x64>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d102      	bne.n	8003e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e40:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <_sbrk+0x64>)
 8003e42:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <_sbrk+0x68>)
 8003e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <_sbrk+0x64>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d207      	bcs.n	8003e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e54:	f008 fa20 	bl	800c298 <__errno>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	220c      	movs	r2, #12
 8003e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e62:	e009      	b.n	8003e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e64:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <_sbrk+0x64>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e6a:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <_sbrk+0x64>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	4a05      	ldr	r2, [pc, #20]	; (8003e88 <_sbrk+0x64>)
 8003e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e76:	68fb      	ldr	r3, [r7, #12]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20020000 	.word	0x20020000
 8003e84:	00000400 	.word	0x00000400
 8003e88:	200003e4 	.word	0x200003e4
 8003e8c:	20005320 	.word	0x20005320

08003e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e94:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <SystemInit+0x20>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	4a05      	ldr	r2, [pc, #20]	; (8003eb0 <SystemInit+0x20>)
 8003e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	e000ed00 	.word	0xe000ed00

08003eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003eec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003eb8:	480d      	ldr	r0, [pc, #52]	; (8003ef0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003eba:	490e      	ldr	r1, [pc, #56]	; (8003ef4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ebc:	4a0e      	ldr	r2, [pc, #56]	; (8003ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ec0:	e002      	b.n	8003ec8 <LoopCopyDataInit>

08003ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ec6:	3304      	adds	r3, #4

08003ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ecc:	d3f9      	bcc.n	8003ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ece:	4a0b      	ldr	r2, [pc, #44]	; (8003efc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ed0:	4c0b      	ldr	r4, [pc, #44]	; (8003f00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ed4:	e001      	b.n	8003eda <LoopFillZerobss>

08003ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ed8:	3204      	adds	r2, #4

08003eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003edc:	d3fb      	bcc.n	8003ed6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ede:	f7ff ffd7 	bl	8003e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ee2:	f008 f9df 	bl	800c2a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ee6:	f7fd f845 	bl	8000f74 <main>
  bx  lr    
 8003eea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ef4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003ef8:	0800e7a8 	.word	0x0800e7a8
  ldr r2, =_sbss
 8003efc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003f00:	2000531c 	.word	0x2000531c

08003f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f04:	e7fe      	b.n	8003f04 <ADC_IRQHandler>
	...

08003f08 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8003f0e:	2300      	movs	r3, #0
 8003f10:	71fb      	strb	r3, [r7, #7]
 8003f12:	e026      	b.n	8003f62 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	3b50      	subs	r3, #80	; 0x50
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 f82b 	bl	8003f78 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8003f22:	2100      	movs	r1, #0
 8003f24:	2000      	movs	r0, #0
 8003f26:	f000 f827 	bl	8003f78 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	2010      	movs	r0, #16
 8003f2e:	f000 f823 	bl	8003f78 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8003f32:	2300      	movs	r3, #0
 8003f34:	71bb      	strb	r3, [r7, #6]
 8003f36:	e00d      	b.n	8003f54 <OLED_Refresh_Gram+0x4c>
 8003f38:	79ba      	ldrb	r2, [r7, #6]
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	490d      	ldr	r1, [pc, #52]	; (8003f74 <OLED_Refresh_Gram+0x6c>)
 8003f3e:	00d2      	lsls	r2, r2, #3
 8003f40:	440a      	add	r2, r1
 8003f42:	4413      	add	r3, r2
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2101      	movs	r1, #1
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 f815 	bl	8003f78 <OLED_WR_Byte>
 8003f4e:	79bb      	ldrb	r3, [r7, #6]
 8003f50:	3301      	adds	r3, #1
 8003f52:	71bb      	strb	r3, [r7, #6]
 8003f54:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	daed      	bge.n	8003f38 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	71fb      	strb	r3, [r7, #7]
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	2b07      	cmp	r3, #7
 8003f66:	d9d5      	bls.n	8003f14 <OLED_Refresh_Gram+0xc>
	}   
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	200003e8 	.word	0x200003e8

08003f78 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	460a      	mov	r2, r1
 8003f82:	71fb      	strb	r3, [r7, #7]
 8003f84:	4613      	mov	r3, r2
 8003f86:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8003f88:	79bb      	ldrb	r3, [r7, #6]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d006      	beq.n	8003f9c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f94:	481c      	ldr	r0, [pc, #112]	; (8004008 <OLED_WR_Byte+0x90>)
 8003f96:	f001 f9bf 	bl	8005318 <HAL_GPIO_WritePin>
 8003f9a:	e005      	b.n	8003fa8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fa2:	4819      	ldr	r0, [pc, #100]	; (8004008 <OLED_WR_Byte+0x90>)
 8003fa4:	f001 f9b8 	bl	8005318 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
 8003fac:	e01e      	b.n	8003fec <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2120      	movs	r1, #32
 8003fb2:	4815      	ldr	r0, [pc, #84]	; (8004008 <OLED_WR_Byte+0x90>)
 8003fb4:	f001 f9b0 	bl	8005318 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8003fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	da05      	bge.n	8003fcc <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	2140      	movs	r1, #64	; 0x40
 8003fc4:	4810      	ldr	r0, [pc, #64]	; (8004008 <OLED_WR_Byte+0x90>)
 8003fc6:	f001 f9a7 	bl	8005318 <HAL_GPIO_WritePin>
 8003fca:	e004      	b.n	8003fd6 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2140      	movs	r1, #64	; 0x40
 8003fd0:	480d      	ldr	r0, [pc, #52]	; (8004008 <OLED_WR_Byte+0x90>)
 8003fd2:	f001 f9a1 	bl	8005318 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	2120      	movs	r1, #32
 8003fda:	480b      	ldr	r0, [pc, #44]	; (8004008 <OLED_WR_Byte+0x90>)
 8003fdc:	f001 f99c 	bl	8005318 <HAL_GPIO_WritePin>
		dat<<=1;   
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	2b07      	cmp	r3, #7
 8003ff0:	d9dd      	bls.n	8003fae <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ff8:	4803      	ldr	r0, [pc, #12]	; (8004008 <OLED_WR_Byte+0x90>)
 8003ffa:	f001 f98d 	bl	8005318 <HAL_GPIO_WritePin>
} 
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000

0800400c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8004012:	2300      	movs	r3, #0
 8004014:	71fb      	strb	r3, [r7, #7]
 8004016:	e014      	b.n	8004042 <OLED_Clear+0x36>
 8004018:	2300      	movs	r3, #0
 800401a:	71bb      	strb	r3, [r7, #6]
 800401c:	e00a      	b.n	8004034 <OLED_Clear+0x28>
 800401e:	79ba      	ldrb	r2, [r7, #6]
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	490c      	ldr	r1, [pc, #48]	; (8004054 <OLED_Clear+0x48>)
 8004024:	00d2      	lsls	r2, r2, #3
 8004026:	440a      	add	r2, r1
 8004028:	4413      	add	r3, r2
 800402a:	2200      	movs	r2, #0
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	79bb      	ldrb	r3, [r7, #6]
 8004030:	3301      	adds	r3, #1
 8004032:	71bb      	strb	r3, [r7, #6]
 8004034:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004038:	2b00      	cmp	r3, #0
 800403a:	daf0      	bge.n	800401e <OLED_Clear+0x12>
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	3301      	adds	r3, #1
 8004040:	71fb      	strb	r3, [r7, #7]
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	2b07      	cmp	r3, #7
 8004046:	d9e7      	bls.n	8004018 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8004048:	f7ff ff5e 	bl	8003f08 <OLED_Refresh_Gram>
}
 800404c:	bf00      	nop
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	200003e8 	.word	0x200003e8

08004058 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	71fb      	strb	r3, [r7, #7]
 8004062:	460b      	mov	r3, r1
 8004064:	71bb      	strb	r3, [r7, #6]
 8004066:	4613      	mov	r3, r2
 8004068:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800406e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004072:	2b00      	cmp	r3, #0
 8004074:	db41      	blt.n	80040fa <OLED_DrawPoint+0xa2>
 8004076:	79bb      	ldrb	r3, [r7, #6]
 8004078:	2b3f      	cmp	r3, #63	; 0x3f
 800407a:	d83e      	bhi.n	80040fa <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800407c:	79bb      	ldrb	r3, [r7, #6]
 800407e:	08db      	lsrs	r3, r3, #3
 8004080:	b2db      	uxtb	r3, r3
 8004082:	f1c3 0307 	rsb	r3, r3, #7
 8004086:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8004088:	79bb      	ldrb	r3, [r7, #6]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8004090:	7b7b      	ldrb	r3, [r7, #13]
 8004092:	f1c3 0307 	rsb	r3, r3, #7
 8004096:	2201      	movs	r2, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800409e:	797b      	ldrb	r3, [r7, #5]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d012      	beq.n	80040ca <OLED_DrawPoint+0x72>
 80040a4:	79fa      	ldrb	r2, [r7, #7]
 80040a6:	7bbb      	ldrb	r3, [r7, #14]
 80040a8:	4917      	ldr	r1, [pc, #92]	; (8004108 <OLED_DrawPoint+0xb0>)
 80040aa:	00d2      	lsls	r2, r2, #3
 80040ac:	440a      	add	r2, r1
 80040ae:	4413      	add	r3, r2
 80040b0:	7818      	ldrb	r0, [r3, #0]
 80040b2:	79fa      	ldrb	r2, [r7, #7]
 80040b4:	7bbb      	ldrb	r3, [r7, #14]
 80040b6:	7bf9      	ldrb	r1, [r7, #15]
 80040b8:	4301      	orrs	r1, r0
 80040ba:	b2c8      	uxtb	r0, r1
 80040bc:	4912      	ldr	r1, [pc, #72]	; (8004108 <OLED_DrawPoint+0xb0>)
 80040be:	00d2      	lsls	r2, r2, #3
 80040c0:	440a      	add	r2, r1
 80040c2:	4413      	add	r3, r2
 80040c4:	4602      	mov	r2, r0
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	e018      	b.n	80040fc <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80040ca:	79fa      	ldrb	r2, [r7, #7]
 80040cc:	7bbb      	ldrb	r3, [r7, #14]
 80040ce:	490e      	ldr	r1, [pc, #56]	; (8004108 <OLED_DrawPoint+0xb0>)
 80040d0:	00d2      	lsls	r2, r2, #3
 80040d2:	440a      	add	r2, r1
 80040d4:	4413      	add	r3, r2
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	b25a      	sxtb	r2, r3
 80040da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040de:	43db      	mvns	r3, r3
 80040e0:	b25b      	sxtb	r3, r3
 80040e2:	4013      	ands	r3, r2
 80040e4:	b259      	sxtb	r1, r3
 80040e6:	79fa      	ldrb	r2, [r7, #7]
 80040e8:	7bbb      	ldrb	r3, [r7, #14]
 80040ea:	b2c8      	uxtb	r0, r1
 80040ec:	4906      	ldr	r1, [pc, #24]	; (8004108 <OLED_DrawPoint+0xb0>)
 80040ee:	00d2      	lsls	r2, r2, #3
 80040f0:	440a      	add	r2, r1
 80040f2:	4413      	add	r3, r2
 80040f4:	4602      	mov	r2, r0
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e000      	b.n	80040fc <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80040fa:	bf00      	nop
}
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	200003e8 	.word	0x200003e8

0800410c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	4604      	mov	r4, r0
 8004114:	4608      	mov	r0, r1
 8004116:	4611      	mov	r1, r2
 8004118:	461a      	mov	r2, r3
 800411a:	4623      	mov	r3, r4
 800411c:	71fb      	strb	r3, [r7, #7]
 800411e:	4603      	mov	r3, r0
 8004120:	71bb      	strb	r3, [r7, #6]
 8004122:	460b      	mov	r3, r1
 8004124:	717b      	strb	r3, [r7, #5]
 8004126:	4613      	mov	r3, r2
 8004128:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800412a:	79bb      	ldrb	r3, [r7, #6]
 800412c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800412e:	797b      	ldrb	r3, [r7, #5]
 8004130:	3b20      	subs	r3, #32
 8004132:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8004134:	2300      	movs	r3, #0
 8004136:	73bb      	strb	r3, [r7, #14]
 8004138:	e04d      	b.n	80041d6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800413a:	793b      	ldrb	r3, [r7, #4]
 800413c:	2b0c      	cmp	r3, #12
 800413e:	d10b      	bne.n	8004158 <OLED_ShowChar+0x4c>
 8004140:	797a      	ldrb	r2, [r7, #5]
 8004142:	7bb9      	ldrb	r1, [r7, #14]
 8004144:	4828      	ldr	r0, [pc, #160]	; (80041e8 <OLED_ShowChar+0xdc>)
 8004146:	4613      	mov	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4403      	add	r3, r0
 8004150:	440b      	add	r3, r1
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	73fb      	strb	r3, [r7, #15]
 8004156:	e007      	b.n	8004168 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8004158:	797a      	ldrb	r2, [r7, #5]
 800415a:	7bbb      	ldrb	r3, [r7, #14]
 800415c:	4923      	ldr	r1, [pc, #140]	; (80041ec <OLED_ShowChar+0xe0>)
 800415e:	0112      	lsls	r2, r2, #4
 8004160:	440a      	add	r2, r1
 8004162:	4413      	add	r3, r2
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8004168:	2300      	movs	r3, #0
 800416a:	737b      	strb	r3, [r7, #13]
 800416c:	e02d      	b.n	80041ca <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800416e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	da07      	bge.n	8004186 <OLED_ShowChar+0x7a>
 8004176:	f897 2020 	ldrb.w	r2, [r7, #32]
 800417a:	79b9      	ldrb	r1, [r7, #6]
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff ff6a 	bl	8004058 <OLED_DrawPoint>
 8004184:	e00c      	b.n	80041a0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8004186:	f897 3020 	ldrb.w	r3, [r7, #32]
 800418a:	2b00      	cmp	r3, #0
 800418c:	bf0c      	ite	eq
 800418e:	2301      	moveq	r3, #1
 8004190:	2300      	movne	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	79b9      	ldrb	r1, [r7, #6]
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff ff5c 	bl	8004058 <OLED_DrawPoint>
			temp<<=1;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
			y++;
 80041a6:	79bb      	ldrb	r3, [r7, #6]
 80041a8:	3301      	adds	r3, #1
 80041aa:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80041ac:	79ba      	ldrb	r2, [r7, #6]
 80041ae:	7b3b      	ldrb	r3, [r7, #12]
 80041b0:	1ad2      	subs	r2, r2, r3
 80041b2:	793b      	ldrb	r3, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d105      	bne.n	80041c4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80041b8:	7b3b      	ldrb	r3, [r7, #12]
 80041ba:	71bb      	strb	r3, [r7, #6]
				x++;
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	3301      	adds	r3, #1
 80041c0:	71fb      	strb	r3, [r7, #7]
				break;
 80041c2:	e005      	b.n	80041d0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80041c4:	7b7b      	ldrb	r3, [r7, #13]
 80041c6:	3301      	adds	r3, #1
 80041c8:	737b      	strb	r3, [r7, #13]
 80041ca:	7b7b      	ldrb	r3, [r7, #13]
 80041cc:	2b07      	cmp	r3, #7
 80041ce:	d9ce      	bls.n	800416e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80041d0:	7bbb      	ldrb	r3, [r7, #14]
 80041d2:	3301      	adds	r3, #1
 80041d4:	73bb      	strb	r3, [r7, #14]
 80041d6:	7bba      	ldrb	r2, [r7, #14]
 80041d8:	793b      	ldrb	r3, [r7, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d3ad      	bcc.n	800413a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80041de:	bf00      	nop
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd90      	pop	{r4, r7, pc}
 80041e8:	0800dcd0 	.word	0x0800dcd0
 80041ec:	0800e144 	.word	0x0800e144

080041f0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	4603      	mov	r3, r0
 80041f8:	603a      	str	r2, [r7, #0]
 80041fa:	71fb      	strb	r3, [r7, #7]
 80041fc:	460b      	mov	r3, r1
 80041fe:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8004200:	e01f      	b.n	8004242 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	2b7a      	cmp	r3, #122	; 0x7a
 8004206:	d904      	bls.n	8004212 <OLED_ShowString+0x22>
 8004208:	2300      	movs	r3, #0
 800420a:	71fb      	strb	r3, [r7, #7]
 800420c:	79bb      	ldrb	r3, [r7, #6]
 800420e:	3310      	adds	r3, #16
 8004210:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8004212:	79bb      	ldrb	r3, [r7, #6]
 8004214:	2b3a      	cmp	r3, #58	; 0x3a
 8004216:	d905      	bls.n	8004224 <OLED_ShowString+0x34>
 8004218:	2300      	movs	r3, #0
 800421a:	71fb      	strb	r3, [r7, #7]
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	71bb      	strb	r3, [r7, #6]
 8004220:	f7ff fef4 	bl	800400c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781a      	ldrb	r2, [r3, #0]
 8004228:	79b9      	ldrb	r1, [r7, #6]
 800422a:	79f8      	ldrb	r0, [r7, #7]
 800422c:	2301      	movs	r3, #1
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	230c      	movs	r3, #12
 8004232:	f7ff ff6b 	bl	800410c <OLED_ShowChar>
        x+=8;
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	3308      	adds	r3, #8
 800423a:	71fb      	strb	r3, [r7, #7]
        p++;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	3301      	adds	r3, #1
 8004240:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1db      	bne.n	8004202 <OLED_ShowString+0x12>
    }  
}	 
 800424a:	bf00      	nop
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <OLED_Init>:

void OLED_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8004258:	f002 f828 	bl	80062ac <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800425c:	4b41      	ldr	r3, [pc, #260]	; (8004364 <OLED_Init+0x110>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a40      	ldr	r2, [pc, #256]	; (8004364 <OLED_Init+0x110>)
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	4b3e      	ldr	r3, [pc, #248]	; (8004364 <OLED_Init+0x110>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	4a3d      	ldr	r2, [pc, #244]	; (8004364 <OLED_Init+0x110>)
 800426e:	f023 0304 	bic.w	r3, r3, #4
 8004272:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8004274:	f002 f82e 	bl	80062d4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8004278:	2200      	movs	r2, #0
 800427a:	2180      	movs	r1, #128	; 0x80
 800427c:	483a      	ldr	r0, [pc, #232]	; (8004368 <OLED_Init+0x114>)
 800427e:	f001 f84b 	bl	8005318 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004282:	2064      	movs	r0, #100	; 0x64
 8004284:	f000 f8e4 	bl	8004450 <HAL_Delay>
	OLED_RST_Set();
 8004288:	2201      	movs	r2, #1
 800428a:	2180      	movs	r1, #128	; 0x80
 800428c:	4836      	ldr	r0, [pc, #216]	; (8004368 <OLED_Init+0x114>)
 800428e:	f001 f843 	bl	8005318 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8004292:	2100      	movs	r1, #0
 8004294:	20ae      	movs	r0, #174	; 0xae
 8004296:	f7ff fe6f 	bl	8003f78 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800429a:	2100      	movs	r1, #0
 800429c:	20d5      	movs	r0, #213	; 0xd5
 800429e:	f7ff fe6b 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80042a2:	2100      	movs	r1, #0
 80042a4:	2050      	movs	r0, #80	; 0x50
 80042a6:	f7ff fe67 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80042aa:	2100      	movs	r1, #0
 80042ac:	20a8      	movs	r0, #168	; 0xa8
 80042ae:	f7ff fe63 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80042b2:	2100      	movs	r1, #0
 80042b4:	203f      	movs	r0, #63	; 0x3f
 80042b6:	f7ff fe5f 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80042ba:	2100      	movs	r1, #0
 80042bc:	20d3      	movs	r0, #211	; 0xd3
 80042be:	f7ff fe5b 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80042c2:	2100      	movs	r1, #0
 80042c4:	2000      	movs	r0, #0
 80042c6:	f7ff fe57 	bl	8003f78 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80042ca:	2100      	movs	r1, #0
 80042cc:	2040      	movs	r0, #64	; 0x40
 80042ce:	f7ff fe53 	bl	8003f78 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80042d2:	2100      	movs	r1, #0
 80042d4:	208d      	movs	r0, #141	; 0x8d
 80042d6:	f7ff fe4f 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80042da:	2100      	movs	r1, #0
 80042dc:	2014      	movs	r0, #20
 80042de:	f7ff fe4b 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80042e2:	2100      	movs	r1, #0
 80042e4:	2020      	movs	r0, #32
 80042e6:	f7ff fe47 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80042ea:	2100      	movs	r1, #0
 80042ec:	2002      	movs	r0, #2
 80042ee:	f7ff fe43 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80042f2:	2100      	movs	r1, #0
 80042f4:	20a1      	movs	r0, #161	; 0xa1
 80042f6:	f7ff fe3f 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80042fa:	2100      	movs	r1, #0
 80042fc:	20c0      	movs	r0, #192	; 0xc0
 80042fe:	f7ff fe3b 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8004302:	2100      	movs	r1, #0
 8004304:	20da      	movs	r0, #218	; 0xda
 8004306:	f7ff fe37 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800430a:	2100      	movs	r1, #0
 800430c:	2012      	movs	r0, #18
 800430e:	f7ff fe33 	bl	8003f78 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8004312:	2100      	movs	r1, #0
 8004314:	2081      	movs	r0, #129	; 0x81
 8004316:	f7ff fe2f 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800431a:	2100      	movs	r1, #0
 800431c:	20ef      	movs	r0, #239	; 0xef
 800431e:	f7ff fe2b 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8004322:	2100      	movs	r1, #0
 8004324:	20d9      	movs	r0, #217	; 0xd9
 8004326:	f7ff fe27 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800432a:	2100      	movs	r1, #0
 800432c:	20f1      	movs	r0, #241	; 0xf1
 800432e:	f7ff fe23 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8004332:	2100      	movs	r1, #0
 8004334:	20db      	movs	r0, #219	; 0xdb
 8004336:	f7ff fe1f 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800433a:	2100      	movs	r1, #0
 800433c:	2030      	movs	r0, #48	; 0x30
 800433e:	f7ff fe1b 	bl	8003f78 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8004342:	2100      	movs	r1, #0
 8004344:	20a4      	movs	r0, #164	; 0xa4
 8004346:	f7ff fe17 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800434a:	2100      	movs	r1, #0
 800434c:	20a6      	movs	r0, #166	; 0xa6
 800434e:	f7ff fe13 	bl	8003f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8004352:	2100      	movs	r1, #0
 8004354:	20af      	movs	r0, #175	; 0xaf
 8004356:	f7ff fe0f 	bl	8003f78 <OLED_WR_Byte>
	OLED_Clear(); 
 800435a:	f7ff fe57 	bl	800400c <OLED_Clear>
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40023800 	.word	0x40023800
 8004368:	40021000 	.word	0x40021000

0800436c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004370:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <HAL_Init+0x40>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <HAL_Init+0x40>)
 8004376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800437a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_Init+0x40>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <HAL_Init+0x40>)
 8004382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004386:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <HAL_Init+0x40>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a07      	ldr	r2, [pc, #28]	; (80043ac <HAL_Init+0x40>)
 800438e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004392:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004394:	2003      	movs	r0, #3
 8004396:	f000 fd4f 	bl	8004e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800439a:	200f      	movs	r0, #15
 800439c:	f000 f808 	bl	80043b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043a0:	f7ff fa0a 	bl	80037b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40023c00 	.word	0x40023c00

080043b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043b8:	4b12      	ldr	r3, [pc, #72]	; (8004404 <HAL_InitTick+0x54>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4b12      	ldr	r3, [pc, #72]	; (8004408 <HAL_InitTick+0x58>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	4619      	mov	r1, r3
 80043c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fd67 	bl	8004ea2 <HAL_SYSTICK_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e00e      	b.n	80043fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b0f      	cmp	r3, #15
 80043e2:	d80a      	bhi.n	80043fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043e4:	2200      	movs	r2, #0
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ec:	f000 fd2f 	bl	8004e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043f0:	4a06      	ldr	r2, [pc, #24]	; (800440c <HAL_InitTick+0x5c>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e000      	b.n	80043fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20000008 	.word	0x20000008
 8004408:	20000010 	.word	0x20000010
 800440c:	2000000c 	.word	0x2000000c

08004410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004414:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_IncTick+0x20>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	4b06      	ldr	r3, [pc, #24]	; (8004434 <HAL_IncTick+0x24>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4413      	add	r3, r2
 8004420:	4a04      	ldr	r2, [pc, #16]	; (8004434 <HAL_IncTick+0x24>)
 8004422:	6013      	str	r3, [r2, #0]
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000010 	.word	0x20000010
 8004434:	200007e8 	.word	0x200007e8

08004438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return uwTick;
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <HAL_GetTick+0x14>)
 800443e:	681b      	ldr	r3, [r3, #0]
}
 8004440:	4618      	mov	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	200007e8 	.word	0x200007e8

08004450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004458:	f7ff ffee 	bl	8004438 <HAL_GetTick>
 800445c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d005      	beq.n	8004476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <HAL_Delay+0x44>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4413      	add	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004476:	bf00      	nop
 8004478:	f7ff ffde 	bl	8004438 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	429a      	cmp	r2, r3
 8004486:	d8f7      	bhi.n	8004478 <HAL_Delay+0x28>
  {
  }
}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000010 	.word	0x20000010

08004498 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e033      	b.n	8004516 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff f9b2 	bl	8003820 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d118      	bne.n	8004508 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80044de:	f023 0302 	bic.w	r3, r3, #2
 80044e2:	f043 0202 	orr.w	r2, r3, #2
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fad8 	bl	8004aa0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	f043 0201 	orr.w	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
 8004506:	e001      	b.n	800450c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004514:	7bfb      	ldrb	r3, [r7, #15]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_ADC_Start+0x1a>
 8004536:	2302      	movs	r3, #2
 8004538:	e0b2      	b.n	80046a0 <HAL_ADC_Start+0x180>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b01      	cmp	r3, #1
 800454e:	d018      	beq.n	8004582 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0201 	orr.w	r2, r2, #1
 800455e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004560:	4b52      	ldr	r3, [pc, #328]	; (80046ac <HAL_ADC_Start+0x18c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a52      	ldr	r2, [pc, #328]	; (80046b0 <HAL_ADC_Start+0x190>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	0c9a      	lsrs	r2, r3, #18
 800456c:	4613      	mov	r3, r2
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	4413      	add	r3, r2
 8004572:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004574:	e002      	b.n	800457c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3b01      	subs	r3, #1
 800457a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f9      	bne.n	8004576 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d17a      	bne.n	8004686 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ce:	d106      	bne.n	80045de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d4:	f023 0206 	bic.w	r2, r3, #6
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	645a      	str	r2, [r3, #68]	; 0x44
 80045dc:	e002      	b.n	80045e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045ec:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <HAL_ADC_Start+0x194>)
 80045ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80045f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	2b00      	cmp	r3, #0
 8004604:	d12a      	bne.n	800465c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a2b      	ldr	r2, [pc, #172]	; (80046b8 <HAL_ADC_Start+0x198>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d015      	beq.n	800463c <HAL_ADC_Start+0x11c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a29      	ldr	r2, [pc, #164]	; (80046bc <HAL_ADC_Start+0x19c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d105      	bne.n	8004626 <HAL_ADC_Start+0x106>
 800461a:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <HAL_ADC_Start+0x194>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 031f 	and.w	r3, r3, #31
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a25      	ldr	r2, [pc, #148]	; (80046c0 <HAL_ADC_Start+0x1a0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d136      	bne.n	800469e <HAL_ADC_Start+0x17e>
 8004630:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <HAL_ADC_Start+0x194>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	2b00      	cmp	r3, #0
 800463a:	d130      	bne.n	800469e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d129      	bne.n	800469e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004658:	609a      	str	r2, [r3, #8]
 800465a:	e020      	b.n	800469e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <HAL_ADC_Start+0x198>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d11b      	bne.n	800469e <HAL_ADC_Start+0x17e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d114      	bne.n	800469e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004682:	609a      	str	r2, [r3, #8]
 8004684:	e00b      	b.n	800469e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f043 0210 	orr.w	r2, r3, #16
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f043 0201 	orr.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	20000008 	.word	0x20000008
 80046b0:	431bde83 	.word	0x431bde83
 80046b4:	40012300 	.word	0x40012300
 80046b8:	40012000 	.word	0x40012000
 80046bc:	40012100 	.word	0x40012100
 80046c0:	40012200 	.word	0x40012200

080046c4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_ADC_Stop+0x16>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e021      	b.n	800471e <HAL_ADC_Stop+0x5a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d109      	bne.n	8004714 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	f043 0201 	orr.w	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004746:	d113      	bne.n	8004770 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004756:	d10b      	bne.n	8004770 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	f043 0220 	orr.w	r2, r3, #32
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e063      	b.n	8004838 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004770:	f7ff fe62 	bl	8004438 <HAL_GetTick>
 8004774:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004776:	e021      	b.n	80047bc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477e:	d01d      	beq.n	80047bc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d007      	beq.n	8004796 <HAL_ADC_PollForConversion+0x6c>
 8004786:	f7ff fe57 	bl	8004438 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d212      	bcs.n	80047bc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d00b      	beq.n	80047bc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	f043 0204 	orr.w	r2, r3, #4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e03d      	b.n	8004838 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d1d6      	bne.n	8004778 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f06f 0212 	mvn.w	r2, #18
 80047d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d123      	bne.n	8004836 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11f      	bne.n	8004836 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004800:	2b00      	cmp	r3, #0
 8004802:	d006      	beq.n	8004812 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800480e:	2b00      	cmp	r3, #0
 8004810:	d111      	bne.n	8004836 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d105      	bne.n	8004836 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f043 0201 	orr.w	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x1c>
 8004874:	2302      	movs	r3, #2
 8004876:	e105      	b.n	8004a84 <HAL_ADC_ConfigChannel+0x228>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b09      	cmp	r3, #9
 8004886:	d925      	bls.n	80048d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68d9      	ldr	r1, [r3, #12]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	4613      	mov	r3, r2
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	4413      	add	r3, r2
 800489c:	3b1e      	subs	r3, #30
 800489e:	2207      	movs	r2, #7
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	43da      	mvns	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	400a      	ands	r2, r1
 80048ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68d9      	ldr	r1, [r3, #12]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	4618      	mov	r0, r3
 80048c0:	4603      	mov	r3, r0
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4403      	add	r3, r0
 80048c6:	3b1e      	subs	r3, #30
 80048c8:	409a      	lsls	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	60da      	str	r2, [r3, #12]
 80048d2:	e022      	b.n	800491a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6919      	ldr	r1, [r3, #16]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	4613      	mov	r3, r2
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	4413      	add	r3, r2
 80048e8:	2207      	movs	r2, #7
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43da      	mvns	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	400a      	ands	r2, r1
 80048f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6919      	ldr	r1, [r3, #16]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	4618      	mov	r0, r3
 800490a:	4603      	mov	r3, r0
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	4403      	add	r3, r0
 8004910:	409a      	lsls	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b06      	cmp	r3, #6
 8004920:	d824      	bhi.n	800496c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	3b05      	subs	r3, #5
 8004934:	221f      	movs	r2, #31
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43da      	mvns	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	400a      	ands	r2, r1
 8004942:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	b29b      	uxth	r3, r3
 8004950:	4618      	mov	r0, r3
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	3b05      	subs	r3, #5
 800495e:	fa00 f203 	lsl.w	r2, r0, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	635a      	str	r2, [r3, #52]	; 0x34
 800496a:	e04c      	b.n	8004a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b0c      	cmp	r3, #12
 8004972:	d824      	bhi.n	80049be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	3b23      	subs	r3, #35	; 0x23
 8004986:	221f      	movs	r2, #31
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43da      	mvns	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	400a      	ands	r2, r1
 8004994:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	4618      	mov	r0, r3
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	3b23      	subs	r3, #35	; 0x23
 80049b0:	fa00 f203 	lsl.w	r2, r0, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
 80049bc:	e023      	b.n	8004a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	3b41      	subs	r3, #65	; 0x41
 80049d0:	221f      	movs	r2, #31
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43da      	mvns	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	400a      	ands	r2, r1
 80049de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	4618      	mov	r0, r3
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	3b41      	subs	r3, #65	; 0x41
 80049fa:	fa00 f203 	lsl.w	r2, r0, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a06:	4b22      	ldr	r3, [pc, #136]	; (8004a90 <HAL_ADC_ConfigChannel+0x234>)
 8004a08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a21      	ldr	r2, [pc, #132]	; (8004a94 <HAL_ADC_ConfigChannel+0x238>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d109      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x1cc>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b12      	cmp	r3, #18
 8004a1a:	d105      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a19      	ldr	r2, [pc, #100]	; (8004a94 <HAL_ADC_ConfigChannel+0x238>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d123      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0x21e>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b10      	cmp	r3, #16
 8004a38:	d003      	beq.n	8004a42 <HAL_ADC_ConfigChannel+0x1e6>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b11      	cmp	r3, #17
 8004a40:	d11b      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d111      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a56:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <HAL_ADC_ConfigChannel+0x23c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <HAL_ADC_ConfigChannel+0x240>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	0c9a      	lsrs	r2, r3, #18
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a6c:	e002      	b.n	8004a74 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f9      	bne.n	8004a6e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	40012300 	.word	0x40012300
 8004a94:	40012000 	.word	0x40012000
 8004a98:	20000008 	.word	0x20000008
 8004a9c:	431bde83 	.word	0x431bde83

08004aa0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004aa8:	4b79      	ldr	r3, [pc, #484]	; (8004c90 <ADC_Init+0x1f0>)
 8004aaa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6859      	ldr	r1, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	021a      	lsls	r2, r3, #8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6859      	ldr	r1, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6899      	ldr	r1, [r3, #8]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	4a58      	ldr	r2, [pc, #352]	; (8004c94 <ADC_Init+0x1f4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d022      	beq.n	8004b7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6899      	ldr	r1, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6899      	ldr	r1, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	e00f      	b.n	8004b9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0202 	bic.w	r2, r2, #2
 8004bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6899      	ldr	r1, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	7e1b      	ldrb	r3, [r3, #24]
 8004bb8:	005a      	lsls	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01b      	beq.n	8004c04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004bea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6859      	ldr	r1, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	035a      	lsls	r2, r3, #13
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	e007      	b.n	8004c14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	051a      	lsls	r2, r3, #20
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6899      	ldr	r1, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c56:	025a      	lsls	r2, r3, #9
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6899      	ldr	r1, [r3, #8]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	029a      	lsls	r2, r3, #10
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	609a      	str	r2, [r3, #8]
}
 8004c84:	bf00      	nop
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	40012300 	.word	0x40012300
 8004c94:	0f000001 	.word	0x0f000001

08004c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ca8:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <__NVIC_SetPriorityGrouping+0x44>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cca:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <__NVIC_SetPriorityGrouping+0x44>)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	60d3      	str	r3, [r2, #12]
}
 8004cd0:	bf00      	nop
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	e000ed00 	.word	0xe000ed00

08004ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	0a1b      	lsrs	r3, r3, #8
 8004cea:	f003 0307 	and.w	r3, r3, #7
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	e000ed00 	.word	0xe000ed00

08004cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	db0b      	blt.n	8004d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	f003 021f 	and.w	r2, r3, #31
 8004d14:	4907      	ldr	r1, [pc, #28]	; (8004d34 <__NVIC_EnableIRQ+0x38>)
 8004d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	2001      	movs	r0, #1
 8004d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	e000e100 	.word	0xe000e100

08004d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	6039      	str	r1, [r7, #0]
 8004d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	db0a      	blt.n	8004d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	490c      	ldr	r1, [pc, #48]	; (8004d84 <__NVIC_SetPriority+0x4c>)
 8004d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d56:	0112      	lsls	r2, r2, #4
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d60:	e00a      	b.n	8004d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	4908      	ldr	r1, [pc, #32]	; (8004d88 <__NVIC_SetPriority+0x50>)
 8004d68:	79fb      	ldrb	r3, [r7, #7]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	3b04      	subs	r3, #4
 8004d70:	0112      	lsls	r2, r2, #4
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	440b      	add	r3, r1
 8004d76:	761a      	strb	r2, [r3, #24]
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	e000e100 	.word	0xe000e100
 8004d88:	e000ed00 	.word	0xe000ed00

08004d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b089      	sub	sp, #36	; 0x24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f1c3 0307 	rsb	r3, r3, #7
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	bf28      	it	cs
 8004daa:	2304      	movcs	r3, #4
 8004dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	3304      	adds	r3, #4
 8004db2:	2b06      	cmp	r3, #6
 8004db4:	d902      	bls.n	8004dbc <NVIC_EncodePriority+0x30>
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3b03      	subs	r3, #3
 8004dba:	e000      	b.n	8004dbe <NVIC_EncodePriority+0x32>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43da      	mvns	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	401a      	ands	r2, r3
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	fa01 f303 	lsl.w	r3, r1, r3
 8004dde:	43d9      	mvns	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004de4:	4313      	orrs	r3, r2
         );
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3724      	adds	r7, #36	; 0x24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e04:	d301      	bcc.n	8004e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e06:	2301      	movs	r3, #1
 8004e08:	e00f      	b.n	8004e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e0a:	4a0a      	ldr	r2, [pc, #40]	; (8004e34 <SysTick_Config+0x40>)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e12:	210f      	movs	r1, #15
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295
 8004e18:	f7ff ff8e 	bl	8004d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <SysTick_Config+0x40>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e22:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <SysTick_Config+0x40>)
 8004e24:	2207      	movs	r2, #7
 8004e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	e000e010 	.word	0xe000e010

08004e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff ff29 	bl	8004c98 <__NVIC_SetPriorityGrouping>
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b086      	sub	sp, #24
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	4603      	mov	r3, r0
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e60:	f7ff ff3e 	bl	8004ce0 <__NVIC_GetPriorityGrouping>
 8004e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	6978      	ldr	r0, [r7, #20]
 8004e6c:	f7ff ff8e 	bl	8004d8c <NVIC_EncodePriority>
 8004e70:	4602      	mov	r2, r0
 8004e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e76:	4611      	mov	r1, r2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff ff5d 	bl	8004d38 <__NVIC_SetPriority>
}
 8004e7e:	bf00      	nop
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff ff31 	bl	8004cfc <__NVIC_EnableIRQ>
}
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff ffa2 	bl	8004df4 <SysTick_Config>
 8004eb0:	4603      	mov	r3, r0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ec8:	f7ff fab6 	bl	8004438 <HAL_GetTick>
 8004ecc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d008      	beq.n	8004eec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2280      	movs	r2, #128	; 0x80
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e052      	b.n	8004f92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0216 	bic.w	r2, r2, #22
 8004efa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695a      	ldr	r2, [r3, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d103      	bne.n	8004f1c <HAL_DMA_Abort+0x62>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0208 	bic.w	r2, r2, #8
 8004f2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f3c:	e013      	b.n	8004f66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f3e:	f7ff fa7b 	bl	8004438 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b05      	cmp	r3, #5
 8004f4a:	d90c      	bls.n	8004f66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2203      	movs	r2, #3
 8004f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e015      	b.n	8004f92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e4      	bne.n	8004f3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f78:	223f      	movs	r2, #63	; 0x3f
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d004      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2280      	movs	r2, #128	; 0x80
 8004fb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e00c      	b.n	8004fd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2205      	movs	r2, #5
 8004fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b089      	sub	sp, #36	; 0x24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	e16b      	b.n	80052d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4013      	ands	r3, r2
 800500e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	429a      	cmp	r2, r3
 8005016:	f040 815a 	bne.w	80052ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	2b01      	cmp	r3, #1
 8005024:	d005      	beq.n	8005032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800502e:	2b02      	cmp	r3, #2
 8005030:	d130      	bne.n	8005094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	2203      	movs	r2, #3
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43db      	mvns	r3, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4013      	ands	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4313      	orrs	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005068:	2201      	movs	r2, #1
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	4013      	ands	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	091b      	lsrs	r3, r3, #4
 800507e:	f003 0201 	and.w	r2, r3, #1
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4313      	orrs	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	2b03      	cmp	r3, #3
 800509e:	d017      	beq.n	80050d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	2203      	movs	r2, #3
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	43db      	mvns	r3, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	4013      	ands	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d123      	bne.n	8005124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	08da      	lsrs	r2, r3, #3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3208      	adds	r2, #8
 80050e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	220f      	movs	r2, #15
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4013      	ands	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4313      	orrs	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	08da      	lsrs	r2, r3, #3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3208      	adds	r2, #8
 800511e:	69b9      	ldr	r1, [r7, #24]
 8005120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	2203      	movs	r2, #3
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	43db      	mvns	r3, r3
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	4013      	ands	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f003 0203 	and.w	r2, r3, #3
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4313      	orrs	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 80b4 	beq.w	80052ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	4b60      	ldr	r3, [pc, #384]	; (80052ec <HAL_GPIO_Init+0x30c>)
 800516c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516e:	4a5f      	ldr	r2, [pc, #380]	; (80052ec <HAL_GPIO_Init+0x30c>)
 8005170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005174:	6453      	str	r3, [r2, #68]	; 0x44
 8005176:	4b5d      	ldr	r3, [pc, #372]	; (80052ec <HAL_GPIO_Init+0x30c>)
 8005178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005182:	4a5b      	ldr	r2, [pc, #364]	; (80052f0 <HAL_GPIO_Init+0x310>)
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	089b      	lsrs	r3, r3, #2
 8005188:	3302      	adds	r3, #2
 800518a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800518e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	220f      	movs	r2, #15
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4013      	ands	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a52      	ldr	r2, [pc, #328]	; (80052f4 <HAL_GPIO_Init+0x314>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d02b      	beq.n	8005206 <HAL_GPIO_Init+0x226>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a51      	ldr	r2, [pc, #324]	; (80052f8 <HAL_GPIO_Init+0x318>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d025      	beq.n	8005202 <HAL_GPIO_Init+0x222>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a50      	ldr	r2, [pc, #320]	; (80052fc <HAL_GPIO_Init+0x31c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01f      	beq.n	80051fe <HAL_GPIO_Init+0x21e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a4f      	ldr	r2, [pc, #316]	; (8005300 <HAL_GPIO_Init+0x320>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d019      	beq.n	80051fa <HAL_GPIO_Init+0x21a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a4e      	ldr	r2, [pc, #312]	; (8005304 <HAL_GPIO_Init+0x324>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <HAL_GPIO_Init+0x216>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a4d      	ldr	r2, [pc, #308]	; (8005308 <HAL_GPIO_Init+0x328>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00d      	beq.n	80051f2 <HAL_GPIO_Init+0x212>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a4c      	ldr	r2, [pc, #304]	; (800530c <HAL_GPIO_Init+0x32c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d007      	beq.n	80051ee <HAL_GPIO_Init+0x20e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a4b      	ldr	r2, [pc, #300]	; (8005310 <HAL_GPIO_Init+0x330>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d101      	bne.n	80051ea <HAL_GPIO_Init+0x20a>
 80051e6:	2307      	movs	r3, #7
 80051e8:	e00e      	b.n	8005208 <HAL_GPIO_Init+0x228>
 80051ea:	2308      	movs	r3, #8
 80051ec:	e00c      	b.n	8005208 <HAL_GPIO_Init+0x228>
 80051ee:	2306      	movs	r3, #6
 80051f0:	e00a      	b.n	8005208 <HAL_GPIO_Init+0x228>
 80051f2:	2305      	movs	r3, #5
 80051f4:	e008      	b.n	8005208 <HAL_GPIO_Init+0x228>
 80051f6:	2304      	movs	r3, #4
 80051f8:	e006      	b.n	8005208 <HAL_GPIO_Init+0x228>
 80051fa:	2303      	movs	r3, #3
 80051fc:	e004      	b.n	8005208 <HAL_GPIO_Init+0x228>
 80051fe:	2302      	movs	r3, #2
 8005200:	e002      	b.n	8005208 <HAL_GPIO_Init+0x228>
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <HAL_GPIO_Init+0x228>
 8005206:	2300      	movs	r3, #0
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	f002 0203 	and.w	r2, r2, #3
 800520e:	0092      	lsls	r2, r2, #2
 8005210:	4093      	lsls	r3, r2
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	4313      	orrs	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005218:	4935      	ldr	r1, [pc, #212]	; (80052f0 <HAL_GPIO_Init+0x310>)
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	089b      	lsrs	r3, r3, #2
 800521e:	3302      	adds	r3, #2
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005226:	4b3b      	ldr	r3, [pc, #236]	; (8005314 <HAL_GPIO_Init+0x334>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	43db      	mvns	r3, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4013      	ands	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800524a:	4a32      	ldr	r2, [pc, #200]	; (8005314 <HAL_GPIO_Init+0x334>)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005250:	4b30      	ldr	r3, [pc, #192]	; (8005314 <HAL_GPIO_Init+0x334>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	43db      	mvns	r3, r3
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	4013      	ands	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005274:	4a27      	ldr	r2, [pc, #156]	; (8005314 <HAL_GPIO_Init+0x334>)
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800527a:	4b26      	ldr	r3, [pc, #152]	; (8005314 <HAL_GPIO_Init+0x334>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	43db      	mvns	r3, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4013      	ands	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800529e:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <HAL_GPIO_Init+0x334>)
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052a4:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <HAL_GPIO_Init+0x334>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	43db      	mvns	r3, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4013      	ands	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052c8:	4a12      	ldr	r2, [pc, #72]	; (8005314 <HAL_GPIO_Init+0x334>)
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	3301      	adds	r3, #1
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	2b0f      	cmp	r3, #15
 80052d8:	f67f ae90 	bls.w	8004ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052dc:	bf00      	nop
 80052de:	bf00      	nop
 80052e0:	3724      	adds	r7, #36	; 0x24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40023800 	.word	0x40023800
 80052f0:	40013800 	.word	0x40013800
 80052f4:	40020000 	.word	0x40020000
 80052f8:	40020400 	.word	0x40020400
 80052fc:	40020800 	.word	0x40020800
 8005300:	40020c00 	.word	0x40020c00
 8005304:	40021000 	.word	0x40021000
 8005308:	40021400 	.word	0x40021400
 800530c:	40021800 	.word	0x40021800
 8005310:	40021c00 	.word	0x40021c00
 8005314:	40013c00 	.word	0x40013c00

08005318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	807b      	strh	r3, [r7, #2]
 8005324:	4613      	mov	r3, r2
 8005326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005328:	787b      	ldrb	r3, [r7, #1]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800532e:	887a      	ldrh	r2, [r7, #2]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005334:	e003      	b.n	800533e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005336:	887b      	ldrh	r3, [r7, #2]
 8005338:	041a      	lsls	r2, r3, #16
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	619a      	str	r2, [r3, #24]
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	460b      	mov	r3, r1
 8005354:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800535c:	887a      	ldrh	r2, [r7, #2]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4013      	ands	r3, r2
 8005362:	041a      	lsls	r2, r3, #16
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	43d9      	mvns	r1, r3
 8005368:	887b      	ldrh	r3, [r7, #2]
 800536a:	400b      	ands	r3, r1
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	619a      	str	r2, [r3, #24]
}
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e12b      	b.n	80055ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7fe faae 	bl	8003908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2224      	movs	r2, #36	; 0x24
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0201 	bic.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053e4:	f001 fbba 	bl	8006b5c <HAL_RCC_GetPCLK1Freq>
 80053e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	4a81      	ldr	r2, [pc, #516]	; (80055f4 <HAL_I2C_Init+0x274>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d807      	bhi.n	8005404 <HAL_I2C_Init+0x84>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4a80      	ldr	r2, [pc, #512]	; (80055f8 <HAL_I2C_Init+0x278>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	bf94      	ite	ls
 80053fc:	2301      	movls	r3, #1
 80053fe:	2300      	movhi	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	e006      	b.n	8005412 <HAL_I2C_Init+0x92>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4a7d      	ldr	r2, [pc, #500]	; (80055fc <HAL_I2C_Init+0x27c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	bf94      	ite	ls
 800540c:	2301      	movls	r3, #1
 800540e:	2300      	movhi	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e0e7      	b.n	80055ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4a78      	ldr	r2, [pc, #480]	; (8005600 <HAL_I2C_Init+0x280>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	0c9b      	lsrs	r3, r3, #18
 8005424:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4a6a      	ldr	r2, [pc, #424]	; (80055f4 <HAL_I2C_Init+0x274>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d802      	bhi.n	8005454 <HAL_I2C_Init+0xd4>
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	3301      	adds	r3, #1
 8005452:	e009      	b.n	8005468 <HAL_I2C_Init+0xe8>
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800545a:	fb02 f303 	mul.w	r3, r2, r3
 800545e:	4a69      	ldr	r2, [pc, #420]	; (8005604 <HAL_I2C_Init+0x284>)
 8005460:	fba2 2303 	umull	r2, r3, r2, r3
 8005464:	099b      	lsrs	r3, r3, #6
 8005466:	3301      	adds	r3, #1
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	430b      	orrs	r3, r1
 800546e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800547a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	495c      	ldr	r1, [pc, #368]	; (80055f4 <HAL_I2C_Init+0x274>)
 8005484:	428b      	cmp	r3, r1
 8005486:	d819      	bhi.n	80054bc <HAL_I2C_Init+0x13c>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	1e59      	subs	r1, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	fbb1 f3f3 	udiv	r3, r1, r3
 8005496:	1c59      	adds	r1, r3, #1
 8005498:	f640 73fc 	movw	r3, #4092	; 0xffc
 800549c:	400b      	ands	r3, r1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_I2C_Init+0x138>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	1e59      	subs	r1, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80054b0:	3301      	adds	r3, #1
 80054b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b6:	e051      	b.n	800555c <HAL_I2C_Init+0x1dc>
 80054b8:	2304      	movs	r3, #4
 80054ba:	e04f      	b.n	800555c <HAL_I2C_Init+0x1dc>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d111      	bne.n	80054e8 <HAL_I2C_Init+0x168>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	1e58      	subs	r0, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6859      	ldr	r1, [r3, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	440b      	add	r3, r1
 80054d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054d6:	3301      	adds	r3, #1
 80054d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bf0c      	ite	eq
 80054e0:	2301      	moveq	r3, #1
 80054e2:	2300      	movne	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e012      	b.n	800550e <HAL_I2C_Init+0x18e>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	1e58      	subs	r0, r3, #1
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6859      	ldr	r1, [r3, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	0099      	lsls	r1, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80054fe:	3301      	adds	r3, #1
 8005500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf0c      	ite	eq
 8005508:	2301      	moveq	r3, #1
 800550a:	2300      	movne	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_I2C_Init+0x196>
 8005512:	2301      	movs	r3, #1
 8005514:	e022      	b.n	800555c <HAL_I2C_Init+0x1dc>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10e      	bne.n	800553c <HAL_I2C_Init+0x1bc>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1e58      	subs	r0, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6859      	ldr	r1, [r3, #4]
 8005526:	460b      	mov	r3, r1
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	440b      	add	r3, r1
 800552c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005530:	3301      	adds	r3, #1
 8005532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553a:	e00f      	b.n	800555c <HAL_I2C_Init+0x1dc>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	1e58      	subs	r0, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	0099      	lsls	r1, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005552:	3301      	adds	r3, #1
 8005554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	6809      	ldr	r1, [r1, #0]
 8005560:	4313      	orrs	r3, r2
 8005562:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69da      	ldr	r2, [r3, #28]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800558a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6911      	ldr	r1, [r2, #16]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	68d2      	ldr	r2, [r2, #12]
 8005596:	4311      	orrs	r1, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	430b      	orrs	r3, r1
 800559e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0201 	orr.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	000186a0 	.word	0x000186a0
 80055f8:	001e847f 	.word	0x001e847f
 80055fc:	003d08ff 	.word	0x003d08ff
 8005600:	431bde83 	.word	0x431bde83
 8005604:	10624dd3 	.word	0x10624dd3

08005608 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	607a      	str	r2, [r7, #4]
 8005612:	461a      	mov	r2, r3
 8005614:	460b      	mov	r3, r1
 8005616:	817b      	strh	r3, [r7, #10]
 8005618:	4613      	mov	r3, r2
 800561a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800561c:	f7fe ff0c 	bl	8004438 <HAL_GetTick>
 8005620:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b20      	cmp	r3, #32
 800562c:	f040 80e0 	bne.w	80057f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	2319      	movs	r3, #25
 8005636:	2201      	movs	r2, #1
 8005638:	4970      	ldr	r1, [pc, #448]	; (80057fc <HAL_I2C_Master_Transmit+0x1f4>)
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 fc58 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005646:	2302      	movs	r3, #2
 8005648:	e0d3      	b.n	80057f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_I2C_Master_Transmit+0x50>
 8005654:	2302      	movs	r3, #2
 8005656:	e0cc      	b.n	80057f2 <HAL_I2C_Master_Transmit+0x1ea>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b01      	cmp	r3, #1
 800566c:	d007      	beq.n	800567e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0201 	orr.w	r2, r2, #1
 800567c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800568c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2221      	movs	r2, #33	; 0x21
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2210      	movs	r2, #16
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	893a      	ldrh	r2, [r7, #8]
 80056ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4a50      	ldr	r2, [pc, #320]	; (8005800 <HAL_I2C_Master_Transmit+0x1f8>)
 80056be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056c0:	8979      	ldrh	r1, [r7, #10]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	6a3a      	ldr	r2, [r7, #32]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 fac2 	bl	8005c50 <I2C_MasterRequestWrite>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e08d      	b.n	80057f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d6:	2300      	movs	r3, #0
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80056ec:	e066      	b.n	80057bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	6a39      	ldr	r1, [r7, #32]
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fcd2 	bl	800609c <I2C_WaitOnTXEFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	2b04      	cmp	r3, #4
 8005704:	d107      	bne.n	8005716 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005714:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e06b      	b.n	80057f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	781a      	ldrb	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005742:	3b01      	subs	r3, #1
 8005744:	b29a      	uxth	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b04      	cmp	r3, #4
 8005756:	d11b      	bne.n	8005790 <HAL_I2C_Master_Transmit+0x188>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575c:	2b00      	cmp	r3, #0
 800575e:	d017      	beq.n	8005790 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	781a      	ldrb	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	6a39      	ldr	r1, [r7, #32]
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 fcc2 	bl	800611e <I2C_WaitOnBTFFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00d      	beq.n	80057bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d107      	bne.n	80057b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e01a      	b.n	80057f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d194      	bne.n	80056ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	e000      	b.n	80057f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057f0:	2302      	movs	r3, #2
  }
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	00100002 	.word	0x00100002
 8005800:	ffff0000 	.word	0xffff0000

08005804 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08c      	sub	sp, #48	; 0x30
 8005808:	af02      	add	r7, sp, #8
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	607a      	str	r2, [r7, #4]
 800580e:	461a      	mov	r2, r3
 8005810:	460b      	mov	r3, r1
 8005812:	817b      	strh	r3, [r7, #10]
 8005814:	4613      	mov	r3, r2
 8005816:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005818:	f7fe fe0e 	bl	8004438 <HAL_GetTick>
 800581c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b20      	cmp	r3, #32
 8005828:	f040 820b 	bne.w	8005c42 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	2319      	movs	r3, #25
 8005832:	2201      	movs	r2, #1
 8005834:	497c      	ldr	r1, [pc, #496]	; (8005a28 <HAL_I2C_Master_Receive+0x224>)
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fb5a 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005842:	2302      	movs	r3, #2
 8005844:	e1fe      	b.n	8005c44 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_I2C_Master_Receive+0x50>
 8005850:	2302      	movs	r3, #2
 8005852:	e1f7      	b.n	8005c44 <HAL_I2C_Master_Receive+0x440>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b01      	cmp	r3, #1
 8005868:	d007      	beq.n	800587a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0201 	orr.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005888:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2222      	movs	r2, #34	; 0x22
 800588e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2210      	movs	r2, #16
 8005896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	893a      	ldrh	r2, [r7, #8]
 80058aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4a5c      	ldr	r2, [pc, #368]	; (8005a2c <HAL_I2C_Master_Receive+0x228>)
 80058ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80058bc:	8979      	ldrh	r1, [r7, #10]
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 fa46 	bl	8005d54 <I2C_MasterRequestRead>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e1b8      	b.n	8005c44 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d113      	bne.n	8005902 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058da:	2300      	movs	r3, #0
 80058dc:	623b      	str	r3, [r7, #32]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	623b      	str	r3, [r7, #32]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	623b      	str	r3, [r7, #32]
 80058ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	e18c      	b.n	8005c1c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005906:	2b01      	cmp	r3, #1
 8005908:	d11b      	bne.n	8005942 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	61fb      	str	r3, [r7, #28]
 800592e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	e16c      	b.n	8005c1c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005946:	2b02      	cmp	r3, #2
 8005948:	d11b      	bne.n	8005982 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005958:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005968:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800596a:	2300      	movs	r3, #0
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	e14c      	b.n	8005c1c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005990:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80059a8:	e138      	b.n	8005c1c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	f200 80f1 	bhi.w	8005b96 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d123      	bne.n	8005a04 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 fbed 	bl	80061a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e139      	b.n	8005c44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a02:	e10b      	b.n	8005c1c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d14e      	bne.n	8005aaa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	2200      	movs	r2, #0
 8005a14:	4906      	ldr	r1, [pc, #24]	; (8005a30 <HAL_I2C_Master_Receive+0x22c>)
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 fa6a 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d008      	beq.n	8005a34 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e10e      	b.n	8005c44 <HAL_I2C_Master_Receive+0x440>
 8005a26:	bf00      	nop
 8005a28:	00100002 	.word	0x00100002
 8005a2c:	ffff0000 	.word	0xffff0000
 8005a30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005aa8:	e0b8      	b.n	8005c1c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4966      	ldr	r1, [pc, #408]	; (8005c4c <HAL_I2C_Master_Receive+0x448>)
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 fa1b 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e0bf      	b.n	8005c44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	494f      	ldr	r1, [pc, #316]	; (8005c4c <HAL_I2C_Master_Receive+0x448>)
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f9ed 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e091      	b.n	8005c44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b94:	e042      	b.n	8005c1c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 fb00 	bl	80061a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e04c      	b.n	8005c44 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d118      	bne.n	8005c1c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f47f aec2 	bne.w	80059aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e000      	b.n	8005c44 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c42:	2302      	movs	r3, #2
  }
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3728      	adds	r7, #40	; 0x28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	00010004 	.word	0x00010004

08005c50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	607a      	str	r2, [r7, #4]
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d006      	beq.n	8005c7a <I2C_MasterRequestWrite+0x2a>
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d003      	beq.n	8005c7a <I2C_MasterRequestWrite+0x2a>
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c78:	d108      	bne.n	8005c8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e00b      	b.n	8005ca4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	2b12      	cmp	r3, #18
 8005c92:	d107      	bne.n	8005ca4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ca2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f91d 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00d      	beq.n	8005cd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cca:	d103      	bne.n	8005cd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e035      	b.n	8005d44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ce0:	d108      	bne.n	8005cf4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ce2:	897b      	ldrh	r3, [r7, #10]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cf0:	611a      	str	r2, [r3, #16]
 8005cf2:	e01b      	b.n	8005d2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005cf4:	897b      	ldrh	r3, [r7, #10]
 8005cf6:	11db      	asrs	r3, r3, #7
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f003 0306 	and.w	r3, r3, #6
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	f063 030f 	orn	r3, r3, #15
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	490e      	ldr	r1, [pc, #56]	; (8005d4c <I2C_MasterRequestWrite+0xfc>)
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 f943 	bl	8005f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e010      	b.n	8005d44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d22:	897b      	ldrh	r3, [r7, #10]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	4907      	ldr	r1, [pc, #28]	; (8005d50 <I2C_MasterRequestWrite+0x100>)
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 f933 	bl	8005f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	00010008 	.word	0x00010008
 8005d50:	00010002 	.word	0x00010002

08005d54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	607a      	str	r2, [r7, #4]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	460b      	mov	r3, r1
 8005d62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d006      	beq.n	8005d8e <I2C_MasterRequestRead+0x3a>
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d003      	beq.n	8005d8e <I2C_MasterRequestRead+0x3a>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d8c:	d108      	bne.n	8005da0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	e00b      	b.n	8005db8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	2b11      	cmp	r3, #17
 8005da6:	d107      	bne.n	8005db8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005db6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f893 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00d      	beq.n	8005dec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dde:	d103      	bne.n	8005de8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e079      	b.n	8005ee0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005df4:	d108      	bne.n	8005e08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005df6:	897b      	ldrh	r3, [r7, #10]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	f043 0301 	orr.w	r3, r3, #1
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	611a      	str	r2, [r3, #16]
 8005e06:	e05f      	b.n	8005ec8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005e08:	897b      	ldrh	r3, [r7, #10]
 8005e0a:	11db      	asrs	r3, r3, #7
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	f003 0306 	and.w	r3, r3, #6
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f063 030f 	orn	r3, r3, #15
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	4930      	ldr	r1, [pc, #192]	; (8005ee8 <I2C_MasterRequestRead+0x194>)
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 f8b9 	bl	8005f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e054      	b.n	8005ee0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e36:	897b      	ldrh	r3, [r7, #10]
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	4929      	ldr	r1, [pc, #164]	; (8005eec <I2C_MasterRequestRead+0x198>)
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f8a9 	bl	8005f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e044      	b.n	8005ee0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e56:	2300      	movs	r3, #0
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f831 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00d      	beq.n	8005eb0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea2:	d103      	bne.n	8005eac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eaa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e017      	b.n	8005ee0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005eb0:	897b      	ldrh	r3, [r7, #10]
 8005eb2:	11db      	asrs	r3, r3, #7
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	f003 0306 	and.w	r3, r3, #6
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f063 030e 	orn	r3, r3, #14
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	4907      	ldr	r1, [pc, #28]	; (8005eec <I2C_MasterRequestRead+0x198>)
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 f865 	bl	8005f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	00010008 	.word	0x00010008
 8005eec:	00010002 	.word	0x00010002

08005ef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	4613      	mov	r3, r2
 8005efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f00:	e025      	b.n	8005f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d021      	beq.n	8005f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0a:	f7fe fa95 	bl	8004438 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d302      	bcc.n	8005f20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d116      	bne.n	8005f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f043 0220 	orr.w	r2, r3, #32
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e023      	b.n	8005f96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	0c1b      	lsrs	r3, r3, #16
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d10d      	bne.n	8005f74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	43da      	mvns	r2, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	4013      	ands	r3, r2
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	bf0c      	ite	eq
 8005f6a:	2301      	moveq	r3, #1
 8005f6c:	2300      	movne	r3, #0
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	e00c      	b.n	8005f8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	43da      	mvns	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	bf0c      	ite	eq
 8005f86:	2301      	moveq	r3, #1
 8005f88:	2300      	movne	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d0b6      	beq.n	8005f02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fac:	e051      	b.n	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fbc:	d123      	bne.n	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	f043 0204 	orr.w	r2, r3, #4
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e046      	b.n	8006094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d021      	beq.n	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800600e:	f7fe fa13 	bl	8004438 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	429a      	cmp	r2, r3
 800601c:	d302      	bcc.n	8006024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d116      	bne.n	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	f043 0220 	orr.w	r2, r3, #32
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e020      	b.n	8006094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b01      	cmp	r3, #1
 800605a:	d10c      	bne.n	8006076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	43da      	mvns	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4013      	ands	r3, r2
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	bf14      	ite	ne
 800606e:	2301      	movne	r3, #1
 8006070:	2300      	moveq	r3, #0
 8006072:	b2db      	uxtb	r3, r3
 8006074:	e00b      	b.n	800608e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	43da      	mvns	r2, r3
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4013      	ands	r3, r2
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	bf14      	ite	ne
 8006088:	2301      	movne	r3, #1
 800608a:	2300      	moveq	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d18d      	bne.n	8005fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060a8:	e02d      	b.n	8006106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 f8ce 	bl	800624c <I2C_IsAcknowledgeFailed>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e02d      	b.n	8006116 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d021      	beq.n	8006106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c2:	f7fe f9b9 	bl	8004438 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d302      	bcc.n	80060d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d116      	bne.n	8006106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f043 0220 	orr.w	r2, r3, #32
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e007      	b.n	8006116 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006110:	2b80      	cmp	r3, #128	; 0x80
 8006112:	d1ca      	bne.n	80060aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800612a:	e02d      	b.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f88d 	bl	800624c <I2C_IsAcknowledgeFailed>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e02d      	b.n	8006198 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006142:	d021      	beq.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006144:	f7fe f978 	bl	8004438 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	429a      	cmp	r2, r3
 8006152:	d302      	bcc.n	800615a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d116      	bne.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	f043 0220 	orr.w	r2, r3, #32
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e007      	b.n	8006198 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b04      	cmp	r3, #4
 8006194:	d1ca      	bne.n	800612c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061ac:	e042      	b.n	8006234 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b10      	cmp	r3, #16
 80061ba:	d119      	bne.n	80061f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0210 	mvn.w	r2, #16
 80061c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e029      	b.n	8006244 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f0:	f7fe f922 	bl	8004438 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d302      	bcc.n	8006206 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d116      	bne.n	8006234 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	f043 0220 	orr.w	r2, r3, #32
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e007      	b.n	8006244 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	d1b5      	bne.n	80061ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800625e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006262:	d11b      	bne.n	800629c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800626c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	f043 0204 	orr.w	r2, r3, #4
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
	...

080062ac <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <HAL_PWR_EnableBkUpAccess+0x20>)
 80062b4:	2201      	movs	r2, #1
 80062b6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80062b8:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <HAL_PWR_EnableBkUpAccess+0x24>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80062be:	687b      	ldr	r3, [r7, #4]
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	420e0020 	.word	0x420e0020
 80062d0:	40007000 	.word	0x40007000

080062d4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80062da:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <HAL_PWR_DisableBkUpAccess+0x20>)
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80062e0:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <HAL_PWR_DisableBkUpAccess+0x24>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80062e6:	687b      	ldr	r3, [r7, #4]
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	420e0020 	.word	0x420e0020
 80062f8:	40007000 	.word	0x40007000

080062fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e267      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d075      	beq.n	8006406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800631a:	4b88      	ldr	r3, [pc, #544]	; (800653c <HAL_RCC_OscConfig+0x240>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 030c 	and.w	r3, r3, #12
 8006322:	2b04      	cmp	r3, #4
 8006324:	d00c      	beq.n	8006340 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006326:	4b85      	ldr	r3, [pc, #532]	; (800653c <HAL_RCC_OscConfig+0x240>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800632e:	2b08      	cmp	r3, #8
 8006330:	d112      	bne.n	8006358 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006332:	4b82      	ldr	r3, [pc, #520]	; (800653c <HAL_RCC_OscConfig+0x240>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800633a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800633e:	d10b      	bne.n	8006358 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006340:	4b7e      	ldr	r3, [pc, #504]	; (800653c <HAL_RCC_OscConfig+0x240>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d05b      	beq.n	8006404 <HAL_RCC_OscConfig+0x108>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d157      	bne.n	8006404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e242      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006360:	d106      	bne.n	8006370 <HAL_RCC_OscConfig+0x74>
 8006362:	4b76      	ldr	r3, [pc, #472]	; (800653c <HAL_RCC_OscConfig+0x240>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a75      	ldr	r2, [pc, #468]	; (800653c <HAL_RCC_OscConfig+0x240>)
 8006368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	e01d      	b.n	80063ac <HAL_RCC_OscConfig+0xb0>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006378:	d10c      	bne.n	8006394 <HAL_RCC_OscConfig+0x98>
 800637a:	4b70      	ldr	r3, [pc, #448]	; (800653c <HAL_RCC_OscConfig+0x240>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a6f      	ldr	r2, [pc, #444]	; (800653c <HAL_RCC_OscConfig+0x240>)
 8006380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	4b6d      	ldr	r3, [pc, #436]	; (800653c <HAL_RCC_OscConfig+0x240>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a6c      	ldr	r2, [pc, #432]	; (800653c <HAL_RCC_OscConfig+0x240>)
 800638c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	e00b      	b.n	80063ac <HAL_RCC_OscConfig+0xb0>
 8006394:	4b69      	ldr	r3, [pc, #420]	; (800653c <HAL_RCC_OscConfig+0x240>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a68      	ldr	r2, [pc, #416]	; (800653c <HAL_RCC_OscConfig+0x240>)
 800639a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	4b66      	ldr	r3, [pc, #408]	; (800653c <HAL_RCC_OscConfig+0x240>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a65      	ldr	r2, [pc, #404]	; (800653c <HAL_RCC_OscConfig+0x240>)
 80063a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d013      	beq.n	80063dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b4:	f7fe f840 	bl	8004438 <HAL_GetTick>
 80063b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063bc:	f7fe f83c 	bl	8004438 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b64      	cmp	r3, #100	; 0x64
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e207      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ce:	4b5b      	ldr	r3, [pc, #364]	; (800653c <HAL_RCC_OscConfig+0x240>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0f0      	beq.n	80063bc <HAL_RCC_OscConfig+0xc0>
 80063da:	e014      	b.n	8006406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063dc:	f7fe f82c 	bl	8004438 <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063e4:	f7fe f828 	bl	8004438 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b64      	cmp	r3, #100	; 0x64
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e1f3      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063f6:	4b51      	ldr	r3, [pc, #324]	; (800653c <HAL_RCC_OscConfig+0x240>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1f0      	bne.n	80063e4 <HAL_RCC_OscConfig+0xe8>
 8006402:	e000      	b.n	8006406 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d063      	beq.n	80064da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006412:	4b4a      	ldr	r3, [pc, #296]	; (800653c <HAL_RCC_OscConfig+0x240>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 030c 	and.w	r3, r3, #12
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800641e:	4b47      	ldr	r3, [pc, #284]	; (800653c <HAL_RCC_OscConfig+0x240>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006426:	2b08      	cmp	r3, #8
 8006428:	d11c      	bne.n	8006464 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800642a:	4b44      	ldr	r3, [pc, #272]	; (800653c <HAL_RCC_OscConfig+0x240>)
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d116      	bne.n	8006464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006436:	4b41      	ldr	r3, [pc, #260]	; (800653c <HAL_RCC_OscConfig+0x240>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d005      	beq.n	800644e <HAL_RCC_OscConfig+0x152>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d001      	beq.n	800644e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e1c7      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644e:	4b3b      	ldr	r3, [pc, #236]	; (800653c <HAL_RCC_OscConfig+0x240>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	4937      	ldr	r1, [pc, #220]	; (800653c <HAL_RCC_OscConfig+0x240>)
 800645e:	4313      	orrs	r3, r2
 8006460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006462:	e03a      	b.n	80064da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d020      	beq.n	80064ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800646c:	4b34      	ldr	r3, [pc, #208]	; (8006540 <HAL_RCC_OscConfig+0x244>)
 800646e:	2201      	movs	r2, #1
 8006470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006472:	f7fd ffe1 	bl	8004438 <HAL_GetTick>
 8006476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800647a:	f7fd ffdd 	bl	8004438 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e1a8      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800648c:	4b2b      	ldr	r3, [pc, #172]	; (800653c <HAL_RCC_OscConfig+0x240>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0f0      	beq.n	800647a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006498:	4b28      	ldr	r3, [pc, #160]	; (800653c <HAL_RCC_OscConfig+0x240>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	4925      	ldr	r1, [pc, #148]	; (800653c <HAL_RCC_OscConfig+0x240>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	600b      	str	r3, [r1, #0]
 80064ac:	e015      	b.n	80064da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ae:	4b24      	ldr	r3, [pc, #144]	; (8006540 <HAL_RCC_OscConfig+0x244>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b4:	f7fd ffc0 	bl	8004438 <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064bc:	f7fd ffbc 	bl	8004438 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e187      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ce:	4b1b      	ldr	r3, [pc, #108]	; (800653c <HAL_RCC_OscConfig+0x240>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1f0      	bne.n	80064bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0308 	and.w	r3, r3, #8
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d036      	beq.n	8006554 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d016      	beq.n	800651c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ee:	4b15      	ldr	r3, [pc, #84]	; (8006544 <HAL_RCC_OscConfig+0x248>)
 80064f0:	2201      	movs	r2, #1
 80064f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f4:	f7fd ffa0 	bl	8004438 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064fc:	f7fd ff9c 	bl	8004438 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e167      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800650e:	4b0b      	ldr	r3, [pc, #44]	; (800653c <HAL_RCC_OscConfig+0x240>)
 8006510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0f0      	beq.n	80064fc <HAL_RCC_OscConfig+0x200>
 800651a:	e01b      	b.n	8006554 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800651c:	4b09      	ldr	r3, [pc, #36]	; (8006544 <HAL_RCC_OscConfig+0x248>)
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006522:	f7fd ff89 	bl	8004438 <HAL_GetTick>
 8006526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006528:	e00e      	b.n	8006548 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800652a:	f7fd ff85 	bl	8004438 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d907      	bls.n	8006548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e150      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
 800653c:	40023800 	.word	0x40023800
 8006540:	42470000 	.word	0x42470000
 8006544:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006548:	4b88      	ldr	r3, [pc, #544]	; (800676c <HAL_RCC_OscConfig+0x470>)
 800654a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1ea      	bne.n	800652a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8097 	beq.w	8006690 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006562:	2300      	movs	r3, #0
 8006564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006566:	4b81      	ldr	r3, [pc, #516]	; (800676c <HAL_RCC_OscConfig+0x470>)
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10f      	bne.n	8006592 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006572:	2300      	movs	r3, #0
 8006574:	60bb      	str	r3, [r7, #8]
 8006576:	4b7d      	ldr	r3, [pc, #500]	; (800676c <HAL_RCC_OscConfig+0x470>)
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	4a7c      	ldr	r2, [pc, #496]	; (800676c <HAL_RCC_OscConfig+0x470>)
 800657c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006580:	6413      	str	r3, [r2, #64]	; 0x40
 8006582:	4b7a      	ldr	r3, [pc, #488]	; (800676c <HAL_RCC_OscConfig+0x470>)
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658a:	60bb      	str	r3, [r7, #8]
 800658c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800658e:	2301      	movs	r3, #1
 8006590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006592:	4b77      	ldr	r3, [pc, #476]	; (8006770 <HAL_RCC_OscConfig+0x474>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659a:	2b00      	cmp	r3, #0
 800659c:	d118      	bne.n	80065d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800659e:	4b74      	ldr	r3, [pc, #464]	; (8006770 <HAL_RCC_OscConfig+0x474>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a73      	ldr	r2, [pc, #460]	; (8006770 <HAL_RCC_OscConfig+0x474>)
 80065a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065aa:	f7fd ff45 	bl	8004438 <HAL_GetTick>
 80065ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b2:	f7fd ff41 	bl	8004438 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e10c      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c4:	4b6a      	ldr	r3, [pc, #424]	; (8006770 <HAL_RCC_OscConfig+0x474>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0f0      	beq.n	80065b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d106      	bne.n	80065e6 <HAL_RCC_OscConfig+0x2ea>
 80065d8:	4b64      	ldr	r3, [pc, #400]	; (800676c <HAL_RCC_OscConfig+0x470>)
 80065da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065dc:	4a63      	ldr	r2, [pc, #396]	; (800676c <HAL_RCC_OscConfig+0x470>)
 80065de:	f043 0301 	orr.w	r3, r3, #1
 80065e2:	6713      	str	r3, [r2, #112]	; 0x70
 80065e4:	e01c      	b.n	8006620 <HAL_RCC_OscConfig+0x324>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	2b05      	cmp	r3, #5
 80065ec:	d10c      	bne.n	8006608 <HAL_RCC_OscConfig+0x30c>
 80065ee:	4b5f      	ldr	r3, [pc, #380]	; (800676c <HAL_RCC_OscConfig+0x470>)
 80065f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f2:	4a5e      	ldr	r2, [pc, #376]	; (800676c <HAL_RCC_OscConfig+0x470>)
 80065f4:	f043 0304 	orr.w	r3, r3, #4
 80065f8:	6713      	str	r3, [r2, #112]	; 0x70
 80065fa:	4b5c      	ldr	r3, [pc, #368]	; (800676c <HAL_RCC_OscConfig+0x470>)
 80065fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fe:	4a5b      	ldr	r2, [pc, #364]	; (800676c <HAL_RCC_OscConfig+0x470>)
 8006600:	f043 0301 	orr.w	r3, r3, #1
 8006604:	6713      	str	r3, [r2, #112]	; 0x70
 8006606:	e00b      	b.n	8006620 <HAL_RCC_OscConfig+0x324>
 8006608:	4b58      	ldr	r3, [pc, #352]	; (800676c <HAL_RCC_OscConfig+0x470>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	4a57      	ldr	r2, [pc, #348]	; (800676c <HAL_RCC_OscConfig+0x470>)
 800660e:	f023 0301 	bic.w	r3, r3, #1
 8006612:	6713      	str	r3, [r2, #112]	; 0x70
 8006614:	4b55      	ldr	r3, [pc, #340]	; (800676c <HAL_RCC_OscConfig+0x470>)
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	4a54      	ldr	r2, [pc, #336]	; (800676c <HAL_RCC_OscConfig+0x470>)
 800661a:	f023 0304 	bic.w	r3, r3, #4
 800661e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d015      	beq.n	8006654 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006628:	f7fd ff06 	bl	8004438 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800662e:	e00a      	b.n	8006646 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006630:	f7fd ff02 	bl	8004438 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	f241 3288 	movw	r2, #5000	; 0x1388
 800663e:	4293      	cmp	r3, r2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e0cb      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006646:	4b49      	ldr	r3, [pc, #292]	; (800676c <HAL_RCC_OscConfig+0x470>)
 8006648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0ee      	beq.n	8006630 <HAL_RCC_OscConfig+0x334>
 8006652:	e014      	b.n	800667e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006654:	f7fd fef0 	bl	8004438 <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800665a:	e00a      	b.n	8006672 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800665c:	f7fd feec 	bl	8004438 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	f241 3288 	movw	r2, #5000	; 0x1388
 800666a:	4293      	cmp	r3, r2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e0b5      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006672:	4b3e      	ldr	r3, [pc, #248]	; (800676c <HAL_RCC_OscConfig+0x470>)
 8006674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1ee      	bne.n	800665c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d105      	bne.n	8006690 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006684:	4b39      	ldr	r3, [pc, #228]	; (800676c <HAL_RCC_OscConfig+0x470>)
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	4a38      	ldr	r2, [pc, #224]	; (800676c <HAL_RCC_OscConfig+0x470>)
 800668a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800668e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 80a1 	beq.w	80067dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800669a:	4b34      	ldr	r3, [pc, #208]	; (800676c <HAL_RCC_OscConfig+0x470>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 030c 	and.w	r3, r3, #12
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	d05c      	beq.n	8006760 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d141      	bne.n	8006732 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ae:	4b31      	ldr	r3, [pc, #196]	; (8006774 <HAL_RCC_OscConfig+0x478>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b4:	f7fd fec0 	bl	8004438 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066bc:	f7fd febc 	bl	8004438 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e087      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ce:	4b27      	ldr	r3, [pc, #156]	; (800676c <HAL_RCC_OscConfig+0x470>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f0      	bne.n	80066bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	69da      	ldr	r2, [r3, #28]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	019b      	lsls	r3, r3, #6
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	085b      	lsrs	r3, r3, #1
 80066f2:	3b01      	subs	r3, #1
 80066f4:	041b      	lsls	r3, r3, #16
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	061b      	lsls	r3, r3, #24
 80066fe:	491b      	ldr	r1, [pc, #108]	; (800676c <HAL_RCC_OscConfig+0x470>)
 8006700:	4313      	orrs	r3, r2
 8006702:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006704:	4b1b      	ldr	r3, [pc, #108]	; (8006774 <HAL_RCC_OscConfig+0x478>)
 8006706:	2201      	movs	r2, #1
 8006708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800670a:	f7fd fe95 	bl	8004438 <HAL_GetTick>
 800670e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006710:	e008      	b.n	8006724 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006712:	f7fd fe91 	bl	8004438 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e05c      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006724:	4b11      	ldr	r3, [pc, #68]	; (800676c <HAL_RCC_OscConfig+0x470>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0f0      	beq.n	8006712 <HAL_RCC_OscConfig+0x416>
 8006730:	e054      	b.n	80067dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006732:	4b10      	ldr	r3, [pc, #64]	; (8006774 <HAL_RCC_OscConfig+0x478>)
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006738:	f7fd fe7e 	bl	8004438 <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006740:	f7fd fe7a 	bl	8004438 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e045      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006752:	4b06      	ldr	r3, [pc, #24]	; (800676c <HAL_RCC_OscConfig+0x470>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1f0      	bne.n	8006740 <HAL_RCC_OscConfig+0x444>
 800675e:	e03d      	b.n	80067dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d107      	bne.n	8006778 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e038      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
 800676c:	40023800 	.word	0x40023800
 8006770:	40007000 	.word	0x40007000
 8006774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006778:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <HAL_RCC_OscConfig+0x4ec>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d028      	beq.n	80067d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006790:	429a      	cmp	r2, r3
 8006792:	d121      	bne.n	80067d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800679e:	429a      	cmp	r2, r3
 80067a0:	d11a      	bne.n	80067d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067a8:	4013      	ands	r3, r2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d111      	bne.n	80067d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	3b01      	subs	r3, #1
 80067c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d107      	bne.n	80067d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d001      	beq.n	80067dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e000      	b.n	80067de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	40023800 	.word	0x40023800

080067ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e0cc      	b.n	800699a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006800:	4b68      	ldr	r3, [pc, #416]	; (80069a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d90c      	bls.n	8006828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800680e:	4b65      	ldr	r3, [pc, #404]	; (80069a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006816:	4b63      	ldr	r3, [pc, #396]	; (80069a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d001      	beq.n	8006828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e0b8      	b.n	800699a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d020      	beq.n	8006876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b00      	cmp	r3, #0
 800683e:	d005      	beq.n	800684c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006840:	4b59      	ldr	r3, [pc, #356]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	4a58      	ldr	r2, [pc, #352]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800684a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0308 	and.w	r3, r3, #8
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006858:	4b53      	ldr	r3, [pc, #332]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	4a52      	ldr	r2, [pc, #328]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006864:	4b50      	ldr	r3, [pc, #320]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	494d      	ldr	r1, [pc, #308]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006872:	4313      	orrs	r3, r2
 8006874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d044      	beq.n	800690c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d107      	bne.n	800689a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800688a:	4b47      	ldr	r3, [pc, #284]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d119      	bne.n	80068ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e07f      	b.n	800699a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d003      	beq.n	80068aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d107      	bne.n	80068ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068aa:	4b3f      	ldr	r3, [pc, #252]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d109      	bne.n	80068ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e06f      	b.n	800699a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ba:	4b3b      	ldr	r3, [pc, #236]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e067      	b.n	800699a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068ca:	4b37      	ldr	r3, [pc, #220]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f023 0203 	bic.w	r2, r3, #3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	4934      	ldr	r1, [pc, #208]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068dc:	f7fd fdac 	bl	8004438 <HAL_GetTick>
 80068e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068e2:	e00a      	b.n	80068fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068e4:	f7fd fda8 	bl	8004438 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e04f      	b.n	800699a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068fa:	4b2b      	ldr	r3, [pc, #172]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 020c 	and.w	r2, r3, #12
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	429a      	cmp	r2, r3
 800690a:	d1eb      	bne.n	80068e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800690c:	4b25      	ldr	r3, [pc, #148]	; (80069a4 <HAL_RCC_ClockConfig+0x1b8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d20c      	bcs.n	8006934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800691a:	4b22      	ldr	r3, [pc, #136]	; (80069a4 <HAL_RCC_ClockConfig+0x1b8>)
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006922:	4b20      	ldr	r3, [pc, #128]	; (80069a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	429a      	cmp	r2, r3
 800692e:	d001      	beq.n	8006934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e032      	b.n	800699a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d008      	beq.n	8006952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006940:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	4916      	ldr	r1, [pc, #88]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 800694e:	4313      	orrs	r3, r2
 8006950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d009      	beq.n	8006972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800695e:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	490e      	ldr	r1, [pc, #56]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 800696e:	4313      	orrs	r3, r2
 8006970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006972:	f000 f821 	bl	80069b8 <HAL_RCC_GetSysClockFreq>
 8006976:	4602      	mov	r2, r0
 8006978:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	091b      	lsrs	r3, r3, #4
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	490a      	ldr	r1, [pc, #40]	; (80069ac <HAL_RCC_ClockConfig+0x1c0>)
 8006984:	5ccb      	ldrb	r3, [r1, r3]
 8006986:	fa22 f303 	lsr.w	r3, r2, r3
 800698a:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <HAL_RCC_ClockConfig+0x1c4>)
 800698c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800698e:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f7fd fd0c 	bl	80043b0 <HAL_InitTick>

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	40023c00 	.word	0x40023c00
 80069a8:	40023800 	.word	0x40023800
 80069ac:	0800dcb8 	.word	0x0800dcb8
 80069b0:	20000008 	.word	0x20000008
 80069b4:	2000000c 	.word	0x2000000c

080069b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069bc:	b090      	sub	sp, #64	; 0x40
 80069be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	637b      	str	r3, [r7, #52]	; 0x34
 80069c4:	2300      	movs	r3, #0
 80069c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c8:	2300      	movs	r3, #0
 80069ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069d0:	4b59      	ldr	r3, [pc, #356]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x180>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f003 030c 	and.w	r3, r3, #12
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d00d      	beq.n	80069f8 <HAL_RCC_GetSysClockFreq+0x40>
 80069dc:	2b08      	cmp	r3, #8
 80069de:	f200 80a1 	bhi.w	8006b24 <HAL_RCC_GetSysClockFreq+0x16c>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <HAL_RCC_GetSysClockFreq+0x34>
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d003      	beq.n	80069f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80069ea:	e09b      	b.n	8006b24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069ec:	4b53      	ldr	r3, [pc, #332]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x184>)
 80069ee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80069f0:	e09b      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069f2:	4b53      	ldr	r3, [pc, #332]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x188>)
 80069f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069f6:	e098      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069f8:	4b4f      	ldr	r3, [pc, #316]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x180>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a00:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a02:	4b4d      	ldr	r3, [pc, #308]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d028      	beq.n	8006a60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a0e:	4b4a      	ldr	r3, [pc, #296]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	099b      	lsrs	r3, r3, #6
 8006a14:	2200      	movs	r2, #0
 8006a16:	623b      	str	r3, [r7, #32]
 8006a18:	627a      	str	r2, [r7, #36]	; 0x24
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006a20:	2100      	movs	r1, #0
 8006a22:	4b47      	ldr	r3, [pc, #284]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a24:	fb03 f201 	mul.w	r2, r3, r1
 8006a28:	2300      	movs	r3, #0
 8006a2a:	fb00 f303 	mul.w	r3, r0, r3
 8006a2e:	4413      	add	r3, r2
 8006a30:	4a43      	ldr	r2, [pc, #268]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a32:	fba0 1202 	umull	r1, r2, r0, r2
 8006a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a38:	460a      	mov	r2, r1
 8006a3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8006a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3e:	4413      	add	r3, r2
 8006a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a44:	2200      	movs	r2, #0
 8006a46:	61bb      	str	r3, [r7, #24]
 8006a48:	61fa      	str	r2, [r7, #28]
 8006a4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006a52:	f7fa f911 	bl	8000c78 <__aeabi_uldivmod>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a5e:	e053      	b.n	8006b08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a60:	4b35      	ldr	r3, [pc, #212]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	099b      	lsrs	r3, r3, #6
 8006a66:	2200      	movs	r2, #0
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	617a      	str	r2, [r7, #20]
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006a72:	f04f 0b00 	mov.w	fp, #0
 8006a76:	4652      	mov	r2, sl
 8006a78:	465b      	mov	r3, fp
 8006a7a:	f04f 0000 	mov.w	r0, #0
 8006a7e:	f04f 0100 	mov.w	r1, #0
 8006a82:	0159      	lsls	r1, r3, #5
 8006a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a88:	0150      	lsls	r0, r2, #5
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	ebb2 080a 	subs.w	r8, r2, sl
 8006a92:	eb63 090b 	sbc.w	r9, r3, fp
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006aa2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006aa6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006aaa:	ebb2 0408 	subs.w	r4, r2, r8
 8006aae:	eb63 0509 	sbc.w	r5, r3, r9
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	00eb      	lsls	r3, r5, #3
 8006abc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ac0:	00e2      	lsls	r2, r4, #3
 8006ac2:	4614      	mov	r4, r2
 8006ac4:	461d      	mov	r5, r3
 8006ac6:	eb14 030a 	adds.w	r3, r4, sl
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	eb45 030b 	adc.w	r3, r5, fp
 8006ad0:	607b      	str	r3, [r7, #4]
 8006ad2:	f04f 0200 	mov.w	r2, #0
 8006ad6:	f04f 0300 	mov.w	r3, #0
 8006ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ade:	4629      	mov	r1, r5
 8006ae0:	028b      	lsls	r3, r1, #10
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ae8:	4621      	mov	r1, r4
 8006aea:	028a      	lsls	r2, r1, #10
 8006aec:	4610      	mov	r0, r2
 8006aee:	4619      	mov	r1, r3
 8006af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af2:	2200      	movs	r2, #0
 8006af4:	60bb      	str	r3, [r7, #8]
 8006af6:	60fa      	str	r2, [r7, #12]
 8006af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006afc:	f7fa f8bc 	bl	8000c78 <__aeabi_uldivmod>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4613      	mov	r3, r2
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b08:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	0c1b      	lsrs	r3, r3, #16
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	3301      	adds	r3, #1
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006b18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b22:	e002      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b24:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x184>)
 8006b26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3740      	adds	r7, #64	; 0x40
 8006b30:	46bd      	mov	sp, r7
 8006b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b36:	bf00      	nop
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	00f42400 	.word	0x00f42400
 8006b40:	017d7840 	.word	0x017d7840

08006b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b48:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	20000008 	.word	0x20000008

08006b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b60:	f7ff fff0 	bl	8006b44 <HAL_RCC_GetHCLKFreq>
 8006b64:	4602      	mov	r2, r0
 8006b66:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	0a9b      	lsrs	r3, r3, #10
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	4903      	ldr	r1, [pc, #12]	; (8006b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b72:	5ccb      	ldrb	r3, [r1, r3]
 8006b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	0800dcc8 	.word	0x0800dcc8

08006b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b88:	f7ff ffdc 	bl	8006b44 <HAL_RCC_GetHCLKFreq>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	0b5b      	lsrs	r3, r3, #13
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	4903      	ldr	r1, [pc, #12]	; (8006ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b9a:	5ccb      	ldrb	r3, [r1, r3]
 8006b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	0800dcc8 	.word	0x0800dcc8

08006bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e041      	b.n	8006c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fc fee0 	bl	8003998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3304      	adds	r3, #4
 8006be8:	4619      	mov	r1, r3
 8006bea:	4610      	mov	r0, r2
 8006bec:	f000 ff94 	bl	8007b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e041      	b.n	8006ce0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d106      	bne.n	8006c76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f839 	bl	8006ce8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	3304      	adds	r3, #4
 8006c86:	4619      	mov	r1, r3
 8006c88:	4610      	mov	r0, r2
 8006c8a:	f000 ff45 	bl	8007b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d109      	bne.n	8006d20 <HAL_TIM_PWM_Start+0x24>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	bf14      	ite	ne
 8006d18:	2301      	movne	r3, #1
 8006d1a:	2300      	moveq	r3, #0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	e022      	b.n	8006d66 <HAL_TIM_PWM_Start+0x6a>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d109      	bne.n	8006d3a <HAL_TIM_PWM_Start+0x3e>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	bf14      	ite	ne
 8006d32:	2301      	movne	r3, #1
 8006d34:	2300      	moveq	r3, #0
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	e015      	b.n	8006d66 <HAL_TIM_PWM_Start+0x6a>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d109      	bne.n	8006d54 <HAL_TIM_PWM_Start+0x58>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	bf14      	ite	ne
 8006d4c:	2301      	movne	r3, #1
 8006d4e:	2300      	moveq	r3, #0
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	e008      	b.n	8006d66 <HAL_TIM_PWM_Start+0x6a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	bf14      	ite	ne
 8006d60:	2301      	movne	r3, #1
 8006d62:	2300      	moveq	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e07c      	b.n	8006e68 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <HAL_TIM_PWM_Start+0x82>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d7c:	e013      	b.n	8006da6 <HAL_TIM_PWM_Start+0xaa>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d104      	bne.n	8006d8e <HAL_TIM_PWM_Start+0x92>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d8c:	e00b      	b.n	8006da6 <HAL_TIM_PWM_Start+0xaa>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d104      	bne.n	8006d9e <HAL_TIM_PWM_Start+0xa2>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d9c:	e003      	b.n	8006da6 <HAL_TIM_PWM_Start+0xaa>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2202      	movs	r2, #2
 8006da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2201      	movs	r2, #1
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f001 fac6 	bl	8008340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a2d      	ldr	r2, [pc, #180]	; (8006e70 <HAL_TIM_PWM_Start+0x174>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d004      	beq.n	8006dc8 <HAL_TIM_PWM_Start+0xcc>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a2c      	ldr	r2, [pc, #176]	; (8006e74 <HAL_TIM_PWM_Start+0x178>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d101      	bne.n	8006dcc <HAL_TIM_PWM_Start+0xd0>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e000      	b.n	8006dce <HAL_TIM_PWM_Start+0xd2>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d007      	beq.n	8006de2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006de0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a22      	ldr	r2, [pc, #136]	; (8006e70 <HAL_TIM_PWM_Start+0x174>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d022      	beq.n	8006e32 <HAL_TIM_PWM_Start+0x136>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df4:	d01d      	beq.n	8006e32 <HAL_TIM_PWM_Start+0x136>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1f      	ldr	r2, [pc, #124]	; (8006e78 <HAL_TIM_PWM_Start+0x17c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d018      	beq.n	8006e32 <HAL_TIM_PWM_Start+0x136>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a1d      	ldr	r2, [pc, #116]	; (8006e7c <HAL_TIM_PWM_Start+0x180>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d013      	beq.n	8006e32 <HAL_TIM_PWM_Start+0x136>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1c      	ldr	r2, [pc, #112]	; (8006e80 <HAL_TIM_PWM_Start+0x184>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00e      	beq.n	8006e32 <HAL_TIM_PWM_Start+0x136>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a16      	ldr	r2, [pc, #88]	; (8006e74 <HAL_TIM_PWM_Start+0x178>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d009      	beq.n	8006e32 <HAL_TIM_PWM_Start+0x136>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a18      	ldr	r2, [pc, #96]	; (8006e84 <HAL_TIM_PWM_Start+0x188>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d004      	beq.n	8006e32 <HAL_TIM_PWM_Start+0x136>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a16      	ldr	r2, [pc, #88]	; (8006e88 <HAL_TIM_PWM_Start+0x18c>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d111      	bne.n	8006e56 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b06      	cmp	r3, #6
 8006e42:	d010      	beq.n	8006e66 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0201 	orr.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e54:	e007      	b.n	8006e66 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0201 	orr.w	r2, r2, #1
 8006e64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40010000 	.word	0x40010000
 8006e74:	40010400 	.word	0x40010400
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40000c00 	.word	0x40000c00
 8006e84:	40014000 	.word	0x40014000
 8006e88:	40001800 	.word	0x40001800

08006e8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e041      	b.n	8006f22 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fc fe80 	bl	8003bb8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f000 fe24 	bl	8007b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
	...

08006f2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d104      	bne.n	8006f4a <HAL_TIM_IC_Start_IT+0x1e>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	e013      	b.n	8006f72 <HAL_TIM_IC_Start_IT+0x46>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d104      	bne.n	8006f5a <HAL_TIM_IC_Start_IT+0x2e>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	e00b      	b.n	8006f72 <HAL_TIM_IC_Start_IT+0x46>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d104      	bne.n	8006f6a <HAL_TIM_IC_Start_IT+0x3e>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	e003      	b.n	8006f72 <HAL_TIM_IC_Start_IT+0x46>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d104      	bne.n	8006f84 <HAL_TIM_IC_Start_IT+0x58>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	e013      	b.n	8006fac <HAL_TIM_IC_Start_IT+0x80>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b04      	cmp	r3, #4
 8006f88:	d104      	bne.n	8006f94 <HAL_TIM_IC_Start_IT+0x68>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	e00b      	b.n	8006fac <HAL_TIM_IC_Start_IT+0x80>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b08      	cmp	r3, #8
 8006f98:	d104      	bne.n	8006fa4 <HAL_TIM_IC_Start_IT+0x78>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	e003      	b.n	8006fac <HAL_TIM_IC_Start_IT+0x80>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fae:	7bbb      	ldrb	r3, [r7, #14]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d102      	bne.n	8006fba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fb4:	7b7b      	ldrb	r3, [r7, #13]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d001      	beq.n	8006fbe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e0cc      	b.n	8007158 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d104      	bne.n	8006fce <HAL_TIM_IC_Start_IT+0xa2>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fcc:	e013      	b.n	8006ff6 <HAL_TIM_IC_Start_IT+0xca>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b04      	cmp	r3, #4
 8006fd2:	d104      	bne.n	8006fde <HAL_TIM_IC_Start_IT+0xb2>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fdc:	e00b      	b.n	8006ff6 <HAL_TIM_IC_Start_IT+0xca>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	d104      	bne.n	8006fee <HAL_TIM_IC_Start_IT+0xc2>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fec:	e003      	b.n	8006ff6 <HAL_TIM_IC_Start_IT+0xca>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d104      	bne.n	8007006 <HAL_TIM_IC_Start_IT+0xda>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007004:	e013      	b.n	800702e <HAL_TIM_IC_Start_IT+0x102>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b04      	cmp	r3, #4
 800700a:	d104      	bne.n	8007016 <HAL_TIM_IC_Start_IT+0xea>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007014:	e00b      	b.n	800702e <HAL_TIM_IC_Start_IT+0x102>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b08      	cmp	r3, #8
 800701a:	d104      	bne.n	8007026 <HAL_TIM_IC_Start_IT+0xfa>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007024:	e003      	b.n	800702e <HAL_TIM_IC_Start_IT+0x102>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b0c      	cmp	r3, #12
 8007032:	d841      	bhi.n	80070b8 <HAL_TIM_IC_Start_IT+0x18c>
 8007034:	a201      	add	r2, pc, #4	; (adr r2, 800703c <HAL_TIM_IC_Start_IT+0x110>)
 8007036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703a:	bf00      	nop
 800703c:	08007071 	.word	0x08007071
 8007040:	080070b9 	.word	0x080070b9
 8007044:	080070b9 	.word	0x080070b9
 8007048:	080070b9 	.word	0x080070b9
 800704c:	08007083 	.word	0x08007083
 8007050:	080070b9 	.word	0x080070b9
 8007054:	080070b9 	.word	0x080070b9
 8007058:	080070b9 	.word	0x080070b9
 800705c:	08007095 	.word	0x08007095
 8007060:	080070b9 	.word	0x080070b9
 8007064:	080070b9 	.word	0x080070b9
 8007068:	080070b9 	.word	0x080070b9
 800706c:	080070a7 	.word	0x080070a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0202 	orr.w	r2, r2, #2
 800707e:	60da      	str	r2, [r3, #12]
      break;
 8007080:	e01d      	b.n	80070be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0204 	orr.w	r2, r2, #4
 8007090:	60da      	str	r2, [r3, #12]
      break;
 8007092:	e014      	b.n	80070be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0208 	orr.w	r2, r2, #8
 80070a2:	60da      	str	r2, [r3, #12]
      break;
 80070a4:	e00b      	b.n	80070be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0210 	orr.w	r2, r2, #16
 80070b4:	60da      	str	r2, [r3, #12]
      break;
 80070b6:	e002      	b.n	80070be <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]
      break;
 80070bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d148      	bne.n	8007156 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2201      	movs	r2, #1
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f001 f937 	bl	8008340 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a22      	ldr	r2, [pc, #136]	; (8007160 <HAL_TIM_IC_Start_IT+0x234>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d022      	beq.n	8007122 <HAL_TIM_IC_Start_IT+0x1f6>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e4:	d01d      	beq.n	8007122 <HAL_TIM_IC_Start_IT+0x1f6>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a1e      	ldr	r2, [pc, #120]	; (8007164 <HAL_TIM_IC_Start_IT+0x238>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d018      	beq.n	8007122 <HAL_TIM_IC_Start_IT+0x1f6>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a1c      	ldr	r2, [pc, #112]	; (8007168 <HAL_TIM_IC_Start_IT+0x23c>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d013      	beq.n	8007122 <HAL_TIM_IC_Start_IT+0x1f6>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a1b      	ldr	r2, [pc, #108]	; (800716c <HAL_TIM_IC_Start_IT+0x240>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d00e      	beq.n	8007122 <HAL_TIM_IC_Start_IT+0x1f6>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a19      	ldr	r2, [pc, #100]	; (8007170 <HAL_TIM_IC_Start_IT+0x244>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d009      	beq.n	8007122 <HAL_TIM_IC_Start_IT+0x1f6>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a18      	ldr	r2, [pc, #96]	; (8007174 <HAL_TIM_IC_Start_IT+0x248>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d004      	beq.n	8007122 <HAL_TIM_IC_Start_IT+0x1f6>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a16      	ldr	r2, [pc, #88]	; (8007178 <HAL_TIM_IC_Start_IT+0x24c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d111      	bne.n	8007146 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b06      	cmp	r3, #6
 8007132:	d010      	beq.n	8007156 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f042 0201 	orr.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007144:	e007      	b.n	8007156 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0201 	orr.w	r2, r2, #1
 8007154:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40010000 	.word	0x40010000
 8007164:	40000400 	.word	0x40000400
 8007168:	40000800 	.word	0x40000800
 800716c:	40000c00 	.word	0x40000c00
 8007170:	40010400 	.word	0x40010400
 8007174:	40014000 	.word	0x40014000
 8007178:	40001800 	.word	0x40001800

0800717c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e097      	b.n	80072c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d106      	bne.n	80071aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7fc fc6d 	bl	8003a84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2202      	movs	r2, #2
 80071ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	6812      	ldr	r2, [r2, #0]
 80071bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071c0:	f023 0307 	bic.w	r3, r3, #7
 80071c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3304      	adds	r3, #4
 80071ce:	4619      	mov	r1, r3
 80071d0:	4610      	mov	r0, r2
 80071d2:	f000 fca1 	bl	8007b18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071fe:	f023 0303 	bic.w	r3, r3, #3
 8007202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	021b      	lsls	r3, r3, #8
 800720e:	4313      	orrs	r3, r2
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800721c:	f023 030c 	bic.w	r3, r3, #12
 8007220:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007228:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800722c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	4313      	orrs	r3, r2
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	4313      	orrs	r3, r2
 800723e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	011a      	lsls	r2, r3, #4
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	031b      	lsls	r3, r3, #12
 800724c:	4313      	orrs	r3, r2
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	4313      	orrs	r3, r2
 8007252:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800725a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007262:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	011b      	lsls	r3, r3, #4
 800726e:	4313      	orrs	r3, r2
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d110      	bne.n	800731a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d102      	bne.n	8007304 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80072fe:	7b7b      	ldrb	r3, [r7, #13]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d001      	beq.n	8007308 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e069      	b.n	80073dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007318:	e031      	b.n	800737e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b04      	cmp	r3, #4
 800731e:	d110      	bne.n	8007342 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d102      	bne.n	800732c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007326:	7b3b      	ldrb	r3, [r7, #12]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d001      	beq.n	8007330 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e055      	b.n	80073dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007340:	e01d      	b.n	800737e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d108      	bne.n	800735a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d105      	bne.n	800735a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800734e:	7b7b      	ldrb	r3, [r7, #13]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d102      	bne.n	800735a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007354:	7b3b      	ldrb	r3, [r7, #12]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d001      	beq.n	800735e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e03e      	b.n	80073dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2202      	movs	r2, #2
 8007362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2202      	movs	r2, #2
 800736a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2202      	movs	r2, #2
 8007372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2202      	movs	r2, #2
 800737a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_TIM_Encoder_Start+0xc4>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b04      	cmp	r3, #4
 8007388:	d008      	beq.n	800739c <HAL_TIM_Encoder_Start+0xd4>
 800738a:	e00f      	b.n	80073ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2201      	movs	r2, #1
 8007392:	2100      	movs	r1, #0
 8007394:	4618      	mov	r0, r3
 8007396:	f000 ffd3 	bl	8008340 <TIM_CCxChannelCmd>
      break;
 800739a:	e016      	b.n	80073ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2201      	movs	r2, #1
 80073a2:	2104      	movs	r1, #4
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 ffcb 	bl	8008340 <TIM_CCxChannelCmd>
      break;
 80073aa:	e00e      	b.n	80073ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2201      	movs	r2, #1
 80073b2:	2100      	movs	r1, #0
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 ffc3 	bl	8008340 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2201      	movs	r2, #1
 80073c0:	2104      	movs	r1, #4
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 ffbc 	bl	8008340 <TIM_CCxChannelCmd>
      break;
 80073c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0201 	orr.w	r2, r2, #1
 80073d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d122      	bne.n	8007440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b02      	cmp	r3, #2
 8007406:	d11b      	bne.n	8007440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f06f 0202 	mvn.w	r2, #2
 8007410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fa faf2 	bl	8001a10 <HAL_TIM_IC_CaptureCallback>
 800742c:	e005      	b.n	800743a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fb54 	bl	8007adc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fb5b 	bl	8007af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f003 0304 	and.w	r3, r3, #4
 800744a:	2b04      	cmp	r3, #4
 800744c:	d122      	bne.n	8007494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b04      	cmp	r3, #4
 800745a:	d11b      	bne.n	8007494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f06f 0204 	mvn.w	r2, #4
 8007464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2202      	movs	r2, #2
 800746a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7fa fac8 	bl	8001a10 <HAL_TIM_IC_CaptureCallback>
 8007480:	e005      	b.n	800748e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fb2a 	bl	8007adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fb31 	bl	8007af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f003 0308 	and.w	r3, r3, #8
 800749e:	2b08      	cmp	r3, #8
 80074a0:	d122      	bne.n	80074e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 0308 	and.w	r3, r3, #8
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d11b      	bne.n	80074e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f06f 0208 	mvn.w	r2, #8
 80074b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2204      	movs	r2, #4
 80074be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fa fa9e 	bl	8001a10 <HAL_TIM_IC_CaptureCallback>
 80074d4:	e005      	b.n	80074e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fb00 	bl	8007adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fb07 	bl	8007af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f003 0310 	and.w	r3, r3, #16
 80074f2:	2b10      	cmp	r3, #16
 80074f4:	d122      	bne.n	800753c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f003 0310 	and.w	r3, r3, #16
 8007500:	2b10      	cmp	r3, #16
 8007502:	d11b      	bne.n	800753c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0210 	mvn.w	r2, #16
 800750c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2208      	movs	r2, #8
 8007512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fa fa74 	bl	8001a10 <HAL_TIM_IC_CaptureCallback>
 8007528:	e005      	b.n	8007536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fad6 	bl	8007adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fadd 	bl	8007af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b01      	cmp	r3, #1
 8007548:	d10e      	bne.n	8007568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b01      	cmp	r3, #1
 8007556:	d107      	bne.n	8007568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f06f 0201 	mvn.w	r2, #1
 8007560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fab0 	bl	8007ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007572:	2b80      	cmp	r3, #128	; 0x80
 8007574:	d10e      	bne.n	8007594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007580:	2b80      	cmp	r3, #128	; 0x80
 8007582:	d107      	bne.n	8007594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800758c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 ffd4 	bl	800853c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759e:	2b40      	cmp	r3, #64	; 0x40
 80075a0:	d10e      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d107      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 faa2 	bl	8007b04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	f003 0320 	and.w	r3, r3, #32
 80075ca:	2b20      	cmp	r3, #32
 80075cc:	d10e      	bne.n	80075ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f003 0320 	and.w	r3, r3, #32
 80075d8:	2b20      	cmp	r3, #32
 80075da:	d107      	bne.n	80075ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f06f 0220 	mvn.w	r2, #32
 80075e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 ff9e 	bl	8008528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800760a:	2b01      	cmp	r3, #1
 800760c:	d101      	bne.n	8007612 <HAL_TIM_IC_ConfigChannel+0x1e>
 800760e:	2302      	movs	r3, #2
 8007610:	e088      	b.n	8007724 <HAL_TIM_IC_ConfigChannel+0x130>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d11b      	bne.n	8007658 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6818      	ldr	r0, [r3, #0]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	6819      	ldr	r1, [r3, #0]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f000 fcc2 	bl	8007fb8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	699a      	ldr	r2, [r3, #24]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 020c 	bic.w	r2, r2, #12
 8007642:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6999      	ldr	r1, [r3, #24]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	689a      	ldr	r2, [r3, #8]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	619a      	str	r2, [r3, #24]
 8007656:	e060      	b.n	800771a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b04      	cmp	r3, #4
 800765c:	d11c      	bne.n	8007698 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6818      	ldr	r0, [r3, #0]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	6819      	ldr	r1, [r3, #0]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f000 fd46 	bl	80080fe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	699a      	ldr	r2, [r3, #24]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007680:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6999      	ldr	r1, [r3, #24]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	021a      	lsls	r2, r3, #8
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	619a      	str	r2, [r3, #24]
 8007696:	e040      	b.n	800771a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b08      	cmp	r3, #8
 800769c:	d11b      	bne.n	80076d6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6818      	ldr	r0, [r3, #0]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6819      	ldr	r1, [r3, #0]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f000 fd93 	bl	80081d8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	69da      	ldr	r2, [r3, #28]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 020c 	bic.w	r2, r2, #12
 80076c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	69d9      	ldr	r1, [r3, #28]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	61da      	str	r2, [r3, #28]
 80076d4:	e021      	b.n	800771a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b0c      	cmp	r3, #12
 80076da:	d11c      	bne.n	8007716 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6818      	ldr	r0, [r3, #0]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	6819      	ldr	r1, [r3, #0]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f000 fdb0 	bl	8008250 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69da      	ldr	r2, [r3, #28]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80076fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	69d9      	ldr	r1, [r3, #28]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	021a      	lsls	r2, r3, #8
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	430a      	orrs	r2, r1
 8007712:	61da      	str	r2, [r3, #28]
 8007714:	e001      	b.n	800771a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007722:	7dfb      	ldrb	r3, [r7, #23]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007746:	2302      	movs	r3, #2
 8007748:	e0ae      	b.n	80078a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b0c      	cmp	r3, #12
 8007756:	f200 809f 	bhi.w	8007898 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800775a:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800775c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007760:	08007795 	.word	0x08007795
 8007764:	08007899 	.word	0x08007899
 8007768:	08007899 	.word	0x08007899
 800776c:	08007899 	.word	0x08007899
 8007770:	080077d5 	.word	0x080077d5
 8007774:	08007899 	.word	0x08007899
 8007778:	08007899 	.word	0x08007899
 800777c:	08007899 	.word	0x08007899
 8007780:	08007817 	.word	0x08007817
 8007784:	08007899 	.word	0x08007899
 8007788:	08007899 	.word	0x08007899
 800778c:	08007899 	.word	0x08007899
 8007790:	08007857 	.word	0x08007857
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68b9      	ldr	r1, [r7, #8]
 800779a:	4618      	mov	r0, r3
 800779c:	f000 fa5c 	bl	8007c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0208 	orr.w	r2, r2, #8
 80077ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699a      	ldr	r2, [r3, #24]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 0204 	bic.w	r2, r2, #4
 80077be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6999      	ldr	r1, [r3, #24]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	691a      	ldr	r2, [r3, #16]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	619a      	str	r2, [r3, #24]
      break;
 80077d2:	e064      	b.n	800789e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68b9      	ldr	r1, [r7, #8]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 faac 	bl	8007d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699a      	ldr	r2, [r3, #24]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699a      	ldr	r2, [r3, #24]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6999      	ldr	r1, [r3, #24]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	021a      	lsls	r2, r3, #8
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	430a      	orrs	r2, r1
 8007812:	619a      	str	r2, [r3, #24]
      break;
 8007814:	e043      	b.n	800789e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68b9      	ldr	r1, [r7, #8]
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fb01 	bl	8007e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	69da      	ldr	r2, [r3, #28]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0208 	orr.w	r2, r2, #8
 8007830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69da      	ldr	r2, [r3, #28]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 0204 	bic.w	r2, r2, #4
 8007840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69d9      	ldr	r1, [r3, #28]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	691a      	ldr	r2, [r3, #16]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	61da      	str	r2, [r3, #28]
      break;
 8007854:	e023      	b.n	800789e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68b9      	ldr	r1, [r7, #8]
 800785c:	4618      	mov	r0, r3
 800785e:	f000 fb55 	bl	8007f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69da      	ldr	r2, [r3, #28]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	69da      	ldr	r2, [r3, #28]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	69d9      	ldr	r1, [r3, #28]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	021a      	lsls	r2, r3, #8
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	61da      	str	r2, [r3, #28]
      break;
 8007896:	e002      	b.n	800789e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	75fb      	strb	r3, [r7, #23]
      break;
 800789c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d101      	bne.n	80078cc <HAL_TIM_ConfigClockSource+0x1c>
 80078c8:	2302      	movs	r3, #2
 80078ca:	e0b4      	b.n	8007a36 <HAL_TIM_ConfigClockSource+0x186>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80078ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007904:	d03e      	beq.n	8007984 <HAL_TIM_ConfigClockSource+0xd4>
 8007906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800790a:	f200 8087 	bhi.w	8007a1c <HAL_TIM_ConfigClockSource+0x16c>
 800790e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007912:	f000 8086 	beq.w	8007a22 <HAL_TIM_ConfigClockSource+0x172>
 8007916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800791a:	d87f      	bhi.n	8007a1c <HAL_TIM_ConfigClockSource+0x16c>
 800791c:	2b70      	cmp	r3, #112	; 0x70
 800791e:	d01a      	beq.n	8007956 <HAL_TIM_ConfigClockSource+0xa6>
 8007920:	2b70      	cmp	r3, #112	; 0x70
 8007922:	d87b      	bhi.n	8007a1c <HAL_TIM_ConfigClockSource+0x16c>
 8007924:	2b60      	cmp	r3, #96	; 0x60
 8007926:	d050      	beq.n	80079ca <HAL_TIM_ConfigClockSource+0x11a>
 8007928:	2b60      	cmp	r3, #96	; 0x60
 800792a:	d877      	bhi.n	8007a1c <HAL_TIM_ConfigClockSource+0x16c>
 800792c:	2b50      	cmp	r3, #80	; 0x50
 800792e:	d03c      	beq.n	80079aa <HAL_TIM_ConfigClockSource+0xfa>
 8007930:	2b50      	cmp	r3, #80	; 0x50
 8007932:	d873      	bhi.n	8007a1c <HAL_TIM_ConfigClockSource+0x16c>
 8007934:	2b40      	cmp	r3, #64	; 0x40
 8007936:	d058      	beq.n	80079ea <HAL_TIM_ConfigClockSource+0x13a>
 8007938:	2b40      	cmp	r3, #64	; 0x40
 800793a:	d86f      	bhi.n	8007a1c <HAL_TIM_ConfigClockSource+0x16c>
 800793c:	2b30      	cmp	r3, #48	; 0x30
 800793e:	d064      	beq.n	8007a0a <HAL_TIM_ConfigClockSource+0x15a>
 8007940:	2b30      	cmp	r3, #48	; 0x30
 8007942:	d86b      	bhi.n	8007a1c <HAL_TIM_ConfigClockSource+0x16c>
 8007944:	2b20      	cmp	r3, #32
 8007946:	d060      	beq.n	8007a0a <HAL_TIM_ConfigClockSource+0x15a>
 8007948:	2b20      	cmp	r3, #32
 800794a:	d867      	bhi.n	8007a1c <HAL_TIM_ConfigClockSource+0x16c>
 800794c:	2b00      	cmp	r3, #0
 800794e:	d05c      	beq.n	8007a0a <HAL_TIM_ConfigClockSource+0x15a>
 8007950:	2b10      	cmp	r3, #16
 8007952:	d05a      	beq.n	8007a0a <HAL_TIM_ConfigClockSource+0x15a>
 8007954:	e062      	b.n	8007a1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	6899      	ldr	r1, [r3, #8]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f000 fccb 	bl	8008300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	609a      	str	r2, [r3, #8]
      break;
 8007982:	e04f      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6818      	ldr	r0, [r3, #0]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	6899      	ldr	r1, [r3, #8]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f000 fcb4 	bl	8008300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689a      	ldr	r2, [r3, #8]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079a6:	609a      	str	r2, [r3, #8]
      break;
 80079a8:	e03c      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	6859      	ldr	r1, [r3, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	461a      	mov	r2, r3
 80079b8:	f000 fb72 	bl	80080a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2150      	movs	r1, #80	; 0x50
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fc81 	bl	80082ca <TIM_ITRx_SetConfig>
      break;
 80079c8:	e02c      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	6859      	ldr	r1, [r3, #4]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	461a      	mov	r2, r3
 80079d8:	f000 fbce 	bl	8008178 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2160      	movs	r1, #96	; 0x60
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 fc71 	bl	80082ca <TIM_ITRx_SetConfig>
      break;
 80079e8:	e01c      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6818      	ldr	r0, [r3, #0]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	6859      	ldr	r1, [r3, #4]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	461a      	mov	r2, r3
 80079f8:	f000 fb52 	bl	80080a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2140      	movs	r1, #64	; 0x40
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fc61 	bl	80082ca <TIM_ITRx_SetConfig>
      break;
 8007a08:	e00c      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4619      	mov	r1, r3
 8007a14:	4610      	mov	r0, r2
 8007a16:	f000 fc58 	bl	80082ca <TIM_ITRx_SetConfig>
      break;
 8007a1a:	e003      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a20:	e000      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b0c      	cmp	r3, #12
 8007a52:	d831      	bhi.n	8007ab8 <HAL_TIM_ReadCapturedValue+0x78>
 8007a54:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a91 	.word	0x08007a91
 8007a60:	08007ab9 	.word	0x08007ab9
 8007a64:	08007ab9 	.word	0x08007ab9
 8007a68:	08007ab9 	.word	0x08007ab9
 8007a6c:	08007a9b 	.word	0x08007a9b
 8007a70:	08007ab9 	.word	0x08007ab9
 8007a74:	08007ab9 	.word	0x08007ab9
 8007a78:	08007ab9 	.word	0x08007ab9
 8007a7c:	08007aa5 	.word	0x08007aa5
 8007a80:	08007ab9 	.word	0x08007ab9
 8007a84:	08007ab9 	.word	0x08007ab9
 8007a88:	08007ab9 	.word	0x08007ab9
 8007a8c:	08007aaf 	.word	0x08007aaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a96:	60fb      	str	r3, [r7, #12]

      break;
 8007a98:	e00f      	b.n	8007aba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	60fb      	str	r3, [r7, #12]

      break;
 8007aa2:	e00a      	b.n	8007aba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aaa:	60fb      	str	r3, [r7, #12]

      break;
 8007aac:	e005      	b.n	8007aba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab4:	60fb      	str	r3, [r7, #12]

      break;
 8007ab6:	e000      	b.n	8007aba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007ab8:	bf00      	nop
  }

  return tmpreg;
 8007aba:	68fb      	ldr	r3, [r7, #12]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a40      	ldr	r2, [pc, #256]	; (8007c2c <TIM_Base_SetConfig+0x114>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d013      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b36:	d00f      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a3d      	ldr	r2, [pc, #244]	; (8007c30 <TIM_Base_SetConfig+0x118>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00b      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a3c      	ldr	r2, [pc, #240]	; (8007c34 <TIM_Base_SetConfig+0x11c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d007      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a3b      	ldr	r2, [pc, #236]	; (8007c38 <TIM_Base_SetConfig+0x120>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d003      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a3a      	ldr	r2, [pc, #232]	; (8007c3c <TIM_Base_SetConfig+0x124>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d108      	bne.n	8007b6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a2f      	ldr	r2, [pc, #188]	; (8007c2c <TIM_Base_SetConfig+0x114>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d02b      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b78:	d027      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a2c      	ldr	r2, [pc, #176]	; (8007c30 <TIM_Base_SetConfig+0x118>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d023      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a2b      	ldr	r2, [pc, #172]	; (8007c34 <TIM_Base_SetConfig+0x11c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d01f      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a2a      	ldr	r2, [pc, #168]	; (8007c38 <TIM_Base_SetConfig+0x120>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d01b      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a29      	ldr	r2, [pc, #164]	; (8007c3c <TIM_Base_SetConfig+0x124>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d017      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a28      	ldr	r2, [pc, #160]	; (8007c40 <TIM_Base_SetConfig+0x128>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d013      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a27      	ldr	r2, [pc, #156]	; (8007c44 <TIM_Base_SetConfig+0x12c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00f      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a26      	ldr	r2, [pc, #152]	; (8007c48 <TIM_Base_SetConfig+0x130>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00b      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a25      	ldr	r2, [pc, #148]	; (8007c4c <TIM_Base_SetConfig+0x134>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d007      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a24      	ldr	r2, [pc, #144]	; (8007c50 <TIM_Base_SetConfig+0x138>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d003      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a23      	ldr	r2, [pc, #140]	; (8007c54 <TIM_Base_SetConfig+0x13c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d108      	bne.n	8007bdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	689a      	ldr	r2, [r3, #8]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a0a      	ldr	r2, [pc, #40]	; (8007c2c <TIM_Base_SetConfig+0x114>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d003      	beq.n	8007c10 <TIM_Base_SetConfig+0xf8>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a0c      	ldr	r2, [pc, #48]	; (8007c3c <TIM_Base_SetConfig+0x124>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d103      	bne.n	8007c18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	691a      	ldr	r2, [r3, #16]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	615a      	str	r2, [r3, #20]
}
 8007c1e:	bf00      	nop
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	40010000 	.word	0x40010000
 8007c30:	40000400 	.word	0x40000400
 8007c34:	40000800 	.word	0x40000800
 8007c38:	40000c00 	.word	0x40000c00
 8007c3c:	40010400 	.word	0x40010400
 8007c40:	40014000 	.word	0x40014000
 8007c44:	40014400 	.word	0x40014400
 8007c48:	40014800 	.word	0x40014800
 8007c4c:	40001800 	.word	0x40001800
 8007c50:	40001c00 	.word	0x40001c00
 8007c54:	40002000 	.word	0x40002000

08007c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	f023 0201 	bic.w	r2, r3, #1
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 0303 	bic.w	r3, r3, #3
 8007c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f023 0302 	bic.w	r3, r3, #2
 8007ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a20      	ldr	r2, [pc, #128]	; (8007d30 <TIM_OC1_SetConfig+0xd8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d003      	beq.n	8007cbc <TIM_OC1_SetConfig+0x64>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a1f      	ldr	r2, [pc, #124]	; (8007d34 <TIM_OC1_SetConfig+0xdc>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d10c      	bne.n	8007cd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f023 0308 	bic.w	r3, r3, #8
 8007cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f023 0304 	bic.w	r3, r3, #4
 8007cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a15      	ldr	r2, [pc, #84]	; (8007d30 <TIM_OC1_SetConfig+0xd8>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d003      	beq.n	8007ce6 <TIM_OC1_SetConfig+0x8e>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a14      	ldr	r2, [pc, #80]	; (8007d34 <TIM_OC1_SetConfig+0xdc>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d111      	bne.n	8007d0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	621a      	str	r2, [r3, #32]
}
 8007d24:	bf00      	nop
 8007d26:	371c      	adds	r7, #28
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	40010000 	.word	0x40010000
 8007d34:	40010400 	.word	0x40010400

08007d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	f023 0210 	bic.w	r2, r3, #16
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	021b      	lsls	r3, r3, #8
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f023 0320 	bic.w	r3, r3, #32
 8007d82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a22      	ldr	r2, [pc, #136]	; (8007e1c <TIM_OC2_SetConfig+0xe4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d003      	beq.n	8007da0 <TIM_OC2_SetConfig+0x68>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a21      	ldr	r2, [pc, #132]	; (8007e20 <TIM_OC2_SetConfig+0xe8>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d10d      	bne.n	8007dbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a17      	ldr	r2, [pc, #92]	; (8007e1c <TIM_OC2_SetConfig+0xe4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d003      	beq.n	8007dcc <TIM_OC2_SetConfig+0x94>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a16      	ldr	r2, [pc, #88]	; (8007e20 <TIM_OC2_SetConfig+0xe8>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d113      	bne.n	8007df4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	621a      	str	r2, [r3, #32]
}
 8007e0e:	bf00      	nop
 8007e10:	371c      	adds	r7, #28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	40010000 	.word	0x40010000
 8007e20:	40010400 	.word	0x40010400

08007e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0303 	bic.w	r3, r3, #3
 8007e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	021b      	lsls	r3, r3, #8
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a21      	ldr	r2, [pc, #132]	; (8007f04 <TIM_OC3_SetConfig+0xe0>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <TIM_OC3_SetConfig+0x66>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a20      	ldr	r2, [pc, #128]	; (8007f08 <TIM_OC3_SetConfig+0xe4>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d10d      	bne.n	8007ea6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a16      	ldr	r2, [pc, #88]	; (8007f04 <TIM_OC3_SetConfig+0xe0>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d003      	beq.n	8007eb6 <TIM_OC3_SetConfig+0x92>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a15      	ldr	r2, [pc, #84]	; (8007f08 <TIM_OC3_SetConfig+0xe4>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d113      	bne.n	8007ede <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	011b      	lsls	r3, r3, #4
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	011b      	lsls	r3, r3, #4
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	621a      	str	r2, [r3, #32]
}
 8007ef8:	bf00      	nop
 8007efa:	371c      	adds	r7, #28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	40010000 	.word	0x40010000
 8007f08:	40010400 	.word	0x40010400

08007f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	021b      	lsls	r3, r3, #8
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	031b      	lsls	r3, r3, #12
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a12      	ldr	r2, [pc, #72]	; (8007fb0 <TIM_OC4_SetConfig+0xa4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d003      	beq.n	8007f74 <TIM_OC4_SetConfig+0x68>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a11      	ldr	r2, [pc, #68]	; (8007fb4 <TIM_OC4_SetConfig+0xa8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d109      	bne.n	8007f88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	019b      	lsls	r3, r3, #6
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	621a      	str	r2, [r3, #32]
}
 8007fa2:	bf00      	nop
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	40010000 	.word	0x40010000
 8007fb4:	40010400 	.word	0x40010400

08007fb8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	f023 0201 	bic.w	r2, r3, #1
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4a28      	ldr	r2, [pc, #160]	; (8008084 <TIM_TI1_SetConfig+0xcc>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d01b      	beq.n	800801e <TIM_TI1_SetConfig+0x66>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fec:	d017      	beq.n	800801e <TIM_TI1_SetConfig+0x66>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4a25      	ldr	r2, [pc, #148]	; (8008088 <TIM_TI1_SetConfig+0xd0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d013      	beq.n	800801e <TIM_TI1_SetConfig+0x66>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	4a24      	ldr	r2, [pc, #144]	; (800808c <TIM_TI1_SetConfig+0xd4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d00f      	beq.n	800801e <TIM_TI1_SetConfig+0x66>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	4a23      	ldr	r2, [pc, #140]	; (8008090 <TIM_TI1_SetConfig+0xd8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d00b      	beq.n	800801e <TIM_TI1_SetConfig+0x66>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	4a22      	ldr	r2, [pc, #136]	; (8008094 <TIM_TI1_SetConfig+0xdc>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d007      	beq.n	800801e <TIM_TI1_SetConfig+0x66>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4a21      	ldr	r2, [pc, #132]	; (8008098 <TIM_TI1_SetConfig+0xe0>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d003      	beq.n	800801e <TIM_TI1_SetConfig+0x66>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4a20      	ldr	r2, [pc, #128]	; (800809c <TIM_TI1_SetConfig+0xe4>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d101      	bne.n	8008022 <TIM_TI1_SetConfig+0x6a>
 800801e:	2301      	movs	r3, #1
 8008020:	e000      	b.n	8008024 <TIM_TI1_SetConfig+0x6c>
 8008022:	2300      	movs	r3, #0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d008      	beq.n	800803a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f023 0303 	bic.w	r3, r3, #3
 800802e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4313      	orrs	r3, r2
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	e003      	b.n	8008042 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008048:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	011b      	lsls	r3, r3, #4
 800804e:	b2db      	uxtb	r3, r3
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	4313      	orrs	r3, r2
 8008054:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f023 030a 	bic.w	r3, r3, #10
 800805c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f003 030a 	and.w	r3, r3, #10
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	4313      	orrs	r3, r2
 8008068:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	621a      	str	r2, [r3, #32]
}
 8008076:	bf00      	nop
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	40010000 	.word	0x40010000
 8008088:	40000400 	.word	0x40000400
 800808c:	40000800 	.word	0x40000800
 8008090:	40000c00 	.word	0x40000c00
 8008094:	40010400 	.word	0x40010400
 8008098:	40014000 	.word	0x40014000
 800809c:	40001800 	.word	0x40001800

080080a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	f023 0201 	bic.w	r2, r3, #1
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f023 030a 	bic.w	r3, r3, #10
 80080dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	621a      	str	r2, [r3, #32]
}
 80080f2:	bf00      	nop
 80080f4:	371c      	adds	r7, #28
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80080fe:	b480      	push	{r7}
 8008100:	b087      	sub	sp, #28
 8008102:	af00      	add	r7, sp, #0
 8008104:	60f8      	str	r0, [r7, #12]
 8008106:	60b9      	str	r1, [r7, #8]
 8008108:	607a      	str	r2, [r7, #4]
 800810a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6a1b      	ldr	r3, [r3, #32]
 8008110:	f023 0210 	bic.w	r2, r3, #16
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800812a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	021b      	lsls	r3, r3, #8
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	4313      	orrs	r3, r2
 8008134:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800813c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	031b      	lsls	r3, r3, #12
 8008142:	b29b      	uxth	r3, r3
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	4313      	orrs	r3, r2
 8008148:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008150:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	4313      	orrs	r3, r2
 800815e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	621a      	str	r2, [r3, #32]
}
 800816c:	bf00      	nop
 800816e:	371c      	adds	r7, #28
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	f023 0210 	bic.w	r2, r3, #16
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	031b      	lsls	r3, r3, #12
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	011b      	lsls	r3, r3, #4
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	4313      	orrs	r3, r2
 80081be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	621a      	str	r2, [r3, #32]
}
 80081cc:	bf00      	nop
 80081ce:	371c      	adds	r7, #28
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081d8:	b480      	push	{r7}
 80081da:	b087      	sub	sp, #28
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f023 0303 	bic.w	r3, r3, #3
 8008204:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4313      	orrs	r3, r2
 800820c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008214:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	011b      	lsls	r3, r3, #4
 800821a:	b2db      	uxtb	r3, r3
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	4313      	orrs	r3, r2
 8008220:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008228:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	021b      	lsls	r3, r3, #8
 800822e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	4313      	orrs	r3, r2
 8008236:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	621a      	str	r2, [r3, #32]
}
 8008244:	bf00      	nop
 8008246:	371c      	adds	r7, #28
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6a1b      	ldr	r3, [r3, #32]
 8008274:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800827c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	021b      	lsls	r3, r3, #8
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800828e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	031b      	lsls	r3, r3, #12
 8008294:	b29b      	uxth	r3, r3
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	4313      	orrs	r3, r2
 800829a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80082a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	031b      	lsls	r3, r3, #12
 80082a8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	621a      	str	r2, [r3, #32]
}
 80082be:	bf00      	nop
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b085      	sub	sp, #20
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	f043 0307 	orr.w	r3, r3, #7
 80082ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	609a      	str	r2, [r3, #8]
}
 80082f4:	bf00      	nop
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008300:	b480      	push	{r7}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
 800830c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800831a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	021a      	lsls	r2, r3, #8
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	431a      	orrs	r2, r3
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	4313      	orrs	r3, r2
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	4313      	orrs	r3, r2
 800832c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	609a      	str	r2, [r3, #8]
}
 8008334:	bf00      	nop
 8008336:	371c      	adds	r7, #28
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f003 031f 	and.w	r3, r3, #31
 8008352:	2201      	movs	r2, #1
 8008354:	fa02 f303 	lsl.w	r3, r2, r3
 8008358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6a1a      	ldr	r2, [r3, #32]
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	43db      	mvns	r3, r3
 8008362:	401a      	ands	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6a1a      	ldr	r2, [r3, #32]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f003 031f 	and.w	r3, r3, #31
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	fa01 f303 	lsl.w	r3, r1, r3
 8008378:	431a      	orrs	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	621a      	str	r2, [r3, #32]
}
 800837e:	bf00      	nop
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
	...

0800838c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e05a      	b.n	800845a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a21      	ldr	r2, [pc, #132]	; (8008468 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d022      	beq.n	800842e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083f0:	d01d      	beq.n	800842e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a1d      	ldr	r2, [pc, #116]	; (800846c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d018      	beq.n	800842e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a1b      	ldr	r2, [pc, #108]	; (8008470 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d013      	beq.n	800842e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a1a      	ldr	r2, [pc, #104]	; (8008474 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00e      	beq.n	800842e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a18      	ldr	r2, [pc, #96]	; (8008478 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d009      	beq.n	800842e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a17      	ldr	r2, [pc, #92]	; (800847c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d004      	beq.n	800842e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a15      	ldr	r2, [pc, #84]	; (8008480 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d10c      	bne.n	8008448 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	4313      	orrs	r3, r2
 800843e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	40010000 	.word	0x40010000
 800846c:	40000400 	.word	0x40000400
 8008470:	40000800 	.word	0x40000800
 8008474:	40000c00 	.word	0x40000c00
 8008478:	40010400 	.word	0x40010400
 800847c:	40014000 	.word	0x40014000
 8008480:	40001800 	.word	0x40001800

08008484 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008498:	2b01      	cmp	r3, #1
 800849a:	d101      	bne.n	80084a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800849c:	2302      	movs	r3, #2
 800849e:	e03d      	b.n	800851c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4313      	orrs	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	4313      	orrs	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e03f      	b.n	80085e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d106      	bne.n	800857c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7fb fba8 	bl	8003ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2224      	movs	r2, #36	; 0x24
 8008580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68da      	ldr	r2, [r3, #12]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008592:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fddf 	bl	8009158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	691a      	ldr	r2, [r3, #16]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	695a      	ldr	r2, [r3, #20]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2220      	movs	r2, #32
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2220      	movs	r2, #32
 80085dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b08a      	sub	sp, #40	; 0x28
 80085ee:	af02      	add	r7, sp, #8
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	603b      	str	r3, [r7, #0]
 80085f6:	4613      	mov	r3, r2
 80085f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b20      	cmp	r3, #32
 8008608:	d17c      	bne.n	8008704 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <HAL_UART_Transmit+0x2c>
 8008610:	88fb      	ldrh	r3, [r7, #6]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e075      	b.n	8008706 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008620:	2b01      	cmp	r3, #1
 8008622:	d101      	bne.n	8008628 <HAL_UART_Transmit+0x3e>
 8008624:	2302      	movs	r3, #2
 8008626:	e06e      	b.n	8008706 <HAL_UART_Transmit+0x11c>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2221      	movs	r2, #33	; 0x21
 800863a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800863e:	f7fb fefb 	bl	8004438 <HAL_GetTick>
 8008642:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	88fa      	ldrh	r2, [r7, #6]
 8008648:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	88fa      	ldrh	r2, [r7, #6]
 800864e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008658:	d108      	bne.n	800866c <HAL_UART_Transmit+0x82>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d104      	bne.n	800866c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008662:	2300      	movs	r3, #0
 8008664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	61bb      	str	r3, [r7, #24]
 800866a:	e003      	b.n	8008674 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008670:	2300      	movs	r3, #0
 8008672:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800867c:	e02a      	b.n	80086d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2200      	movs	r2, #0
 8008686:	2180      	movs	r1, #128	; 0x80
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 fb1f 	bl	8008ccc <UART_WaitOnFlagUntilTimeout>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e036      	b.n	8008706 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10b      	bne.n	80086b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	3302      	adds	r3, #2
 80086b2:	61bb      	str	r3, [r7, #24]
 80086b4:	e007      	b.n	80086c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	781a      	ldrb	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	3301      	adds	r3, #1
 80086c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	3b01      	subs	r3, #1
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086d8:	b29b      	uxth	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1cf      	bne.n	800867e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2200      	movs	r2, #0
 80086e6:	2140      	movs	r1, #64	; 0x40
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 faef 	bl	8008ccc <UART_WaitOnFlagUntilTimeout>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e006      	b.n	8008706 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	e000      	b.n	8008706 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008704:	2302      	movs	r3, #2
  }
}
 8008706:	4618      	mov	r0, r3
 8008708:	3720      	adds	r7, #32
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	60b9      	str	r1, [r7, #8]
 8008718:	4613      	mov	r3, r2
 800871a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b20      	cmp	r3, #32
 8008726:	d11d      	bne.n	8008764 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <HAL_UART_Receive_IT+0x26>
 800872e:	88fb      	ldrh	r3, [r7, #6]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e016      	b.n	8008766 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800873e:	2b01      	cmp	r3, #1
 8008740:	d101      	bne.n	8008746 <HAL_UART_Receive_IT+0x38>
 8008742:	2302      	movs	r3, #2
 8008744:	e00f      	b.n	8008766 <HAL_UART_Receive_IT+0x58>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008754:	88fb      	ldrh	r3, [r7, #6]
 8008756:	461a      	mov	r2, r3
 8008758:	68b9      	ldr	r1, [r7, #8]
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 fb24 	bl	8008da8 <UART_Start_Receive_IT>
 8008760:	4603      	mov	r3, r0
 8008762:	e000      	b.n	8008766 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008764:	2302      	movs	r3, #2
  }
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b0ba      	sub	sp, #232	; 0xe8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008796:	2300      	movs	r3, #0
 8008798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800879c:	2300      	movs	r3, #0
 800879e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a6:	f003 030f 	and.w	r3, r3, #15
 80087aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80087ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10f      	bne.n	80087d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ba:	f003 0320 	and.w	r3, r3, #32
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d009      	beq.n	80087d6 <HAL_UART_IRQHandler+0x66>
 80087c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087c6:	f003 0320 	and.w	r3, r3, #32
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fc07 	bl	8008fe2 <UART_Receive_IT>
      return;
 80087d4:	e256      	b.n	8008c84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 80de 	beq.w	800899c <HAL_UART_IRQHandler+0x22c>
 80087e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d106      	bne.n	80087fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 80d1 	beq.w	800899c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00b      	beq.n	800881e <HAL_UART_IRQHandler+0xae>
 8008806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800880a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880e:	2b00      	cmp	r3, #0
 8008810:	d005      	beq.n	800881e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	f043 0201 	orr.w	r2, r3, #1
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800881e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008822:	f003 0304 	and.w	r3, r3, #4
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00b      	beq.n	8008842 <HAL_UART_IRQHandler+0xd2>
 800882a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d005      	beq.n	8008842 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	f043 0202 	orr.w	r2, r3, #2
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00b      	beq.n	8008866 <HAL_UART_IRQHandler+0xf6>
 800884e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d005      	beq.n	8008866 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	f043 0204 	orr.w	r2, r3, #4
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800886a:	f003 0308 	and.w	r3, r3, #8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d011      	beq.n	8008896 <HAL_UART_IRQHandler+0x126>
 8008872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	2b00      	cmp	r3, #0
 800887c:	d105      	bne.n	800888a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800887e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b00      	cmp	r3, #0
 8008888:	d005      	beq.n	8008896 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888e:	f043 0208 	orr.w	r2, r3, #8
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 81ed 	beq.w	8008c7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a4:	f003 0320 	and.w	r3, r3, #32
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d008      	beq.n	80088be <HAL_UART_IRQHandler+0x14e>
 80088ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088b0:	f003 0320 	and.w	r3, r3, #32
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fb92 	bl	8008fe2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c8:	2b40      	cmp	r3, #64	; 0x40
 80088ca:	bf0c      	ite	eq
 80088cc:	2301      	moveq	r3, #1
 80088ce:	2300      	movne	r3, #0
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088da:	f003 0308 	and.w	r3, r3, #8
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d103      	bne.n	80088ea <HAL_UART_IRQHandler+0x17a>
 80088e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d04f      	beq.n	800898a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fa9a 	bl	8008e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fa:	2b40      	cmp	r3, #64	; 0x40
 80088fc:	d141      	bne.n	8008982 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3314      	adds	r3, #20
 8008904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008914:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800891c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3314      	adds	r3, #20
 8008926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800892a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800892e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800893a:	e841 2300 	strex	r3, r2, [r1]
 800893e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1d9      	bne.n	80088fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	2b00      	cmp	r3, #0
 8008950:	d013      	beq.n	800897a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008956:	4a7d      	ldr	r2, [pc, #500]	; (8008b4c <HAL_UART_IRQHandler+0x3dc>)
 8008958:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895e:	4618      	mov	r0, r3
 8008960:	f7fc fb1b 	bl	8004f9a <HAL_DMA_Abort_IT>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d016      	beq.n	8008998 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008978:	e00e      	b.n	8008998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f990 	bl	8008ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008980:	e00a      	b.n	8008998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f98c 	bl	8008ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008988:	e006      	b.n	8008998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f988 	bl	8008ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008996:	e170      	b.n	8008c7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008998:	bf00      	nop
    return;
 800899a:	e16e      	b.n	8008c7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	f040 814a 	bne.w	8008c3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80089a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089aa:	f003 0310 	and.w	r3, r3, #16
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 8143 	beq.w	8008c3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089b8:	f003 0310 	and.w	r3, r3, #16
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 813c 	beq.w	8008c3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089c2:	2300      	movs	r3, #0
 80089c4:	60bb      	str	r3, [r7, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	60bb      	str	r3, [r7, #8]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	60bb      	str	r3, [r7, #8]
 80089d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e2:	2b40      	cmp	r3, #64	; 0x40
 80089e4:	f040 80b4 	bne.w	8008b50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 8140 	beq.w	8008c7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a06:	429a      	cmp	r2, r3
 8008a08:	f080 8139 	bcs.w	8008c7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a1e:	f000 8088 	beq.w	8008b32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	330c      	adds	r3, #12
 8008a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	330c      	adds	r3, #12
 8008a4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a5e:	e841 2300 	strex	r3, r2, [r1]
 8008a62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1d9      	bne.n	8008a22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3314      	adds	r3, #20
 8008a74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a80:	f023 0301 	bic.w	r3, r3, #1
 8008a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3314      	adds	r3, #20
 8008a8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a9e:	e841 2300 	strex	r3, r2, [r1]
 8008aa2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1e1      	bne.n	8008a6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3314      	adds	r3, #20
 8008ab0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3314      	adds	r3, #20
 8008aca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008ace:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ad0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ad4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e3      	bne.n	8008aaa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2220      	movs	r2, #32
 8008ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	330c      	adds	r3, #12
 8008af6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008afa:	e853 3f00 	ldrex	r3, [r3]
 8008afe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b02:	f023 0310 	bic.w	r3, r3, #16
 8008b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	330c      	adds	r3, #12
 8008b10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b14:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b1c:	e841 2300 	strex	r3, r2, [r1]
 8008b20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1e3      	bne.n	8008af0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fc f9c4 	bl	8004eba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f8b6 	bl	8008cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b48:	e099      	b.n	8008c7e <HAL_UART_IRQHandler+0x50e>
 8008b4a:	bf00      	nop
 8008b4c:	08008eeb 	.word	0x08008eeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 808b 	beq.w	8008c82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 8086 	beq.w	8008c82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	330c      	adds	r3, #12
 8008b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b80:	e853 3f00 	ldrex	r3, [r3]
 8008b84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	330c      	adds	r3, #12
 8008b96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b9a:	647a      	str	r2, [r7, #68]	; 0x44
 8008b9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e3      	bne.n	8008b76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3314      	adds	r3, #20
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	f023 0301 	bic.w	r3, r3, #1
 8008bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3314      	adds	r3, #20
 8008bce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bd2:	633a      	str	r2, [r7, #48]	; 0x30
 8008bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bda:	e841 2300 	strex	r3, r2, [r1]
 8008bde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1e3      	bne.n	8008bae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	330c      	adds	r3, #12
 8008bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	e853 3f00 	ldrex	r3, [r3]
 8008c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0310 	bic.w	r3, r3, #16
 8008c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	330c      	adds	r3, #12
 8008c14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c18:	61fa      	str	r2, [r7, #28]
 8008c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1c:	69b9      	ldr	r1, [r7, #24]
 8008c1e:	69fa      	ldr	r2, [r7, #28]
 8008c20:	e841 2300 	strex	r3, r2, [r1]
 8008c24:	617b      	str	r3, [r7, #20]
   return(result);
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1e3      	bne.n	8008bf4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f83e 	bl	8008cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c38:	e023      	b.n	8008c82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d009      	beq.n	8008c5a <HAL_UART_IRQHandler+0x4ea>
 8008c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f95d 	bl	8008f12 <UART_Transmit_IT>
    return;
 8008c58:	e014      	b.n	8008c84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00e      	beq.n	8008c84 <HAL_UART_IRQHandler+0x514>
 8008c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d008      	beq.n	8008c84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f99d 	bl	8008fb2 <UART_EndTransmit_IT>
    return;
 8008c78:	e004      	b.n	8008c84 <HAL_UART_IRQHandler+0x514>
    return;
 8008c7a:	bf00      	nop
 8008c7c:	e002      	b.n	8008c84 <HAL_UART_IRQHandler+0x514>
      return;
 8008c7e:	bf00      	nop
 8008c80:	e000      	b.n	8008c84 <HAL_UART_IRQHandler+0x514>
      return;
 8008c82:	bf00      	nop
  }
}
 8008c84:	37e8      	adds	r7, #232	; 0xe8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop

08008c8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b090      	sub	sp, #64	; 0x40
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cdc:	e050      	b.n	8008d80 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce4:	d04c      	beq.n	8008d80 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d007      	beq.n	8008cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8008cec:	f7fb fba4 	bl	8004438 <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d241      	bcs.n	8008d80 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	330c      	adds	r3, #12
 8008d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	e853 3f00 	ldrex	r3, [r3]
 8008d0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	330c      	adds	r3, #12
 8008d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d1c:	637a      	str	r2, [r7, #52]	; 0x34
 8008d1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d24:	e841 2300 	strex	r3, r2, [r1]
 8008d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e5      	bne.n	8008cfc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3314      	adds	r3, #20
 8008d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f023 0301 	bic.w	r3, r3, #1
 8008d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3314      	adds	r3, #20
 8008d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d50:	623a      	str	r2, [r7, #32]
 8008d52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	69f9      	ldr	r1, [r7, #28]
 8008d56:	6a3a      	ldr	r2, [r7, #32]
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e5      	bne.n	8008d30 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2220      	movs	r2, #32
 8008d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e00f      	b.n	8008da0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	4013      	ands	r3, r2
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	bf0c      	ite	eq
 8008d90:	2301      	moveq	r3, #1
 8008d92:	2300      	movne	r3, #0
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	461a      	mov	r2, r3
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d09f      	beq.n	8008cde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3740      	adds	r7, #64	; 0x40
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	4613      	mov	r3, r2
 8008db4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	88fa      	ldrh	r2, [r7, #6]
 8008dc0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	88fa      	ldrh	r2, [r7, #6]
 8008dc6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2222      	movs	r2, #34	; 0x22
 8008dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d007      	beq.n	8008df6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008df4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	695a      	ldr	r2, [r3, #20]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f042 0201 	orr.w	r2, r2, #1
 8008e04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f042 0220 	orr.w	r2, r2, #32
 8008e14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b095      	sub	sp, #84	; 0x54
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	330c      	adds	r3, #12
 8008e32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e36:	e853 3f00 	ldrex	r3, [r3]
 8008e3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	330c      	adds	r3, #12
 8008e4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e4c:	643a      	str	r2, [r7, #64]	; 0x40
 8008e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e54:	e841 2300 	strex	r3, r2, [r1]
 8008e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1e5      	bne.n	8008e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3314      	adds	r3, #20
 8008e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	e853 3f00 	ldrex	r3, [r3]
 8008e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	f023 0301 	bic.w	r3, r3, #1
 8008e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	3314      	adds	r3, #20
 8008e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e88:	e841 2300 	strex	r3, r2, [r1]
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e5      	bne.n	8008e60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d119      	bne.n	8008ed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	330c      	adds	r3, #12
 8008ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	e853 3f00 	ldrex	r3, [r3]
 8008eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	f023 0310 	bic.w	r3, r3, #16
 8008eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	330c      	adds	r3, #12
 8008eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ebc:	61ba      	str	r2, [r7, #24]
 8008ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec0:	6979      	ldr	r1, [r7, #20]
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	e841 2300 	strex	r3, r2, [r1]
 8008ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1e5      	bne.n	8008e9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008ede:	bf00      	nop
 8008ee0:	3754      	adds	r7, #84	; 0x54
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f7ff fecb 	bl	8008ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f0a:	bf00      	nop
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b085      	sub	sp, #20
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b21      	cmp	r3, #33	; 0x21
 8008f24:	d13e      	bne.n	8008fa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f2e:	d114      	bne.n	8008f5a <UART_Transmit_IT+0x48>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d110      	bne.n	8008f5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	1c9a      	adds	r2, r3, #2
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	621a      	str	r2, [r3, #32]
 8008f58:	e008      	b.n	8008f6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	1c59      	adds	r1, r3, #1
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	6211      	str	r1, [r2, #32]
 8008f64:	781a      	ldrb	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	3b01      	subs	r3, #1
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10f      	bne.n	8008fa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	e000      	b.n	8008fa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008fa4:	2302      	movs	r3, #2
  }
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68da      	ldr	r2, [r3, #12]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff fe5a 	bl	8008c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b08c      	sub	sp, #48	; 0x30
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b22      	cmp	r3, #34	; 0x22
 8008ff4:	f040 80ab 	bne.w	800914e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009000:	d117      	bne.n	8009032 <UART_Receive_IT+0x50>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d113      	bne.n	8009032 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800900a:	2300      	movs	r3, #0
 800900c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009012:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	b29b      	uxth	r3, r3
 800901c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009020:	b29a      	uxth	r2, r3
 8009022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902a:	1c9a      	adds	r2, r3, #2
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	629a      	str	r2, [r3, #40]	; 0x28
 8009030:	e026      	b.n	8009080 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009036:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009038:	2300      	movs	r3, #0
 800903a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009044:	d007      	beq.n	8009056 <UART_Receive_IT+0x74>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10a      	bne.n	8009064 <UART_Receive_IT+0x82>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d106      	bne.n	8009064 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	b2da      	uxtb	r2, r3
 800905e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009060:	701a      	strb	r2, [r3, #0]
 8009062:	e008      	b.n	8009076 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	b2db      	uxtb	r3, r3
 800906c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009070:	b2da      	uxtb	r2, r3
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009074:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009084:	b29b      	uxth	r3, r3
 8009086:	3b01      	subs	r3, #1
 8009088:	b29b      	uxth	r3, r3
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	4619      	mov	r1, r3
 800908e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009090:	2b00      	cmp	r3, #0
 8009092:	d15a      	bne.n	800914a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68da      	ldr	r2, [r3, #12]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f022 0220 	bic.w	r2, r2, #32
 80090a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	695a      	ldr	r2, [r3, #20]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0201 	bic.w	r2, r2, #1
 80090c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2220      	movs	r2, #32
 80090c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d135      	bne.n	8009140 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	330c      	adds	r3, #12
 80090e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	e853 3f00 	ldrex	r3, [r3]
 80090e8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	f023 0310 	bic.w	r3, r3, #16
 80090f0:	627b      	str	r3, [r7, #36]	; 0x24
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	330c      	adds	r3, #12
 80090f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090fa:	623a      	str	r2, [r7, #32]
 80090fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fe:	69f9      	ldr	r1, [r7, #28]
 8009100:	6a3a      	ldr	r2, [r7, #32]
 8009102:	e841 2300 	strex	r3, r2, [r1]
 8009106:	61bb      	str	r3, [r7, #24]
   return(result);
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1e5      	bne.n	80090da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0310 	and.w	r3, r3, #16
 8009118:	2b10      	cmp	r3, #16
 800911a:	d10a      	bne.n	8009132 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800911c:	2300      	movs	r3, #0
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	60fb      	str	r3, [r7, #12]
 8009130:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff fdbb 	bl	8008cb4 <HAL_UARTEx_RxEventCallback>
 800913e:	e002      	b.n	8009146 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7f8 fc39 	bl	80019b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	e002      	b.n	8009150 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	e000      	b.n	8009150 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800914e:	2302      	movs	r3, #2
  }
}
 8009150:	4618      	mov	r0, r3
 8009152:	3730      	adds	r7, #48	; 0x30
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800915c:	b0c0      	sub	sp, #256	; 0x100
 800915e:	af00      	add	r7, sp, #0
 8009160:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009174:	68d9      	ldr	r1, [r3, #12]
 8009176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	ea40 0301 	orr.w	r3, r0, r1
 8009180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	431a      	orrs	r2, r3
 8009190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	431a      	orrs	r2, r3
 8009198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	4313      	orrs	r3, r2
 80091a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80091a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091b0:	f021 010c 	bic.w	r1, r1, #12
 80091b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091be:	430b      	orrs	r3, r1
 80091c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d2:	6999      	ldr	r1, [r3, #24]
 80091d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	ea40 0301 	orr.w	r3, r0, r1
 80091de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	4b8f      	ldr	r3, [pc, #572]	; (8009424 <UART_SetConfig+0x2cc>)
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d005      	beq.n	80091f8 <UART_SetConfig+0xa0>
 80091ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	4b8d      	ldr	r3, [pc, #564]	; (8009428 <UART_SetConfig+0x2d0>)
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d104      	bne.n	8009202 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091f8:	f7fd fcc4 	bl	8006b84 <HAL_RCC_GetPCLK2Freq>
 80091fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009200:	e003      	b.n	800920a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009202:	f7fd fcab 	bl	8006b5c <HAL_RCC_GetPCLK1Freq>
 8009206:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800920a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800920e:	69db      	ldr	r3, [r3, #28]
 8009210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009214:	f040 810c 	bne.w	8009430 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800921c:	2200      	movs	r2, #0
 800921e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009222:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009226:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800922a:	4622      	mov	r2, r4
 800922c:	462b      	mov	r3, r5
 800922e:	1891      	adds	r1, r2, r2
 8009230:	65b9      	str	r1, [r7, #88]	; 0x58
 8009232:	415b      	adcs	r3, r3
 8009234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009236:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800923a:	4621      	mov	r1, r4
 800923c:	eb12 0801 	adds.w	r8, r2, r1
 8009240:	4629      	mov	r1, r5
 8009242:	eb43 0901 	adc.w	r9, r3, r1
 8009246:	f04f 0200 	mov.w	r2, #0
 800924a:	f04f 0300 	mov.w	r3, #0
 800924e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800925a:	4690      	mov	r8, r2
 800925c:	4699      	mov	r9, r3
 800925e:	4623      	mov	r3, r4
 8009260:	eb18 0303 	adds.w	r3, r8, r3
 8009264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009268:	462b      	mov	r3, r5
 800926a:	eb49 0303 	adc.w	r3, r9, r3
 800926e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800927e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009282:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009286:	460b      	mov	r3, r1
 8009288:	18db      	adds	r3, r3, r3
 800928a:	653b      	str	r3, [r7, #80]	; 0x50
 800928c:	4613      	mov	r3, r2
 800928e:	eb42 0303 	adc.w	r3, r2, r3
 8009292:	657b      	str	r3, [r7, #84]	; 0x54
 8009294:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009298:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800929c:	f7f7 fcec 	bl	8000c78 <__aeabi_uldivmod>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4b61      	ldr	r3, [pc, #388]	; (800942c <UART_SetConfig+0x2d4>)
 80092a6:	fba3 2302 	umull	r2, r3, r3, r2
 80092aa:	095b      	lsrs	r3, r3, #5
 80092ac:	011c      	lsls	r4, r3, #4
 80092ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092b2:	2200      	movs	r2, #0
 80092b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80092bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80092c0:	4642      	mov	r2, r8
 80092c2:	464b      	mov	r3, r9
 80092c4:	1891      	adds	r1, r2, r2
 80092c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80092c8:	415b      	adcs	r3, r3
 80092ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80092d0:	4641      	mov	r1, r8
 80092d2:	eb12 0a01 	adds.w	sl, r2, r1
 80092d6:	4649      	mov	r1, r9
 80092d8:	eb43 0b01 	adc.w	fp, r3, r1
 80092dc:	f04f 0200 	mov.w	r2, #0
 80092e0:	f04f 0300 	mov.w	r3, #0
 80092e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092f0:	4692      	mov	sl, r2
 80092f2:	469b      	mov	fp, r3
 80092f4:	4643      	mov	r3, r8
 80092f6:	eb1a 0303 	adds.w	r3, sl, r3
 80092fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092fe:	464b      	mov	r3, r9
 8009300:	eb4b 0303 	adc.w	r3, fp, r3
 8009304:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009314:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009318:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800931c:	460b      	mov	r3, r1
 800931e:	18db      	adds	r3, r3, r3
 8009320:	643b      	str	r3, [r7, #64]	; 0x40
 8009322:	4613      	mov	r3, r2
 8009324:	eb42 0303 	adc.w	r3, r2, r3
 8009328:	647b      	str	r3, [r7, #68]	; 0x44
 800932a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800932e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009332:	f7f7 fca1 	bl	8000c78 <__aeabi_uldivmod>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	4611      	mov	r1, r2
 800933c:	4b3b      	ldr	r3, [pc, #236]	; (800942c <UART_SetConfig+0x2d4>)
 800933e:	fba3 2301 	umull	r2, r3, r3, r1
 8009342:	095b      	lsrs	r3, r3, #5
 8009344:	2264      	movs	r2, #100	; 0x64
 8009346:	fb02 f303 	mul.w	r3, r2, r3
 800934a:	1acb      	subs	r3, r1, r3
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009352:	4b36      	ldr	r3, [pc, #216]	; (800942c <UART_SetConfig+0x2d4>)
 8009354:	fba3 2302 	umull	r2, r3, r3, r2
 8009358:	095b      	lsrs	r3, r3, #5
 800935a:	005b      	lsls	r3, r3, #1
 800935c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009360:	441c      	add	r4, r3
 8009362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009366:	2200      	movs	r2, #0
 8009368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800936c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009370:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009374:	4642      	mov	r2, r8
 8009376:	464b      	mov	r3, r9
 8009378:	1891      	adds	r1, r2, r2
 800937a:	63b9      	str	r1, [r7, #56]	; 0x38
 800937c:	415b      	adcs	r3, r3
 800937e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009384:	4641      	mov	r1, r8
 8009386:	1851      	adds	r1, r2, r1
 8009388:	6339      	str	r1, [r7, #48]	; 0x30
 800938a:	4649      	mov	r1, r9
 800938c:	414b      	adcs	r3, r1
 800938e:	637b      	str	r3, [r7, #52]	; 0x34
 8009390:	f04f 0200 	mov.w	r2, #0
 8009394:	f04f 0300 	mov.w	r3, #0
 8009398:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800939c:	4659      	mov	r1, fp
 800939e:	00cb      	lsls	r3, r1, #3
 80093a0:	4651      	mov	r1, sl
 80093a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093a6:	4651      	mov	r1, sl
 80093a8:	00ca      	lsls	r2, r1, #3
 80093aa:	4610      	mov	r0, r2
 80093ac:	4619      	mov	r1, r3
 80093ae:	4603      	mov	r3, r0
 80093b0:	4642      	mov	r2, r8
 80093b2:	189b      	adds	r3, r3, r2
 80093b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093b8:	464b      	mov	r3, r9
 80093ba:	460a      	mov	r2, r1
 80093bc:	eb42 0303 	adc.w	r3, r2, r3
 80093c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80093d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80093d8:	460b      	mov	r3, r1
 80093da:	18db      	adds	r3, r3, r3
 80093dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80093de:	4613      	mov	r3, r2
 80093e0:	eb42 0303 	adc.w	r3, r2, r3
 80093e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80093ee:	f7f7 fc43 	bl	8000c78 <__aeabi_uldivmod>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	4b0d      	ldr	r3, [pc, #52]	; (800942c <UART_SetConfig+0x2d4>)
 80093f8:	fba3 1302 	umull	r1, r3, r3, r2
 80093fc:	095b      	lsrs	r3, r3, #5
 80093fe:	2164      	movs	r1, #100	; 0x64
 8009400:	fb01 f303 	mul.w	r3, r1, r3
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	00db      	lsls	r3, r3, #3
 8009408:	3332      	adds	r3, #50	; 0x32
 800940a:	4a08      	ldr	r2, [pc, #32]	; (800942c <UART_SetConfig+0x2d4>)
 800940c:	fba2 2303 	umull	r2, r3, r2, r3
 8009410:	095b      	lsrs	r3, r3, #5
 8009412:	f003 0207 	and.w	r2, r3, #7
 8009416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4422      	add	r2, r4
 800941e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009420:	e106      	b.n	8009630 <UART_SetConfig+0x4d8>
 8009422:	bf00      	nop
 8009424:	40011000 	.word	0x40011000
 8009428:	40011400 	.word	0x40011400
 800942c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009434:	2200      	movs	r2, #0
 8009436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800943a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800943e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009442:	4642      	mov	r2, r8
 8009444:	464b      	mov	r3, r9
 8009446:	1891      	adds	r1, r2, r2
 8009448:	6239      	str	r1, [r7, #32]
 800944a:	415b      	adcs	r3, r3
 800944c:	627b      	str	r3, [r7, #36]	; 0x24
 800944e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009452:	4641      	mov	r1, r8
 8009454:	1854      	adds	r4, r2, r1
 8009456:	4649      	mov	r1, r9
 8009458:	eb43 0501 	adc.w	r5, r3, r1
 800945c:	f04f 0200 	mov.w	r2, #0
 8009460:	f04f 0300 	mov.w	r3, #0
 8009464:	00eb      	lsls	r3, r5, #3
 8009466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800946a:	00e2      	lsls	r2, r4, #3
 800946c:	4614      	mov	r4, r2
 800946e:	461d      	mov	r5, r3
 8009470:	4643      	mov	r3, r8
 8009472:	18e3      	adds	r3, r4, r3
 8009474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009478:	464b      	mov	r3, r9
 800947a:	eb45 0303 	adc.w	r3, r5, r3
 800947e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800948e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009492:	f04f 0200 	mov.w	r2, #0
 8009496:	f04f 0300 	mov.w	r3, #0
 800949a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800949e:	4629      	mov	r1, r5
 80094a0:	008b      	lsls	r3, r1, #2
 80094a2:	4621      	mov	r1, r4
 80094a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094a8:	4621      	mov	r1, r4
 80094aa:	008a      	lsls	r2, r1, #2
 80094ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094b0:	f7f7 fbe2 	bl	8000c78 <__aeabi_uldivmod>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4b60      	ldr	r3, [pc, #384]	; (800963c <UART_SetConfig+0x4e4>)
 80094ba:	fba3 2302 	umull	r2, r3, r3, r2
 80094be:	095b      	lsrs	r3, r3, #5
 80094c0:	011c      	lsls	r4, r3, #4
 80094c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80094d4:	4642      	mov	r2, r8
 80094d6:	464b      	mov	r3, r9
 80094d8:	1891      	adds	r1, r2, r2
 80094da:	61b9      	str	r1, [r7, #24]
 80094dc:	415b      	adcs	r3, r3
 80094de:	61fb      	str	r3, [r7, #28]
 80094e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094e4:	4641      	mov	r1, r8
 80094e6:	1851      	adds	r1, r2, r1
 80094e8:	6139      	str	r1, [r7, #16]
 80094ea:	4649      	mov	r1, r9
 80094ec:	414b      	adcs	r3, r1
 80094ee:	617b      	str	r3, [r7, #20]
 80094f0:	f04f 0200 	mov.w	r2, #0
 80094f4:	f04f 0300 	mov.w	r3, #0
 80094f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094fc:	4659      	mov	r1, fp
 80094fe:	00cb      	lsls	r3, r1, #3
 8009500:	4651      	mov	r1, sl
 8009502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009506:	4651      	mov	r1, sl
 8009508:	00ca      	lsls	r2, r1, #3
 800950a:	4610      	mov	r0, r2
 800950c:	4619      	mov	r1, r3
 800950e:	4603      	mov	r3, r0
 8009510:	4642      	mov	r2, r8
 8009512:	189b      	adds	r3, r3, r2
 8009514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009518:	464b      	mov	r3, r9
 800951a:	460a      	mov	r2, r1
 800951c:	eb42 0303 	adc.w	r3, r2, r3
 8009520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	67bb      	str	r3, [r7, #120]	; 0x78
 800952e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009530:	f04f 0200 	mov.w	r2, #0
 8009534:	f04f 0300 	mov.w	r3, #0
 8009538:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800953c:	4649      	mov	r1, r9
 800953e:	008b      	lsls	r3, r1, #2
 8009540:	4641      	mov	r1, r8
 8009542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009546:	4641      	mov	r1, r8
 8009548:	008a      	lsls	r2, r1, #2
 800954a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800954e:	f7f7 fb93 	bl	8000c78 <__aeabi_uldivmod>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4611      	mov	r1, r2
 8009558:	4b38      	ldr	r3, [pc, #224]	; (800963c <UART_SetConfig+0x4e4>)
 800955a:	fba3 2301 	umull	r2, r3, r3, r1
 800955e:	095b      	lsrs	r3, r3, #5
 8009560:	2264      	movs	r2, #100	; 0x64
 8009562:	fb02 f303 	mul.w	r3, r2, r3
 8009566:	1acb      	subs	r3, r1, r3
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	3332      	adds	r3, #50	; 0x32
 800956c:	4a33      	ldr	r2, [pc, #204]	; (800963c <UART_SetConfig+0x4e4>)
 800956e:	fba2 2303 	umull	r2, r3, r2, r3
 8009572:	095b      	lsrs	r3, r3, #5
 8009574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009578:	441c      	add	r4, r3
 800957a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800957e:	2200      	movs	r2, #0
 8009580:	673b      	str	r3, [r7, #112]	; 0x70
 8009582:	677a      	str	r2, [r7, #116]	; 0x74
 8009584:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009588:	4642      	mov	r2, r8
 800958a:	464b      	mov	r3, r9
 800958c:	1891      	adds	r1, r2, r2
 800958e:	60b9      	str	r1, [r7, #8]
 8009590:	415b      	adcs	r3, r3
 8009592:	60fb      	str	r3, [r7, #12]
 8009594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009598:	4641      	mov	r1, r8
 800959a:	1851      	adds	r1, r2, r1
 800959c:	6039      	str	r1, [r7, #0]
 800959e:	4649      	mov	r1, r9
 80095a0:	414b      	adcs	r3, r1
 80095a2:	607b      	str	r3, [r7, #4]
 80095a4:	f04f 0200 	mov.w	r2, #0
 80095a8:	f04f 0300 	mov.w	r3, #0
 80095ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095b0:	4659      	mov	r1, fp
 80095b2:	00cb      	lsls	r3, r1, #3
 80095b4:	4651      	mov	r1, sl
 80095b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095ba:	4651      	mov	r1, sl
 80095bc:	00ca      	lsls	r2, r1, #3
 80095be:	4610      	mov	r0, r2
 80095c0:	4619      	mov	r1, r3
 80095c2:	4603      	mov	r3, r0
 80095c4:	4642      	mov	r2, r8
 80095c6:	189b      	adds	r3, r3, r2
 80095c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80095ca:	464b      	mov	r3, r9
 80095cc:	460a      	mov	r2, r1
 80095ce:	eb42 0303 	adc.w	r3, r2, r3
 80095d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	663b      	str	r3, [r7, #96]	; 0x60
 80095de:	667a      	str	r2, [r7, #100]	; 0x64
 80095e0:	f04f 0200 	mov.w	r2, #0
 80095e4:	f04f 0300 	mov.w	r3, #0
 80095e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80095ec:	4649      	mov	r1, r9
 80095ee:	008b      	lsls	r3, r1, #2
 80095f0:	4641      	mov	r1, r8
 80095f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095f6:	4641      	mov	r1, r8
 80095f8:	008a      	lsls	r2, r1, #2
 80095fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80095fe:	f7f7 fb3b 	bl	8000c78 <__aeabi_uldivmod>
 8009602:	4602      	mov	r2, r0
 8009604:	460b      	mov	r3, r1
 8009606:	4b0d      	ldr	r3, [pc, #52]	; (800963c <UART_SetConfig+0x4e4>)
 8009608:	fba3 1302 	umull	r1, r3, r3, r2
 800960c:	095b      	lsrs	r3, r3, #5
 800960e:	2164      	movs	r1, #100	; 0x64
 8009610:	fb01 f303 	mul.w	r3, r1, r3
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	011b      	lsls	r3, r3, #4
 8009618:	3332      	adds	r3, #50	; 0x32
 800961a:	4a08      	ldr	r2, [pc, #32]	; (800963c <UART_SetConfig+0x4e4>)
 800961c:	fba2 2303 	umull	r2, r3, r2, r3
 8009620:	095b      	lsrs	r3, r3, #5
 8009622:	f003 020f 	and.w	r2, r3, #15
 8009626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4422      	add	r2, r4
 800962e:	609a      	str	r2, [r3, #8]
}
 8009630:	bf00      	nop
 8009632:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009636:	46bd      	mov	sp, r7
 8009638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800963c:	51eb851f 	.word	0x51eb851f

08009640 <__NVIC_SetPriority>:
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	4603      	mov	r3, r0
 8009648:	6039      	str	r1, [r7, #0]
 800964a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800964c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009650:	2b00      	cmp	r3, #0
 8009652:	db0a      	blt.n	800966a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	b2da      	uxtb	r2, r3
 8009658:	490c      	ldr	r1, [pc, #48]	; (800968c <__NVIC_SetPriority+0x4c>)
 800965a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800965e:	0112      	lsls	r2, r2, #4
 8009660:	b2d2      	uxtb	r2, r2
 8009662:	440b      	add	r3, r1
 8009664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009668:	e00a      	b.n	8009680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	b2da      	uxtb	r2, r3
 800966e:	4908      	ldr	r1, [pc, #32]	; (8009690 <__NVIC_SetPriority+0x50>)
 8009670:	79fb      	ldrb	r3, [r7, #7]
 8009672:	f003 030f 	and.w	r3, r3, #15
 8009676:	3b04      	subs	r3, #4
 8009678:	0112      	lsls	r2, r2, #4
 800967a:	b2d2      	uxtb	r2, r2
 800967c:	440b      	add	r3, r1
 800967e:	761a      	strb	r2, [r3, #24]
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	e000e100 	.word	0xe000e100
 8009690:	e000ed00 	.word	0xe000ed00

08009694 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009694:	b580      	push	{r7, lr}
 8009696:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009698:	2100      	movs	r1, #0
 800969a:	f06f 0004 	mvn.w	r0, #4
 800969e:	f7ff ffcf 	bl	8009640 <__NVIC_SetPriority>
#endif
}
 80096a2:	bf00      	nop
 80096a4:	bd80      	pop	{r7, pc}
	...

080096a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096ae:	f3ef 8305 	mrs	r3, IPSR
 80096b2:	603b      	str	r3, [r7, #0]
  return(result);
 80096b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d003      	beq.n	80096c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80096ba:	f06f 0305 	mvn.w	r3, #5
 80096be:	607b      	str	r3, [r7, #4]
 80096c0:	e00c      	b.n	80096dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80096c2:	4b0a      	ldr	r3, [pc, #40]	; (80096ec <osKernelInitialize+0x44>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d105      	bne.n	80096d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096ca:	4b08      	ldr	r3, [pc, #32]	; (80096ec <osKernelInitialize+0x44>)
 80096cc:	2201      	movs	r2, #1
 80096ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	607b      	str	r3, [r7, #4]
 80096d4:	e002      	b.n	80096dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80096d6:	f04f 33ff 	mov.w	r3, #4294967295
 80096da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096dc:	687b      	ldr	r3, [r7, #4]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	200007ec 	.word	0x200007ec

080096f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096f6:	f3ef 8305 	mrs	r3, IPSR
 80096fa:	603b      	str	r3, [r7, #0]
  return(result);
 80096fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009702:	f06f 0305 	mvn.w	r3, #5
 8009706:	607b      	str	r3, [r7, #4]
 8009708:	e010      	b.n	800972c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800970a:	4b0b      	ldr	r3, [pc, #44]	; (8009738 <osKernelStart+0x48>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d109      	bne.n	8009726 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009712:	f7ff ffbf 	bl	8009694 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009716:	4b08      	ldr	r3, [pc, #32]	; (8009738 <osKernelStart+0x48>)
 8009718:	2202      	movs	r2, #2
 800971a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800971c:	f001 f87c 	bl	800a818 <vTaskStartScheduler>
      stat = osOK;
 8009720:	2300      	movs	r3, #0
 8009722:	607b      	str	r3, [r7, #4]
 8009724:	e002      	b.n	800972c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009726:	f04f 33ff 	mov.w	r3, #4294967295
 800972a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800972c:	687b      	ldr	r3, [r7, #4]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	200007ec 	.word	0x200007ec

0800973c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800973c:	b580      	push	{r7, lr}
 800973e:	b08e      	sub	sp, #56	; 0x38
 8009740:	af04      	add	r7, sp, #16
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009748:	2300      	movs	r3, #0
 800974a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800974c:	f3ef 8305 	mrs	r3, IPSR
 8009750:	617b      	str	r3, [r7, #20]
  return(result);
 8009752:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009754:	2b00      	cmp	r3, #0
 8009756:	d17e      	bne.n	8009856 <osThreadNew+0x11a>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d07b      	beq.n	8009856 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800975e:	2380      	movs	r3, #128	; 0x80
 8009760:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009762:	2318      	movs	r3, #24
 8009764:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009766:	2300      	movs	r3, #0
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800976a:	f04f 33ff 	mov.w	r3, #4294967295
 800976e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d045      	beq.n	8009802 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <osThreadNew+0x48>
        name = attr->name;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d002      	beq.n	8009792 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d008      	beq.n	80097aa <osThreadNew+0x6e>
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	2b38      	cmp	r3, #56	; 0x38
 800979c:	d805      	bhi.n	80097aa <osThreadNew+0x6e>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f003 0301 	and.w	r3, r3, #1
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <osThreadNew+0x72>
        return (NULL);
 80097aa:	2300      	movs	r3, #0
 80097ac:	e054      	b.n	8009858 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d003      	beq.n	80097be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	089b      	lsrs	r3, r3, #2
 80097bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00e      	beq.n	80097e4 <osThreadNew+0xa8>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	2ba7      	cmp	r3, #167	; 0xa7
 80097cc:	d90a      	bls.n	80097e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d006      	beq.n	80097e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d002      	beq.n	80097e4 <osThreadNew+0xa8>
        mem = 1;
 80097de:	2301      	movs	r3, #1
 80097e0:	61bb      	str	r3, [r7, #24]
 80097e2:	e010      	b.n	8009806 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10c      	bne.n	8009806 <osThreadNew+0xca>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d108      	bne.n	8009806 <osThreadNew+0xca>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d104      	bne.n	8009806 <osThreadNew+0xca>
          mem = 0;
 80097fc:	2300      	movs	r3, #0
 80097fe:	61bb      	str	r3, [r7, #24]
 8009800:	e001      	b.n	8009806 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009802:	2300      	movs	r3, #0
 8009804:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d110      	bne.n	800982e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009814:	9202      	str	r2, [sp, #8]
 8009816:	9301      	str	r3, [sp, #4]
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	6a3a      	ldr	r2, [r7, #32]
 8009820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f000 fe0c 	bl	800a440 <xTaskCreateStatic>
 8009828:	4603      	mov	r3, r0
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	e013      	b.n	8009856 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d110      	bne.n	8009856 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009834:	6a3b      	ldr	r3, [r7, #32]
 8009836:	b29a      	uxth	r2, r3
 8009838:	f107 0310 	add.w	r3, r7, #16
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f000 fe57 	bl	800a4fa <xTaskCreate>
 800984c:	4603      	mov	r3, r0
 800984e:	2b01      	cmp	r3, #1
 8009850:	d001      	beq.n	8009856 <osThreadNew+0x11a>
            hTask = NULL;
 8009852:	2300      	movs	r3, #0
 8009854:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009856:	693b      	ldr	r3, [r7, #16]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3728      	adds	r7, #40	; 0x28
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009868:	f3ef 8305 	mrs	r3, IPSR
 800986c:	60bb      	str	r3, [r7, #8]
  return(result);
 800986e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009870:	2b00      	cmp	r3, #0
 8009872:	d003      	beq.n	800987c <osDelay+0x1c>
    stat = osErrorISR;
 8009874:	f06f 0305 	mvn.w	r3, #5
 8009878:	60fb      	str	r3, [r7, #12]
 800987a:	e007      	b.n	800988c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800987c:	2300      	movs	r3, #0
 800987e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d002      	beq.n	800988c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 ff92 	bl	800a7b0 <vTaskDelay>
    }
  }

  return (stat);
 800988c:	68fb      	ldr	r3, [r7, #12]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
	...

08009898 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4a07      	ldr	r2, [pc, #28]	; (80098c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80098a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	4a06      	ldr	r2, [pc, #24]	; (80098c8 <vApplicationGetIdleTaskMemory+0x30>)
 80098ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2280      	movs	r2, #128	; 0x80
 80098b4:	601a      	str	r2, [r3, #0]
}
 80098b6:	bf00      	nop
 80098b8:	3714      	adds	r7, #20
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	200007f0 	.word	0x200007f0
 80098c8:	20000898 	.word	0x20000898

080098cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4a07      	ldr	r2, [pc, #28]	; (80098f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80098dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	4a06      	ldr	r2, [pc, #24]	; (80098fc <vApplicationGetTimerTaskMemory+0x30>)
 80098e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098ea:	601a      	str	r2, [r3, #0]
}
 80098ec:	bf00      	nop
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	20000a98 	.word	0x20000a98
 80098fc:	20000b40 	.word	0x20000b40

08009900 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f103 0208 	add.w	r2, r3, #8
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f04f 32ff 	mov.w	r2, #4294967295
 8009918:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f103 0208 	add.w	r2, r3, #8
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f103 0208 	add.w	r2, r3, #8
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800994e:	bf00      	nop
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800995a:	b480      	push	{r7}
 800995c:	b085      	sub	sp, #20
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	689a      	ldr	r2, [r3, #8]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	683a      	ldr	r2, [r7, #0]
 800997e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	601a      	str	r2, [r3, #0]
}
 8009996:	bf00      	nop
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099a2:	b480      	push	{r7}
 80099a4:	b085      	sub	sp, #20
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b8:	d103      	bne.n	80099c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	60fb      	str	r3, [r7, #12]
 80099c0:	e00c      	b.n	80099dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3308      	adds	r3, #8
 80099c6:	60fb      	str	r3, [r7, #12]
 80099c8:	e002      	b.n	80099d0 <vListInsert+0x2e>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	60fb      	str	r3, [r7, #12]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d2f6      	bcs.n	80099ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	683a      	ldr	r2, [r7, #0]
 80099f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	1c5a      	adds	r2, r3, #1
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	601a      	str	r2, [r3, #0]
}
 8009a08:	bf00      	nop
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	6892      	ldr	r2, [r2, #8]
 8009a2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	6852      	ldr	r2, [r2, #4]
 8009a34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d103      	bne.n	8009a48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	1e5a      	subs	r2, r3, #1
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10a      	bne.n	8009a92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a8e:	bf00      	nop
 8009a90:	e7fe      	b.n	8009a90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a92:	f002 f877 	bl	800bb84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a9e:	68f9      	ldr	r1, [r7, #12]
 8009aa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009aa2:	fb01 f303 	mul.w	r3, r1, r3
 8009aa6:	441a      	add	r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	68f9      	ldr	r1, [r7, #12]
 8009ac6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ac8:	fb01 f303 	mul.w	r3, r1, r3
 8009acc:	441a      	add	r2, r3
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	22ff      	movs	r2, #255	; 0xff
 8009ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	22ff      	movs	r2, #255	; 0xff
 8009ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d114      	bne.n	8009b12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d01a      	beq.n	8009b26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	3310      	adds	r3, #16
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 f929 	bl	800ad4c <xTaskRemoveFromEventList>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d012      	beq.n	8009b26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b00:	4b0c      	ldr	r3, [pc, #48]	; (8009b34 <xQueueGenericReset+0xcc>)
 8009b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	e009      	b.n	8009b26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3310      	adds	r3, #16
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff fef2 	bl	8009900 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3324      	adds	r3, #36	; 0x24
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7ff feed 	bl	8009900 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b26:	f002 f85d 	bl	800bbe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b2a:	2301      	movs	r3, #1
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	e000ed04 	.word	0xe000ed04

08009b38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08e      	sub	sp, #56	; 0x38
 8009b3c:	af02      	add	r7, sp, #8
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
 8009b44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10a      	bne.n	8009b62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b50:	f383 8811 	msr	BASEPRI, r3
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b5e:	bf00      	nop
 8009b60:	e7fe      	b.n	8009b60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10a      	bne.n	8009b7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <xQueueGenericCreateStatic+0x52>
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <xQueueGenericCreateStatic+0x56>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e000      	b.n	8009b90 <xQueueGenericCreateStatic+0x58>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10a      	bne.n	8009baa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	623b      	str	r3, [r7, #32]
}
 8009ba6:	bf00      	nop
 8009ba8:	e7fe      	b.n	8009ba8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d102      	bne.n	8009bb6 <xQueueGenericCreateStatic+0x7e>
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <xQueueGenericCreateStatic+0x82>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e000      	b.n	8009bbc <xQueueGenericCreateStatic+0x84>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	61fb      	str	r3, [r7, #28]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009bd6:	2350      	movs	r3, #80	; 0x50
 8009bd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	2b50      	cmp	r3, #80	; 0x50
 8009bde:	d00a      	beq.n	8009bf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	61bb      	str	r3, [r7, #24]
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009bf6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00d      	beq.n	8009c1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	4613      	mov	r3, r2
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	68b9      	ldr	r1, [r7, #8]
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f000 f805 	bl	8009c28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3730      	adds	r7, #48	; 0x30
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d103      	bne.n	8009c44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	e002      	b.n	8009c4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c56:	2101      	movs	r1, #1
 8009c58:	69b8      	ldr	r0, [r7, #24]
 8009c5a:	f7ff ff05 	bl	8009a68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	78fa      	ldrb	r2, [r7, #3]
 8009c62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009c66:	bf00      	nop
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
	...

08009c70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08e      	sub	sp, #56	; 0x38
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10a      	bne.n	8009ca2 <xQueueGenericSend+0x32>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c9e:	bf00      	nop
 8009ca0:	e7fe      	b.n	8009ca0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d103      	bne.n	8009cb0 <xQueueGenericSend+0x40>
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d101      	bne.n	8009cb4 <xQueueGenericSend+0x44>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e000      	b.n	8009cb6 <xQueueGenericSend+0x46>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10a      	bne.n	8009cd0 <xQueueGenericSend+0x60>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ccc:	bf00      	nop
 8009cce:	e7fe      	b.n	8009cce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d103      	bne.n	8009cde <xQueueGenericSend+0x6e>
 8009cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d101      	bne.n	8009ce2 <xQueueGenericSend+0x72>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e000      	b.n	8009ce4 <xQueueGenericSend+0x74>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10a      	bne.n	8009cfe <xQueueGenericSend+0x8e>
	__asm volatile
 8009ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	623b      	str	r3, [r7, #32]
}
 8009cfa:	bf00      	nop
 8009cfc:	e7fe      	b.n	8009cfc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cfe:	f001 f9e7 	bl	800b0d0 <xTaskGetSchedulerState>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d102      	bne.n	8009d0e <xQueueGenericSend+0x9e>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <xQueueGenericSend+0xa2>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e000      	b.n	8009d14 <xQueueGenericSend+0xa4>
 8009d12:	2300      	movs	r3, #0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <xQueueGenericSend+0xbe>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	61fb      	str	r3, [r7, #28]
}
 8009d2a:	bf00      	nop
 8009d2c:	e7fe      	b.n	8009d2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d2e:	f001 ff29 	bl	800bb84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d302      	bcc.n	8009d44 <xQueueGenericSend+0xd4>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d129      	bne.n	8009d98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	68b9      	ldr	r1, [r7, #8]
 8009d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d4a:	f000 fa0b 	bl	800a164 <prvCopyDataToQueue>
 8009d4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d010      	beq.n	8009d7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5a:	3324      	adds	r3, #36	; 0x24
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 fff5 	bl	800ad4c <xTaskRemoveFromEventList>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d013      	beq.n	8009d90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d68:	4b3f      	ldr	r3, [pc, #252]	; (8009e68 <xQueueGenericSend+0x1f8>)
 8009d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	e00a      	b.n	8009d90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d007      	beq.n	8009d90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d80:	4b39      	ldr	r3, [pc, #228]	; (8009e68 <xQueueGenericSend+0x1f8>)
 8009d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d86:	601a      	str	r2, [r3, #0]
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d90:	f001 ff28 	bl	800bbe4 <vPortExitCritical>
				return pdPASS;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e063      	b.n	8009e60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d103      	bne.n	8009da6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d9e:	f001 ff21 	bl	800bbe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009da2:	2300      	movs	r3, #0
 8009da4:	e05c      	b.n	8009e60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d106      	bne.n	8009dba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009dac:	f107 0314 	add.w	r3, r7, #20
 8009db0:	4618      	mov	r0, r3
 8009db2:	f001 f82f 	bl	800ae14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009db6:	2301      	movs	r3, #1
 8009db8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dba:	f001 ff13 	bl	800bbe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009dbe:	f000 fd9b 	bl	800a8f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dc2:	f001 fedf 	bl	800bb84 <vPortEnterCritical>
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dcc:	b25b      	sxtb	r3, r3
 8009dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd2:	d103      	bne.n	8009ddc <xQueueGenericSend+0x16c>
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009de2:	b25b      	sxtb	r3, r3
 8009de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de8:	d103      	bne.n	8009df2 <xQueueGenericSend+0x182>
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009df2:	f001 fef7 	bl	800bbe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009df6:	1d3a      	adds	r2, r7, #4
 8009df8:	f107 0314 	add.w	r3, r7, #20
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f001 f81e 	bl	800ae40 <xTaskCheckForTimeOut>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d124      	bne.n	8009e54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e0c:	f000 faa2 	bl	800a354 <prvIsQueueFull>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d018      	beq.n	8009e48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	3310      	adds	r3, #16
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 ff44 	bl	800acac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e26:	f000 fa2d 	bl	800a284 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e2a:	f000 fd73 	bl	800a914 <xTaskResumeAll>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f47f af7c 	bne.w	8009d2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e36:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <xQueueGenericSend+0x1f8>)
 8009e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	e772      	b.n	8009d2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e4a:	f000 fa1b 	bl	800a284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e4e:	f000 fd61 	bl	800a914 <xTaskResumeAll>
 8009e52:	e76c      	b.n	8009d2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e56:	f000 fa15 	bl	800a284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e5a:	f000 fd5b 	bl	800a914 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3738      	adds	r7, #56	; 0x38
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	e000ed04 	.word	0xe000ed04

08009e6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b090      	sub	sp, #64	; 0x40
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
 8009e78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10a      	bne.n	8009e9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d103      	bne.n	8009ea8 <xQueueGenericSendFromISR+0x3c>
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <xQueueGenericSendFromISR+0x40>
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e000      	b.n	8009eae <xQueueGenericSendFromISR+0x42>
 8009eac:	2300      	movs	r3, #0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10a      	bne.n	8009ec8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ec4:	bf00      	nop
 8009ec6:	e7fe      	b.n	8009ec6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d103      	bne.n	8009ed6 <xQueueGenericSendFromISR+0x6a>
 8009ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d101      	bne.n	8009eda <xQueueGenericSendFromISR+0x6e>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e000      	b.n	8009edc <xQueueGenericSendFromISR+0x70>
 8009eda:	2300      	movs	r3, #0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10a      	bne.n	8009ef6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	623b      	str	r3, [r7, #32]
}
 8009ef2:	bf00      	nop
 8009ef4:	e7fe      	b.n	8009ef4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ef6:	f001 ff27 	bl	800bd48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009efa:	f3ef 8211 	mrs	r2, BASEPRI
 8009efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	61fa      	str	r2, [r7, #28]
 8009f10:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d302      	bcc.n	8009f28 <xQueueGenericSendFromISR+0xbc>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d12f      	bne.n	8009f88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	68b9      	ldr	r1, [r7, #8]
 8009f3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f3e:	f000 f911 	bl	800a164 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4a:	d112      	bne.n	8009f72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d016      	beq.n	8009f82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	3324      	adds	r3, #36	; 0x24
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f000 fef7 	bl	800ad4c <xTaskRemoveFromEventList>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00e      	beq.n	8009f82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00b      	beq.n	8009f82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	e007      	b.n	8009f82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f76:	3301      	adds	r3, #1
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	b25a      	sxtb	r2, r3
 8009f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f82:	2301      	movs	r3, #1
 8009f84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009f86:	e001      	b.n	8009f8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f8e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3740      	adds	r7, #64	; 0x40
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
	...

08009fa4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08c      	sub	sp, #48	; 0x30
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10a      	bne.n	8009fd4 <xQueueReceive+0x30>
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	623b      	str	r3, [r7, #32]
}
 8009fd0:	bf00      	nop
 8009fd2:	e7fe      	b.n	8009fd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d103      	bne.n	8009fe2 <xQueueReceive+0x3e>
 8009fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d101      	bne.n	8009fe6 <xQueueReceive+0x42>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e000      	b.n	8009fe8 <xQueueReceive+0x44>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <xQueueReceive+0x5e>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	61fb      	str	r3, [r7, #28]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a002:	f001 f865 	bl	800b0d0 <xTaskGetSchedulerState>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d102      	bne.n	800a012 <xQueueReceive+0x6e>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d101      	bne.n	800a016 <xQueueReceive+0x72>
 800a012:	2301      	movs	r3, #1
 800a014:	e000      	b.n	800a018 <xQueueReceive+0x74>
 800a016:	2300      	movs	r3, #0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10a      	bne.n	800a032 <xQueueReceive+0x8e>
	__asm volatile
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	61bb      	str	r3, [r7, #24]
}
 800a02e:	bf00      	nop
 800a030:	e7fe      	b.n	800a030 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a032:	f001 fda7 	bl	800bb84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d01f      	beq.n	800a082 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a042:	68b9      	ldr	r1, [r7, #8]
 800a044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a046:	f000 f8f7 	bl	800a238 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	1e5a      	subs	r2, r3, #1
 800a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a050:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00f      	beq.n	800a07a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05c:	3310      	adds	r3, #16
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 fe74 	bl	800ad4c <xTaskRemoveFromEventList>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d007      	beq.n	800a07a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a06a:	4b3d      	ldr	r3, [pc, #244]	; (800a160 <xQueueReceive+0x1bc>)
 800a06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a070:	601a      	str	r2, [r3, #0]
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a07a:	f001 fdb3 	bl	800bbe4 <vPortExitCritical>
				return pdPASS;
 800a07e:	2301      	movs	r3, #1
 800a080:	e069      	b.n	800a156 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d103      	bne.n	800a090 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a088:	f001 fdac 	bl	800bbe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a08c:	2300      	movs	r3, #0
 800a08e:	e062      	b.n	800a156 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a092:	2b00      	cmp	r3, #0
 800a094:	d106      	bne.n	800a0a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a096:	f107 0310 	add.w	r3, r7, #16
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 feba 	bl	800ae14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0a4:	f001 fd9e 	bl	800bbe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0a8:	f000 fc26 	bl	800a8f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0ac:	f001 fd6a 	bl	800bb84 <vPortEnterCritical>
 800a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0b6:	b25b      	sxtb	r3, r3
 800a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0bc:	d103      	bne.n	800a0c6 <xQueueReceive+0x122>
 800a0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0cc:	b25b      	sxtb	r3, r3
 800a0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d2:	d103      	bne.n	800a0dc <xQueueReceive+0x138>
 800a0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0dc:	f001 fd82 	bl	800bbe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0e0:	1d3a      	adds	r2, r7, #4
 800a0e2:	f107 0310 	add.w	r3, r7, #16
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 fea9 	bl	800ae40 <xTaskCheckForTimeOut>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d123      	bne.n	800a13c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0f6:	f000 f917 	bl	800a328 <prvIsQueueEmpty>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d017      	beq.n	800a130 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	3324      	adds	r3, #36	; 0x24
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	4611      	mov	r1, r2
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 fdcf 	bl	800acac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a110:	f000 f8b8 	bl	800a284 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a114:	f000 fbfe 	bl	800a914 <xTaskResumeAll>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d189      	bne.n	800a032 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a11e:	4b10      	ldr	r3, [pc, #64]	; (800a160 <xQueueReceive+0x1bc>)
 800a120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	e780      	b.n	800a032 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a132:	f000 f8a7 	bl	800a284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a136:	f000 fbed 	bl	800a914 <xTaskResumeAll>
 800a13a:	e77a      	b.n	800a032 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a13c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a13e:	f000 f8a1 	bl	800a284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a142:	f000 fbe7 	bl	800a914 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a148:	f000 f8ee 	bl	800a328 <prvIsQueueEmpty>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f43f af6f 	beq.w	800a032 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a154:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a156:	4618      	mov	r0, r3
 800a158:	3730      	adds	r7, #48	; 0x30
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	e000ed04 	.word	0xe000ed04

0800a164 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b086      	sub	sp, #24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a170:	2300      	movs	r3, #0
 800a172:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a178:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10d      	bne.n	800a19e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d14d      	bne.n	800a226 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 ffbc 	bl	800b10c <xTaskPriorityDisinherit>
 800a194:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	609a      	str	r2, [r3, #8]
 800a19c:	e043      	b.n	800a226 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d119      	bne.n	800a1d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6858      	ldr	r0, [r3, #4]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	68b9      	ldr	r1, [r7, #8]
 800a1b0:	f002 f89e 	bl	800c2f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1bc:	441a      	add	r2, r3
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d32b      	bcc.n	800a226 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	605a      	str	r2, [r3, #4]
 800a1d6:	e026      	b.n	800a226 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	68d8      	ldr	r0, [r3, #12]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	68b9      	ldr	r1, [r7, #8]
 800a1e4:	f002 f884 	bl	800c2f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	68da      	ldr	r2, [r3, #12]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f0:	425b      	negs	r3, r3
 800a1f2:	441a      	add	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	68da      	ldr	r2, [r3, #12]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	429a      	cmp	r2, r3
 800a202:	d207      	bcs.n	800a214 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20c:	425b      	negs	r3, r3
 800a20e:	441a      	add	r2, r3
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b02      	cmp	r3, #2
 800a218:	d105      	bne.n	800a226 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	3b01      	subs	r3, #1
 800a224:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	1c5a      	adds	r2, r3, #1
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a22e:	697b      	ldr	r3, [r7, #20]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a246:	2b00      	cmp	r3, #0
 800a248:	d018      	beq.n	800a27c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68da      	ldr	r2, [r3, #12]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a252:	441a      	add	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	68da      	ldr	r2, [r3, #12]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	429a      	cmp	r2, r3
 800a262:	d303      	bcc.n	800a26c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	68d9      	ldr	r1, [r3, #12]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a274:	461a      	mov	r2, r3
 800a276:	6838      	ldr	r0, [r7, #0]
 800a278:	f002 f83a 	bl	800c2f0 <memcpy>
	}
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a28c:	f001 fc7a 	bl	800bb84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a296:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a298:	e011      	b.n	800a2be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d012      	beq.n	800a2c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	3324      	adds	r3, #36	; 0x24
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fd50 	bl	800ad4c <xTaskRemoveFromEventList>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a2b2:	f000 fe27 	bl	800af04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a2b6:	7bfb      	ldrb	r3, [r7, #15]
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	dce9      	bgt.n	800a29a <prvUnlockQueue+0x16>
 800a2c6:	e000      	b.n	800a2ca <prvUnlockQueue+0x46>
					break;
 800a2c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	22ff      	movs	r2, #255	; 0xff
 800a2ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a2d2:	f001 fc87 	bl	800bbe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a2d6:	f001 fc55 	bl	800bb84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2e2:	e011      	b.n	800a308 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d012      	beq.n	800a312 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	3310      	adds	r3, #16
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 fd2b 	bl	800ad4c <xTaskRemoveFromEventList>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2fc:	f000 fe02 	bl	800af04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a300:	7bbb      	ldrb	r3, [r7, #14]
 800a302:	3b01      	subs	r3, #1
 800a304:	b2db      	uxtb	r3, r3
 800a306:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	dce9      	bgt.n	800a2e4 <prvUnlockQueue+0x60>
 800a310:	e000      	b.n	800a314 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a312:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	22ff      	movs	r2, #255	; 0xff
 800a318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a31c:	f001 fc62 	bl	800bbe4 <vPortExitCritical>
}
 800a320:	bf00      	nop
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a330:	f001 fc28 	bl	800bb84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d102      	bne.n	800a342 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a33c:	2301      	movs	r3, #1
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	e001      	b.n	800a346 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a342:	2300      	movs	r3, #0
 800a344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a346:	f001 fc4d 	bl	800bbe4 <vPortExitCritical>

	return xReturn;
 800a34a:	68fb      	ldr	r3, [r7, #12]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a35c:	f001 fc12 	bl	800bb84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a368:	429a      	cmp	r2, r3
 800a36a:	d102      	bne.n	800a372 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a36c:	2301      	movs	r3, #1
 800a36e:	60fb      	str	r3, [r7, #12]
 800a370:	e001      	b.n	800a376 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a372:	2300      	movs	r3, #0
 800a374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a376:	f001 fc35 	bl	800bbe4 <vPortExitCritical>

	return xReturn;
 800a37a:	68fb      	ldr	r3, [r7, #12]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a38e:	2300      	movs	r3, #0
 800a390:	60fb      	str	r3, [r7, #12]
 800a392:	e014      	b.n	800a3be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a394:	4a0f      	ldr	r2, [pc, #60]	; (800a3d4 <vQueueAddToRegistry+0x50>)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10b      	bne.n	800a3b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a3a0:	490c      	ldr	r1, [pc, #48]	; (800a3d4 <vQueueAddToRegistry+0x50>)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a3aa:	4a0a      	ldr	r2, [pc, #40]	; (800a3d4 <vQueueAddToRegistry+0x50>)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	00db      	lsls	r3, r3, #3
 800a3b0:	4413      	add	r3, r2
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a3b6:	e006      	b.n	800a3c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	60fb      	str	r3, [r7, #12]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2b07      	cmp	r3, #7
 800a3c2:	d9e7      	bls.n	800a394 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3c4:	bf00      	nop
 800a3c6:	bf00      	nop
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	20000f40 	.word	0x20000f40

0800a3d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3e8:	f001 fbcc 	bl	800bb84 <vPortEnterCritical>
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3f2:	b25b      	sxtb	r3, r3
 800a3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f8:	d103      	bne.n	800a402 <vQueueWaitForMessageRestricted+0x2a>
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a408:	b25b      	sxtb	r3, r3
 800a40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40e:	d103      	bne.n	800a418 <vQueueWaitForMessageRestricted+0x40>
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a418:	f001 fbe4 	bl	800bbe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a420:	2b00      	cmp	r3, #0
 800a422:	d106      	bne.n	800a432 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	3324      	adds	r3, #36	; 0x24
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 fc61 	bl	800acf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a432:	6978      	ldr	r0, [r7, #20]
 800a434:	f7ff ff26 	bl	800a284 <prvUnlockQueue>
	}
 800a438:	bf00      	nop
 800a43a:	3718      	adds	r7, #24
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a440:	b580      	push	{r7, lr}
 800a442:	b08e      	sub	sp, #56	; 0x38
 800a444:	af04      	add	r7, sp, #16
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10a      	bne.n	800a46a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	623b      	str	r3, [r7, #32]
}
 800a466:	bf00      	nop
 800a468:	e7fe      	b.n	800a468 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10a      	bne.n	800a486 <xTaskCreateStatic+0x46>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	61fb      	str	r3, [r7, #28]
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a486:	23a8      	movs	r3, #168	; 0xa8
 800a488:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	2ba8      	cmp	r3, #168	; 0xa8
 800a48e:	d00a      	beq.n	800a4a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	61bb      	str	r3, [r7, #24]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d01e      	beq.n	800a4ec <xTaskCreateStatic+0xac>
 800a4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d01b      	beq.n	800a4ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	9303      	str	r3, [sp, #12]
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	9302      	str	r3, [sp, #8]
 800a4ce:	f107 0314 	add.w	r3, r7, #20
 800a4d2:	9301      	str	r3, [sp, #4]
 800a4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	68b9      	ldr	r1, [r7, #8]
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 f850 	bl	800a584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4e6:	f000 f8f3 	bl	800a6d0 <prvAddNewTaskToReadyList>
 800a4ea:	e001      	b.n	800a4f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4f0:	697b      	ldr	r3, [r7, #20]
	}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3728      	adds	r7, #40	; 0x28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b08c      	sub	sp, #48	; 0x30
 800a4fe:	af04      	add	r7, sp, #16
 800a500:	60f8      	str	r0, [r7, #12]
 800a502:	60b9      	str	r1, [r7, #8]
 800a504:	603b      	str	r3, [r7, #0]
 800a506:	4613      	mov	r3, r2
 800a508:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a50a:	88fb      	ldrh	r3, [r7, #6]
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4618      	mov	r0, r3
 800a510:	f001 fc5a 	bl	800bdc8 <pvPortMalloc>
 800a514:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00e      	beq.n	800a53a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a51c:	20a8      	movs	r0, #168	; 0xa8
 800a51e:	f001 fc53 	bl	800bdc8 <pvPortMalloc>
 800a522:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d003      	beq.n	800a532 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	631a      	str	r2, [r3, #48]	; 0x30
 800a530:	e005      	b.n	800a53e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a532:	6978      	ldr	r0, [r7, #20]
 800a534:	f001 fd14 	bl	800bf60 <vPortFree>
 800a538:	e001      	b.n	800a53e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a53a:	2300      	movs	r3, #0
 800a53c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d017      	beq.n	800a574 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a54c:	88fa      	ldrh	r2, [r7, #6]
 800a54e:	2300      	movs	r3, #0
 800a550:	9303      	str	r3, [sp, #12]
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	9302      	str	r3, [sp, #8]
 800a556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	68b9      	ldr	r1, [r7, #8]
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f000 f80e 	bl	800a584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a568:	69f8      	ldr	r0, [r7, #28]
 800a56a:	f000 f8b1 	bl	800a6d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a56e:	2301      	movs	r3, #1
 800a570:	61bb      	str	r3, [r7, #24]
 800a572:	e002      	b.n	800a57a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a574:	f04f 33ff 	mov.w	r3, #4294967295
 800a578:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a57a:	69bb      	ldr	r3, [r7, #24]
	}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3720      	adds	r7, #32
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b088      	sub	sp, #32
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
 800a590:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a594:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	461a      	mov	r2, r3
 800a59c:	21a5      	movs	r1, #165	; 0xa5
 800a59e:	f001 fe1d 	bl	800c1dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	f023 0307 	bic.w	r3, r3, #7
 800a5ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	f003 0307 	and.w	r3, r3, #7
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00a      	beq.n	800a5dc <prvInitialiseNewTask+0x58>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	617b      	str	r3, [r7, #20]
}
 800a5d8:	bf00      	nop
 800a5da:	e7fe      	b.n	800a5da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d01f      	beq.n	800a622 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	61fb      	str	r3, [r7, #28]
 800a5e6:	e012      	b.n	800a60e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	7819      	ldrb	r1, [r3, #0]
 800a5f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	3334      	adds	r3, #52	; 0x34
 800a5f8:	460a      	mov	r2, r1
 800a5fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	4413      	add	r3, r2
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d006      	beq.n	800a616 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	3301      	adds	r3, #1
 800a60c:	61fb      	str	r3, [r7, #28]
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	2b0f      	cmp	r3, #15
 800a612:	d9e9      	bls.n	800a5e8 <prvInitialiseNewTask+0x64>
 800a614:	e000      	b.n	800a618 <prvInitialiseNewTask+0x94>
			{
				break;
 800a616:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a620:	e003      	b.n	800a62a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a624:	2200      	movs	r2, #0
 800a626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	2b37      	cmp	r3, #55	; 0x37
 800a62e:	d901      	bls.n	800a634 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a630:	2337      	movs	r3, #55	; 0x37
 800a632:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a638:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a63e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a642:	2200      	movs	r2, #0
 800a644:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	3304      	adds	r3, #4
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff f978 	bl	8009940 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	3318      	adds	r3, #24
 800a654:	4618      	mov	r0, r3
 800a656:	f7ff f973 	bl	8009940 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a65e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a662:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a66e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a672:	2200      	movs	r2, #0
 800a674:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a682:	3354      	adds	r3, #84	; 0x54
 800a684:	224c      	movs	r2, #76	; 0x4c
 800a686:	2100      	movs	r1, #0
 800a688:	4618      	mov	r0, r3
 800a68a:	f001 fda7 	bl	800c1dc <memset>
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	4a0c      	ldr	r2, [pc, #48]	; (800a6c4 <prvInitialiseNewTask+0x140>)
 800a692:	659a      	str	r2, [r3, #88]	; 0x58
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	4a0c      	ldr	r2, [pc, #48]	; (800a6c8 <prvInitialiseNewTask+0x144>)
 800a698:	65da      	str	r2, [r3, #92]	; 0x5c
 800a69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69c:	4a0b      	ldr	r2, [pc, #44]	; (800a6cc <prvInitialiseNewTask+0x148>)
 800a69e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	68f9      	ldr	r1, [r7, #12]
 800a6a4:	69b8      	ldr	r0, [r7, #24]
 800a6a6:	f001 f941 	bl	800b92c <pxPortInitialiseStack>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d002      	beq.n	800a6bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6bc:	bf00      	nop
 800a6be:	3720      	adds	r7, #32
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	200051d4 	.word	0x200051d4
 800a6c8:	2000523c 	.word	0x2000523c
 800a6cc:	200052a4 	.word	0x200052a4

0800a6d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6d8:	f001 fa54 	bl	800bb84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6dc:	4b2d      	ldr	r3, [pc, #180]	; (800a794 <prvAddNewTaskToReadyList+0xc4>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	4a2c      	ldr	r2, [pc, #176]	; (800a794 <prvAddNewTaskToReadyList+0xc4>)
 800a6e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6e6:	4b2c      	ldr	r3, [pc, #176]	; (800a798 <prvAddNewTaskToReadyList+0xc8>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d109      	bne.n	800a702 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6ee:	4a2a      	ldr	r2, [pc, #168]	; (800a798 <prvAddNewTaskToReadyList+0xc8>)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6f4:	4b27      	ldr	r3, [pc, #156]	; (800a794 <prvAddNewTaskToReadyList+0xc4>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d110      	bne.n	800a71e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6fc:	f000 fc26 	bl	800af4c <prvInitialiseTaskLists>
 800a700:	e00d      	b.n	800a71e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a702:	4b26      	ldr	r3, [pc, #152]	; (800a79c <prvAddNewTaskToReadyList+0xcc>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d109      	bne.n	800a71e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a70a:	4b23      	ldr	r3, [pc, #140]	; (800a798 <prvAddNewTaskToReadyList+0xc8>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a714:	429a      	cmp	r2, r3
 800a716:	d802      	bhi.n	800a71e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a718:	4a1f      	ldr	r2, [pc, #124]	; (800a798 <prvAddNewTaskToReadyList+0xc8>)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a71e:	4b20      	ldr	r3, [pc, #128]	; (800a7a0 <prvAddNewTaskToReadyList+0xd0>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3301      	adds	r3, #1
 800a724:	4a1e      	ldr	r2, [pc, #120]	; (800a7a0 <prvAddNewTaskToReadyList+0xd0>)
 800a726:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a728:	4b1d      	ldr	r3, [pc, #116]	; (800a7a0 <prvAddNewTaskToReadyList+0xd0>)
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a734:	4b1b      	ldr	r3, [pc, #108]	; (800a7a4 <prvAddNewTaskToReadyList+0xd4>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d903      	bls.n	800a744 <prvAddNewTaskToReadyList+0x74>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a740:	4a18      	ldr	r2, [pc, #96]	; (800a7a4 <prvAddNewTaskToReadyList+0xd4>)
 800a742:	6013      	str	r3, [r2, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a748:	4613      	mov	r3, r2
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	4413      	add	r3, r2
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	4a15      	ldr	r2, [pc, #84]	; (800a7a8 <prvAddNewTaskToReadyList+0xd8>)
 800a752:	441a      	add	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	3304      	adds	r3, #4
 800a758:	4619      	mov	r1, r3
 800a75a:	4610      	mov	r0, r2
 800a75c:	f7ff f8fd 	bl	800995a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a760:	f001 fa40 	bl	800bbe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a764:	4b0d      	ldr	r3, [pc, #52]	; (800a79c <prvAddNewTaskToReadyList+0xcc>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00e      	beq.n	800a78a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a76c:	4b0a      	ldr	r3, [pc, #40]	; (800a798 <prvAddNewTaskToReadyList+0xc8>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a776:	429a      	cmp	r2, r3
 800a778:	d207      	bcs.n	800a78a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a77a:	4b0c      	ldr	r3, [pc, #48]	; (800a7ac <prvAddNewTaskToReadyList+0xdc>)
 800a77c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a780:	601a      	str	r2, [r3, #0]
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a78a:	bf00      	nop
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	20001454 	.word	0x20001454
 800a798:	20000f80 	.word	0x20000f80
 800a79c:	20001460 	.word	0x20001460
 800a7a0:	20001470 	.word	0x20001470
 800a7a4:	2000145c 	.word	0x2000145c
 800a7a8:	20000f84 	.word	0x20000f84
 800a7ac:	e000ed04 	.word	0xe000ed04

0800a7b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d017      	beq.n	800a7f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a7c2:	4b13      	ldr	r3, [pc, #76]	; (800a810 <vTaskDelay+0x60>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00a      	beq.n	800a7e0 <vTaskDelay+0x30>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	60bb      	str	r3, [r7, #8]
}
 800a7dc:	bf00      	nop
 800a7de:	e7fe      	b.n	800a7de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7e0:	f000 f88a 	bl	800a8f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fcfe 	bl	800b1e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7ec:	f000 f892 	bl	800a914 <xTaskResumeAll>
 800a7f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d107      	bne.n	800a808 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7f8:	4b06      	ldr	r3, [pc, #24]	; (800a814 <vTaskDelay+0x64>)
 800a7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a808:	bf00      	nop
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	2000147c 	.word	0x2000147c
 800a814:	e000ed04 	.word	0xe000ed04

0800a818 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b08a      	sub	sp, #40	; 0x28
 800a81c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a81e:	2300      	movs	r3, #0
 800a820:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a822:	2300      	movs	r3, #0
 800a824:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a826:	463a      	mov	r2, r7
 800a828:	1d39      	adds	r1, r7, #4
 800a82a:	f107 0308 	add.w	r3, r7, #8
 800a82e:	4618      	mov	r0, r3
 800a830:	f7ff f832 	bl	8009898 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a834:	6839      	ldr	r1, [r7, #0]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	68ba      	ldr	r2, [r7, #8]
 800a83a:	9202      	str	r2, [sp, #8]
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	2300      	movs	r3, #0
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	2300      	movs	r3, #0
 800a844:	460a      	mov	r2, r1
 800a846:	4924      	ldr	r1, [pc, #144]	; (800a8d8 <vTaskStartScheduler+0xc0>)
 800a848:	4824      	ldr	r0, [pc, #144]	; (800a8dc <vTaskStartScheduler+0xc4>)
 800a84a:	f7ff fdf9 	bl	800a440 <xTaskCreateStatic>
 800a84e:	4603      	mov	r3, r0
 800a850:	4a23      	ldr	r2, [pc, #140]	; (800a8e0 <vTaskStartScheduler+0xc8>)
 800a852:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a854:	4b22      	ldr	r3, [pc, #136]	; (800a8e0 <vTaskStartScheduler+0xc8>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a85c:	2301      	movs	r3, #1
 800a85e:	617b      	str	r3, [r7, #20]
 800a860:	e001      	b.n	800a866 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a862:	2300      	movs	r3, #0
 800a864:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d102      	bne.n	800a872 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a86c:	f000 fd10 	bl	800b290 <xTimerCreateTimerTask>
 800a870:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d11b      	bne.n	800a8b0 <vTaskStartScheduler+0x98>
	__asm volatile
 800a878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87c:	f383 8811 	msr	BASEPRI, r3
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	613b      	str	r3, [r7, #16]
}
 800a88a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a88c:	4b15      	ldr	r3, [pc, #84]	; (800a8e4 <vTaskStartScheduler+0xcc>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	3354      	adds	r3, #84	; 0x54
 800a892:	4a15      	ldr	r2, [pc, #84]	; (800a8e8 <vTaskStartScheduler+0xd0>)
 800a894:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a896:	4b15      	ldr	r3, [pc, #84]	; (800a8ec <vTaskStartScheduler+0xd4>)
 800a898:	f04f 32ff 	mov.w	r2, #4294967295
 800a89c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a89e:	4b14      	ldr	r3, [pc, #80]	; (800a8f0 <vTaskStartScheduler+0xd8>)
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a8a4:	4b13      	ldr	r3, [pc, #76]	; (800a8f4 <vTaskStartScheduler+0xdc>)
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8aa:	f001 f8c9 	bl	800ba40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a8ae:	e00e      	b.n	800a8ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b6:	d10a      	bne.n	800a8ce <vTaskStartScheduler+0xb6>
	__asm volatile
 800a8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	60fb      	str	r3, [r7, #12]
}
 800a8ca:	bf00      	nop
 800a8cc:	e7fe      	b.n	800a8cc <vTaskStartScheduler+0xb4>
}
 800a8ce:	bf00      	nop
 800a8d0:	3718      	adds	r7, #24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	0800db38 	.word	0x0800db38
 800a8dc:	0800af1d 	.word	0x0800af1d
 800a8e0:	20001478 	.word	0x20001478
 800a8e4:	20000f80 	.word	0x20000f80
 800a8e8:	20000064 	.word	0x20000064
 800a8ec:	20001474 	.word	0x20001474
 800a8f0:	20001460 	.word	0x20001460
 800a8f4:	20001458 	.word	0x20001458

0800a8f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8fc:	4b04      	ldr	r3, [pc, #16]	; (800a910 <vTaskSuspendAll+0x18>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3301      	adds	r3, #1
 800a902:	4a03      	ldr	r2, [pc, #12]	; (800a910 <vTaskSuspendAll+0x18>)
 800a904:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a906:	bf00      	nop
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	2000147c 	.word	0x2000147c

0800a914 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a91e:	2300      	movs	r3, #0
 800a920:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a922:	4b42      	ldr	r3, [pc, #264]	; (800aa2c <xTaskResumeAll+0x118>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10a      	bne.n	800a940 <xTaskResumeAll+0x2c>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	603b      	str	r3, [r7, #0]
}
 800a93c:	bf00      	nop
 800a93e:	e7fe      	b.n	800a93e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a940:	f001 f920 	bl	800bb84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a944:	4b39      	ldr	r3, [pc, #228]	; (800aa2c <xTaskResumeAll+0x118>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	3b01      	subs	r3, #1
 800a94a:	4a38      	ldr	r2, [pc, #224]	; (800aa2c <xTaskResumeAll+0x118>)
 800a94c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a94e:	4b37      	ldr	r3, [pc, #220]	; (800aa2c <xTaskResumeAll+0x118>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d162      	bne.n	800aa1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a956:	4b36      	ldr	r3, [pc, #216]	; (800aa30 <xTaskResumeAll+0x11c>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d05e      	beq.n	800aa1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a95e:	e02f      	b.n	800a9c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a960:	4b34      	ldr	r3, [pc, #208]	; (800aa34 <xTaskResumeAll+0x120>)
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	3318      	adds	r3, #24
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7ff f851 	bl	8009a14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3304      	adds	r3, #4
 800a976:	4618      	mov	r0, r3
 800a978:	f7ff f84c 	bl	8009a14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a980:	4b2d      	ldr	r3, [pc, #180]	; (800aa38 <xTaskResumeAll+0x124>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	429a      	cmp	r2, r3
 800a986:	d903      	bls.n	800a990 <xTaskResumeAll+0x7c>
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98c:	4a2a      	ldr	r2, [pc, #168]	; (800aa38 <xTaskResumeAll+0x124>)
 800a98e:	6013      	str	r3, [r2, #0]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a994:	4613      	mov	r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4a27      	ldr	r2, [pc, #156]	; (800aa3c <xTaskResumeAll+0x128>)
 800a99e:	441a      	add	r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	f7fe ffd7 	bl	800995a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b0:	4b23      	ldr	r3, [pc, #140]	; (800aa40 <xTaskResumeAll+0x12c>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d302      	bcc.n	800a9c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a9ba:	4b22      	ldr	r3, [pc, #136]	; (800aa44 <xTaskResumeAll+0x130>)
 800a9bc:	2201      	movs	r2, #1
 800a9be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9c0:	4b1c      	ldr	r3, [pc, #112]	; (800aa34 <xTaskResumeAll+0x120>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1cb      	bne.n	800a960 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9ce:	f000 fb5f 	bl	800b090 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a9d2:	4b1d      	ldr	r3, [pc, #116]	; (800aa48 <xTaskResumeAll+0x134>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d010      	beq.n	800aa00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9de:	f000 f847 	bl	800aa70 <xTaskIncrementTick>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a9e8:	4b16      	ldr	r3, [pc, #88]	; (800aa44 <xTaskResumeAll+0x130>)
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1f1      	bne.n	800a9de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a9fa:	4b13      	ldr	r3, [pc, #76]	; (800aa48 <xTaskResumeAll+0x134>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa00:	4b10      	ldr	r3, [pc, #64]	; (800aa44 <xTaskResumeAll+0x130>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d009      	beq.n	800aa1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa0c:	4b0f      	ldr	r3, [pc, #60]	; (800aa4c <xTaskResumeAll+0x138>)
 800aa0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa1c:	f001 f8e2 	bl	800bbe4 <vPortExitCritical>

	return xAlreadyYielded;
 800aa20:	68bb      	ldr	r3, [r7, #8]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	2000147c 	.word	0x2000147c
 800aa30:	20001454 	.word	0x20001454
 800aa34:	20001414 	.word	0x20001414
 800aa38:	2000145c 	.word	0x2000145c
 800aa3c:	20000f84 	.word	0x20000f84
 800aa40:	20000f80 	.word	0x20000f80
 800aa44:	20001468 	.word	0x20001468
 800aa48:	20001464 	.word	0x20001464
 800aa4c:	e000ed04 	.word	0xe000ed04

0800aa50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa56:	4b05      	ldr	r3, [pc, #20]	; (800aa6c <xTaskGetTickCount+0x1c>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa5c:	687b      	ldr	r3, [r7, #4]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	20001458 	.word	0x20001458

0800aa70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa76:	2300      	movs	r3, #0
 800aa78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa7a:	4b4f      	ldr	r3, [pc, #316]	; (800abb8 <xTaskIncrementTick+0x148>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f040 808f 	bne.w	800aba2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa84:	4b4d      	ldr	r3, [pc, #308]	; (800abbc <xTaskIncrementTick+0x14c>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa8c:	4a4b      	ldr	r2, [pc, #300]	; (800abbc <xTaskIncrementTick+0x14c>)
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d120      	bne.n	800aada <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa98:	4b49      	ldr	r3, [pc, #292]	; (800abc0 <xTaskIncrementTick+0x150>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00a      	beq.n	800aab8 <xTaskIncrementTick+0x48>
	__asm volatile
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	603b      	str	r3, [r7, #0]
}
 800aab4:	bf00      	nop
 800aab6:	e7fe      	b.n	800aab6 <xTaskIncrementTick+0x46>
 800aab8:	4b41      	ldr	r3, [pc, #260]	; (800abc0 <xTaskIncrementTick+0x150>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	60fb      	str	r3, [r7, #12]
 800aabe:	4b41      	ldr	r3, [pc, #260]	; (800abc4 <xTaskIncrementTick+0x154>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a3f      	ldr	r2, [pc, #252]	; (800abc0 <xTaskIncrementTick+0x150>)
 800aac4:	6013      	str	r3, [r2, #0]
 800aac6:	4a3f      	ldr	r2, [pc, #252]	; (800abc4 <xTaskIncrementTick+0x154>)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6013      	str	r3, [r2, #0]
 800aacc:	4b3e      	ldr	r3, [pc, #248]	; (800abc8 <xTaskIncrementTick+0x158>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	3301      	adds	r3, #1
 800aad2:	4a3d      	ldr	r2, [pc, #244]	; (800abc8 <xTaskIncrementTick+0x158>)
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	f000 fadb 	bl	800b090 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aada:	4b3c      	ldr	r3, [pc, #240]	; (800abcc <xTaskIncrementTick+0x15c>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d349      	bcc.n	800ab78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aae4:	4b36      	ldr	r3, [pc, #216]	; (800abc0 <xTaskIncrementTick+0x150>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d104      	bne.n	800aaf8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaee:	4b37      	ldr	r3, [pc, #220]	; (800abcc <xTaskIncrementTick+0x15c>)
 800aaf0:	f04f 32ff 	mov.w	r2, #4294967295
 800aaf4:	601a      	str	r2, [r3, #0]
					break;
 800aaf6:	e03f      	b.n	800ab78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaf8:	4b31      	ldr	r3, [pc, #196]	; (800abc0 <xTaskIncrementTick+0x150>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d203      	bcs.n	800ab18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab10:	4a2e      	ldr	r2, [pc, #184]	; (800abcc <xTaskIncrementTick+0x15c>)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab16:	e02f      	b.n	800ab78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fe ff79 	bl	8009a14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d004      	beq.n	800ab34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	3318      	adds	r3, #24
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7fe ff70 	bl	8009a14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab38:	4b25      	ldr	r3, [pc, #148]	; (800abd0 <xTaskIncrementTick+0x160>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d903      	bls.n	800ab48 <xTaskIncrementTick+0xd8>
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab44:	4a22      	ldr	r2, [pc, #136]	; (800abd0 <xTaskIncrementTick+0x160>)
 800ab46:	6013      	str	r3, [r2, #0]
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	4413      	add	r3, r2
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4a1f      	ldr	r2, [pc, #124]	; (800abd4 <xTaskIncrementTick+0x164>)
 800ab56:	441a      	add	r2, r3
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	4610      	mov	r0, r2
 800ab60:	f7fe fefb 	bl	800995a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab68:	4b1b      	ldr	r3, [pc, #108]	; (800abd8 <xTaskIncrementTick+0x168>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d3b8      	bcc.n	800aae4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab72:	2301      	movs	r3, #1
 800ab74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab76:	e7b5      	b.n	800aae4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab78:	4b17      	ldr	r3, [pc, #92]	; (800abd8 <xTaskIncrementTick+0x168>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7e:	4915      	ldr	r1, [pc, #84]	; (800abd4 <xTaskIncrementTick+0x164>)
 800ab80:	4613      	mov	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	440b      	add	r3, r1
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d901      	bls.n	800ab94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab90:	2301      	movs	r3, #1
 800ab92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab94:	4b11      	ldr	r3, [pc, #68]	; (800abdc <xTaskIncrementTick+0x16c>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d007      	beq.n	800abac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	617b      	str	r3, [r7, #20]
 800aba0:	e004      	b.n	800abac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aba2:	4b0f      	ldr	r3, [pc, #60]	; (800abe0 <xTaskIncrementTick+0x170>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	3301      	adds	r3, #1
 800aba8:	4a0d      	ldr	r2, [pc, #52]	; (800abe0 <xTaskIncrementTick+0x170>)
 800abaa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800abac:	697b      	ldr	r3, [r7, #20]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3718      	adds	r7, #24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	2000147c 	.word	0x2000147c
 800abbc:	20001458 	.word	0x20001458
 800abc0:	2000140c 	.word	0x2000140c
 800abc4:	20001410 	.word	0x20001410
 800abc8:	2000146c 	.word	0x2000146c
 800abcc:	20001474 	.word	0x20001474
 800abd0:	2000145c 	.word	0x2000145c
 800abd4:	20000f84 	.word	0x20000f84
 800abd8:	20000f80 	.word	0x20000f80
 800abdc:	20001468 	.word	0x20001468
 800abe0:	20001464 	.word	0x20001464

0800abe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abea:	4b2a      	ldr	r3, [pc, #168]	; (800ac94 <vTaskSwitchContext+0xb0>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d003      	beq.n	800abfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abf2:	4b29      	ldr	r3, [pc, #164]	; (800ac98 <vTaskSwitchContext+0xb4>)
 800abf4:	2201      	movs	r2, #1
 800abf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abf8:	e046      	b.n	800ac88 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800abfa:	4b27      	ldr	r3, [pc, #156]	; (800ac98 <vTaskSwitchContext+0xb4>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac00:	4b26      	ldr	r3, [pc, #152]	; (800ac9c <vTaskSwitchContext+0xb8>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	e010      	b.n	800ac2a <vTaskSwitchContext+0x46>
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10a      	bne.n	800ac24 <vTaskSwitchContext+0x40>
	__asm volatile
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	f383 8811 	msr	BASEPRI, r3
 800ac16:	f3bf 8f6f 	isb	sy
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	607b      	str	r3, [r7, #4]
}
 800ac20:	bf00      	nop
 800ac22:	e7fe      	b.n	800ac22 <vTaskSwitchContext+0x3e>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3b01      	subs	r3, #1
 800ac28:	60fb      	str	r3, [r7, #12]
 800ac2a:	491d      	ldr	r1, [pc, #116]	; (800aca0 <vTaskSwitchContext+0xbc>)
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	440b      	add	r3, r1
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d0e4      	beq.n	800ac08 <vTaskSwitchContext+0x24>
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	4613      	mov	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4413      	add	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4a15      	ldr	r2, [pc, #84]	; (800aca0 <vTaskSwitchContext+0xbc>)
 800ac4a:	4413      	add	r3, r2
 800ac4c:	60bb      	str	r3, [r7, #8]
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	685a      	ldr	r2, [r3, #4]
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	605a      	str	r2, [r3, #4]
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	3308      	adds	r3, #8
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d104      	bne.n	800ac6e <vTaskSwitchContext+0x8a>
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	605a      	str	r2, [r3, #4]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	4a0b      	ldr	r2, [pc, #44]	; (800aca4 <vTaskSwitchContext+0xc0>)
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	4a08      	ldr	r2, [pc, #32]	; (800ac9c <vTaskSwitchContext+0xb8>)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac7e:	4b09      	ldr	r3, [pc, #36]	; (800aca4 <vTaskSwitchContext+0xc0>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3354      	adds	r3, #84	; 0x54
 800ac84:	4a08      	ldr	r2, [pc, #32]	; (800aca8 <vTaskSwitchContext+0xc4>)
 800ac86:	6013      	str	r3, [r2, #0]
}
 800ac88:	bf00      	nop
 800ac8a:	3714      	adds	r7, #20
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr
 800ac94:	2000147c 	.word	0x2000147c
 800ac98:	20001468 	.word	0x20001468
 800ac9c:	2000145c 	.word	0x2000145c
 800aca0:	20000f84 	.word	0x20000f84
 800aca4:	20000f80 	.word	0x20000f80
 800aca8:	20000064 	.word	0x20000064

0800acac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10a      	bne.n	800acd2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800acbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	60fb      	str	r3, [r7, #12]
}
 800acce:	bf00      	nop
 800acd0:	e7fe      	b.n	800acd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acd2:	4b07      	ldr	r3, [pc, #28]	; (800acf0 <vTaskPlaceOnEventList+0x44>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3318      	adds	r3, #24
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7fe fe61 	bl	80099a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ace0:	2101      	movs	r1, #1
 800ace2:	6838      	ldr	r0, [r7, #0]
 800ace4:	f000 fa80 	bl	800b1e8 <prvAddCurrentTaskToDelayedList>
}
 800ace8:	bf00      	nop
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	20000f80 	.word	0x20000f80

0800acf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10a      	bne.n	800ad1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	617b      	str	r3, [r7, #20]
}
 800ad18:	bf00      	nop
 800ad1a:	e7fe      	b.n	800ad1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad1c:	4b0a      	ldr	r3, [pc, #40]	; (800ad48 <vTaskPlaceOnEventListRestricted+0x54>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	3318      	adds	r3, #24
 800ad22:	4619      	mov	r1, r3
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f7fe fe18 	bl	800995a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ad30:	f04f 33ff 	mov.w	r3, #4294967295
 800ad34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad36:	6879      	ldr	r1, [r7, #4]
 800ad38:	68b8      	ldr	r0, [r7, #8]
 800ad3a:	f000 fa55 	bl	800b1e8 <prvAddCurrentTaskToDelayedList>
	}
 800ad3e:	bf00      	nop
 800ad40:	3718      	adds	r7, #24
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20000f80 	.word	0x20000f80

0800ad4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d10a      	bne.n	800ad78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	f383 8811 	msr	BASEPRI, r3
 800ad6a:	f3bf 8f6f 	isb	sy
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	60fb      	str	r3, [r7, #12]
}
 800ad74:	bf00      	nop
 800ad76:	e7fe      	b.n	800ad76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	3318      	adds	r3, #24
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fe fe49 	bl	8009a14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad82:	4b1e      	ldr	r3, [pc, #120]	; (800adfc <xTaskRemoveFromEventList+0xb0>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d11d      	bne.n	800adc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fe fe40 	bl	8009a14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad98:	4b19      	ldr	r3, [pc, #100]	; (800ae00 <xTaskRemoveFromEventList+0xb4>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d903      	bls.n	800ada8 <xTaskRemoveFromEventList+0x5c>
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada4:	4a16      	ldr	r2, [pc, #88]	; (800ae00 <xTaskRemoveFromEventList+0xb4>)
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adac:	4613      	mov	r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	4413      	add	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4a13      	ldr	r2, [pc, #76]	; (800ae04 <xTaskRemoveFromEventList+0xb8>)
 800adb6:	441a      	add	r2, r3
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	3304      	adds	r3, #4
 800adbc:	4619      	mov	r1, r3
 800adbe:	4610      	mov	r0, r2
 800adc0:	f7fe fdcb 	bl	800995a <vListInsertEnd>
 800adc4:	e005      	b.n	800add2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	3318      	adds	r3, #24
 800adca:	4619      	mov	r1, r3
 800adcc:	480e      	ldr	r0, [pc, #56]	; (800ae08 <xTaskRemoveFromEventList+0xbc>)
 800adce:	f7fe fdc4 	bl	800995a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add6:	4b0d      	ldr	r3, [pc, #52]	; (800ae0c <xTaskRemoveFromEventList+0xc0>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800addc:	429a      	cmp	r2, r3
 800adde:	d905      	bls.n	800adec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ade0:	2301      	movs	r3, #1
 800ade2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ade4:	4b0a      	ldr	r3, [pc, #40]	; (800ae10 <xTaskRemoveFromEventList+0xc4>)
 800ade6:	2201      	movs	r2, #1
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	e001      	b.n	800adf0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800adec:	2300      	movs	r3, #0
 800adee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800adf0:	697b      	ldr	r3, [r7, #20]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	2000147c 	.word	0x2000147c
 800ae00:	2000145c 	.word	0x2000145c
 800ae04:	20000f84 	.word	0x20000f84
 800ae08:	20001414 	.word	0x20001414
 800ae0c:	20000f80 	.word	0x20000f80
 800ae10:	20001468 	.word	0x20001468

0800ae14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae1c:	4b06      	ldr	r3, [pc, #24]	; (800ae38 <vTaskInternalSetTimeOutState+0x24>)
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae24:	4b05      	ldr	r3, [pc, #20]	; (800ae3c <vTaskInternalSetTimeOutState+0x28>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	605a      	str	r2, [r3, #4]
}
 800ae2c:	bf00      	nop
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr
 800ae38:	2000146c 	.word	0x2000146c
 800ae3c:	20001458 	.word	0x20001458

0800ae40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b088      	sub	sp, #32
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10a      	bne.n	800ae66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	613b      	str	r3, [r7, #16]
}
 800ae62:	bf00      	nop
 800ae64:	e7fe      	b.n	800ae64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10a      	bne.n	800ae82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae70:	f383 8811 	msr	BASEPRI, r3
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	60fb      	str	r3, [r7, #12]
}
 800ae7e:	bf00      	nop
 800ae80:	e7fe      	b.n	800ae80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ae82:	f000 fe7f 	bl	800bb84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae86:	4b1d      	ldr	r3, [pc, #116]	; (800aefc <xTaskCheckForTimeOut+0xbc>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	69ba      	ldr	r2, [r7, #24]
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae9e:	d102      	bne.n	800aea6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aea0:	2300      	movs	r3, #0
 800aea2:	61fb      	str	r3, [r7, #28]
 800aea4:	e023      	b.n	800aeee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	4b15      	ldr	r3, [pc, #84]	; (800af00 <xTaskCheckForTimeOut+0xc0>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d007      	beq.n	800aec2 <xTaskCheckForTimeOut+0x82>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	69ba      	ldr	r2, [r7, #24]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d302      	bcc.n	800aec2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aebc:	2301      	movs	r3, #1
 800aebe:	61fb      	str	r3, [r7, #28]
 800aec0:	e015      	b.n	800aeee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d20b      	bcs.n	800aee4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	1ad2      	subs	r2, r2, r3
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f7ff ff9b 	bl	800ae14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aede:	2300      	movs	r3, #0
 800aee0:	61fb      	str	r3, [r7, #28]
 800aee2:	e004      	b.n	800aeee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2200      	movs	r2, #0
 800aee8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aeea:	2301      	movs	r3, #1
 800aeec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aeee:	f000 fe79 	bl	800bbe4 <vPortExitCritical>

	return xReturn;
 800aef2:	69fb      	ldr	r3, [r7, #28]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3720      	adds	r7, #32
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	20001458 	.word	0x20001458
 800af00:	2000146c 	.word	0x2000146c

0800af04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af04:	b480      	push	{r7}
 800af06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af08:	4b03      	ldr	r3, [pc, #12]	; (800af18 <vTaskMissedYield+0x14>)
 800af0a:	2201      	movs	r2, #1
 800af0c:	601a      	str	r2, [r3, #0]
}
 800af0e:	bf00      	nop
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr
 800af18:	20001468 	.word	0x20001468

0800af1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af24:	f000 f852 	bl	800afcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af28:	4b06      	ldr	r3, [pc, #24]	; (800af44 <prvIdleTask+0x28>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d9f9      	bls.n	800af24 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af30:	4b05      	ldr	r3, [pc, #20]	; (800af48 <prvIdleTask+0x2c>)
 800af32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af40:	e7f0      	b.n	800af24 <prvIdleTask+0x8>
 800af42:	bf00      	nop
 800af44:	20000f84 	.word	0x20000f84
 800af48:	e000ed04 	.word	0xe000ed04

0800af4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af52:	2300      	movs	r3, #0
 800af54:	607b      	str	r3, [r7, #4]
 800af56:	e00c      	b.n	800af72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	4613      	mov	r3, r2
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	4413      	add	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4a12      	ldr	r2, [pc, #72]	; (800afac <prvInitialiseTaskLists+0x60>)
 800af64:	4413      	add	r3, r2
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe fcca 	bl	8009900 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	3301      	adds	r3, #1
 800af70:	607b      	str	r3, [r7, #4]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b37      	cmp	r3, #55	; 0x37
 800af76:	d9ef      	bls.n	800af58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af78:	480d      	ldr	r0, [pc, #52]	; (800afb0 <prvInitialiseTaskLists+0x64>)
 800af7a:	f7fe fcc1 	bl	8009900 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af7e:	480d      	ldr	r0, [pc, #52]	; (800afb4 <prvInitialiseTaskLists+0x68>)
 800af80:	f7fe fcbe 	bl	8009900 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af84:	480c      	ldr	r0, [pc, #48]	; (800afb8 <prvInitialiseTaskLists+0x6c>)
 800af86:	f7fe fcbb 	bl	8009900 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af8a:	480c      	ldr	r0, [pc, #48]	; (800afbc <prvInitialiseTaskLists+0x70>)
 800af8c:	f7fe fcb8 	bl	8009900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af90:	480b      	ldr	r0, [pc, #44]	; (800afc0 <prvInitialiseTaskLists+0x74>)
 800af92:	f7fe fcb5 	bl	8009900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af96:	4b0b      	ldr	r3, [pc, #44]	; (800afc4 <prvInitialiseTaskLists+0x78>)
 800af98:	4a05      	ldr	r2, [pc, #20]	; (800afb0 <prvInitialiseTaskLists+0x64>)
 800af9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af9c:	4b0a      	ldr	r3, [pc, #40]	; (800afc8 <prvInitialiseTaskLists+0x7c>)
 800af9e:	4a05      	ldr	r2, [pc, #20]	; (800afb4 <prvInitialiseTaskLists+0x68>)
 800afa0:	601a      	str	r2, [r3, #0]
}
 800afa2:	bf00      	nop
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	20000f84 	.word	0x20000f84
 800afb0:	200013e4 	.word	0x200013e4
 800afb4:	200013f8 	.word	0x200013f8
 800afb8:	20001414 	.word	0x20001414
 800afbc:	20001428 	.word	0x20001428
 800afc0:	20001440 	.word	0x20001440
 800afc4:	2000140c 	.word	0x2000140c
 800afc8:	20001410 	.word	0x20001410

0800afcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afd2:	e019      	b.n	800b008 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800afd4:	f000 fdd6 	bl	800bb84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afd8:	4b10      	ldr	r3, [pc, #64]	; (800b01c <prvCheckTasksWaitingTermination+0x50>)
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	3304      	adds	r3, #4
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7fe fd15 	bl	8009a14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800afea:	4b0d      	ldr	r3, [pc, #52]	; (800b020 <prvCheckTasksWaitingTermination+0x54>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3b01      	subs	r3, #1
 800aff0:	4a0b      	ldr	r2, [pc, #44]	; (800b020 <prvCheckTasksWaitingTermination+0x54>)
 800aff2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aff4:	4b0b      	ldr	r3, [pc, #44]	; (800b024 <prvCheckTasksWaitingTermination+0x58>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	3b01      	subs	r3, #1
 800affa:	4a0a      	ldr	r2, [pc, #40]	; (800b024 <prvCheckTasksWaitingTermination+0x58>)
 800affc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800affe:	f000 fdf1 	bl	800bbe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f810 	bl	800b028 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b008:	4b06      	ldr	r3, [pc, #24]	; (800b024 <prvCheckTasksWaitingTermination+0x58>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1e1      	bne.n	800afd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b010:	bf00      	nop
 800b012:	bf00      	nop
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	20001428 	.word	0x20001428
 800b020:	20001454 	.word	0x20001454
 800b024:	2000143c 	.word	0x2000143c

0800b028 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	3354      	adds	r3, #84	; 0x54
 800b034:	4618      	mov	r0, r3
 800b036:	f001 f8d9 	bl	800c1ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b040:	2b00      	cmp	r3, #0
 800b042:	d108      	bne.n	800b056 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b048:	4618      	mov	r0, r3
 800b04a:	f000 ff89 	bl	800bf60 <vPortFree>
				vPortFree( pxTCB );
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 ff86 	bl	800bf60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b054:	e018      	b.n	800b088 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d103      	bne.n	800b068 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 ff7d 	bl	800bf60 <vPortFree>
	}
 800b066:	e00f      	b.n	800b088 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d00a      	beq.n	800b088 <prvDeleteTCB+0x60>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	60fb      	str	r3, [r7, #12]
}
 800b084:	bf00      	nop
 800b086:	e7fe      	b.n	800b086 <prvDeleteTCB+0x5e>
	}
 800b088:	bf00      	nop
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b096:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <prvResetNextTaskUnblockTime+0x38>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d104      	bne.n	800b0aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0a0:	4b0a      	ldr	r3, [pc, #40]	; (800b0cc <prvResetNextTaskUnblockTime+0x3c>)
 800b0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0a8:	e008      	b.n	800b0bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0aa:	4b07      	ldr	r3, [pc, #28]	; (800b0c8 <prvResetNextTaskUnblockTime+0x38>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	4a04      	ldr	r2, [pc, #16]	; (800b0cc <prvResetNextTaskUnblockTime+0x3c>)
 800b0ba:	6013      	str	r3, [r2, #0]
}
 800b0bc:	bf00      	nop
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	2000140c 	.word	0x2000140c
 800b0cc:	20001474 	.word	0x20001474

0800b0d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0d6:	4b0b      	ldr	r3, [pc, #44]	; (800b104 <xTaskGetSchedulerState+0x34>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d102      	bne.n	800b0e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	607b      	str	r3, [r7, #4]
 800b0e2:	e008      	b.n	800b0f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0e4:	4b08      	ldr	r3, [pc, #32]	; (800b108 <xTaskGetSchedulerState+0x38>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d102      	bne.n	800b0f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	607b      	str	r3, [r7, #4]
 800b0f0:	e001      	b.n	800b0f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0f6:	687b      	ldr	r3, [r7, #4]
	}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	370c      	adds	r7, #12
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr
 800b104:	20001460 	.word	0x20001460
 800b108:	2000147c 	.word	0x2000147c

0800b10c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b086      	sub	sp, #24
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b118:	2300      	movs	r3, #0
 800b11a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d056      	beq.n	800b1d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b122:	4b2e      	ldr	r3, [pc, #184]	; (800b1dc <xTaskPriorityDisinherit+0xd0>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d00a      	beq.n	800b142 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b130:	f383 8811 	msr	BASEPRI, r3
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	f3bf 8f4f 	dsb	sy
 800b13c:	60fb      	str	r3, [r7, #12]
}
 800b13e:	bf00      	nop
 800b140:	e7fe      	b.n	800b140 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10a      	bne.n	800b160 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14e:	f383 8811 	msr	BASEPRI, r3
 800b152:	f3bf 8f6f 	isb	sy
 800b156:	f3bf 8f4f 	dsb	sy
 800b15a:	60bb      	str	r3, [r7, #8]
}
 800b15c:	bf00      	nop
 800b15e:	e7fe      	b.n	800b15e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b164:	1e5a      	subs	r2, r3, #1
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b172:	429a      	cmp	r2, r3
 800b174:	d02c      	beq.n	800b1d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d128      	bne.n	800b1d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	3304      	adds	r3, #4
 800b182:	4618      	mov	r0, r3
 800b184:	f7fe fc46 	bl	8009a14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b194:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a0:	4b0f      	ldr	r3, [pc, #60]	; (800b1e0 <xTaskPriorityDisinherit+0xd4>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d903      	bls.n	800b1b0 <xTaskPriorityDisinherit+0xa4>
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ac:	4a0c      	ldr	r2, [pc, #48]	; (800b1e0 <xTaskPriorityDisinherit+0xd4>)
 800b1ae:	6013      	str	r3, [r2, #0]
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	4413      	add	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4a09      	ldr	r2, [pc, #36]	; (800b1e4 <xTaskPriorityDisinherit+0xd8>)
 800b1be:	441a      	add	r2, r3
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	f7fe fbc7 	bl	800995a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1d0:	697b      	ldr	r3, [r7, #20]
	}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3718      	adds	r7, #24
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	20000f80 	.word	0x20000f80
 800b1e0:	2000145c 	.word	0x2000145c
 800b1e4:	20000f84 	.word	0x20000f84

0800b1e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b1f2:	4b21      	ldr	r3, [pc, #132]	; (800b278 <prvAddCurrentTaskToDelayedList+0x90>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1f8:	4b20      	ldr	r3, [pc, #128]	; (800b27c <prvAddCurrentTaskToDelayedList+0x94>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	3304      	adds	r3, #4
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fe fc08 	bl	8009a14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20a:	d10a      	bne.n	800b222 <prvAddCurrentTaskToDelayedList+0x3a>
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d007      	beq.n	800b222 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b212:	4b1a      	ldr	r3, [pc, #104]	; (800b27c <prvAddCurrentTaskToDelayedList+0x94>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3304      	adds	r3, #4
 800b218:	4619      	mov	r1, r3
 800b21a:	4819      	ldr	r0, [pc, #100]	; (800b280 <prvAddCurrentTaskToDelayedList+0x98>)
 800b21c:	f7fe fb9d 	bl	800995a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b220:	e026      	b.n	800b270 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b222:	68fa      	ldr	r2, [r7, #12]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4413      	add	r3, r2
 800b228:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b22a:	4b14      	ldr	r3, [pc, #80]	; (800b27c <prvAddCurrentTaskToDelayedList+0x94>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	429a      	cmp	r2, r3
 800b238:	d209      	bcs.n	800b24e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b23a:	4b12      	ldr	r3, [pc, #72]	; (800b284 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	4b0f      	ldr	r3, [pc, #60]	; (800b27c <prvAddCurrentTaskToDelayedList+0x94>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	3304      	adds	r3, #4
 800b244:	4619      	mov	r1, r3
 800b246:	4610      	mov	r0, r2
 800b248:	f7fe fbab 	bl	80099a2 <vListInsert>
}
 800b24c:	e010      	b.n	800b270 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b24e:	4b0e      	ldr	r3, [pc, #56]	; (800b288 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	4b0a      	ldr	r3, [pc, #40]	; (800b27c <prvAddCurrentTaskToDelayedList+0x94>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3304      	adds	r3, #4
 800b258:	4619      	mov	r1, r3
 800b25a:	4610      	mov	r0, r2
 800b25c:	f7fe fba1 	bl	80099a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b260:	4b0a      	ldr	r3, [pc, #40]	; (800b28c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	429a      	cmp	r2, r3
 800b268:	d202      	bcs.n	800b270 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b26a:	4a08      	ldr	r2, [pc, #32]	; (800b28c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	6013      	str	r3, [r2, #0]
}
 800b270:	bf00      	nop
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	20001458 	.word	0x20001458
 800b27c:	20000f80 	.word	0x20000f80
 800b280:	20001440 	.word	0x20001440
 800b284:	20001410 	.word	0x20001410
 800b288:	2000140c 	.word	0x2000140c
 800b28c:	20001474 	.word	0x20001474

0800b290 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b08a      	sub	sp, #40	; 0x28
 800b294:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b296:	2300      	movs	r3, #0
 800b298:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b29a:	f000 fb07 	bl	800b8ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b29e:	4b1c      	ldr	r3, [pc, #112]	; (800b310 <xTimerCreateTimerTask+0x80>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d021      	beq.n	800b2ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b2ae:	1d3a      	adds	r2, r7, #4
 800b2b0:	f107 0108 	add.w	r1, r7, #8
 800b2b4:	f107 030c 	add.w	r3, r7, #12
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fe fb07 	bl	80098cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b2be:	6879      	ldr	r1, [r7, #4]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	9202      	str	r2, [sp, #8]
 800b2c6:	9301      	str	r3, [sp, #4]
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	460a      	mov	r2, r1
 800b2d0:	4910      	ldr	r1, [pc, #64]	; (800b314 <xTimerCreateTimerTask+0x84>)
 800b2d2:	4811      	ldr	r0, [pc, #68]	; (800b318 <xTimerCreateTimerTask+0x88>)
 800b2d4:	f7ff f8b4 	bl	800a440 <xTaskCreateStatic>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	4a10      	ldr	r2, [pc, #64]	; (800b31c <xTimerCreateTimerTask+0x8c>)
 800b2dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b2de:	4b0f      	ldr	r3, [pc, #60]	; (800b31c <xTimerCreateTimerTask+0x8c>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d10a      	bne.n	800b306 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	613b      	str	r3, [r7, #16]
}
 800b302:	bf00      	nop
 800b304:	e7fe      	b.n	800b304 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b306:	697b      	ldr	r3, [r7, #20]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3718      	adds	r7, #24
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	200014b0 	.word	0x200014b0
 800b314:	0800db40 	.word	0x0800db40
 800b318:	0800b455 	.word	0x0800b455
 800b31c:	200014b4 	.word	0x200014b4

0800b320 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b08a      	sub	sp, #40	; 0x28
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	607a      	str	r2, [r7, #4]
 800b32c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b32e:	2300      	movs	r3, #0
 800b330:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d10a      	bne.n	800b34e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33c:	f383 8811 	msr	BASEPRI, r3
 800b340:	f3bf 8f6f 	isb	sy
 800b344:	f3bf 8f4f 	dsb	sy
 800b348:	623b      	str	r3, [r7, #32]
}
 800b34a:	bf00      	nop
 800b34c:	e7fe      	b.n	800b34c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b34e:	4b1a      	ldr	r3, [pc, #104]	; (800b3b8 <xTimerGenericCommand+0x98>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d02a      	beq.n	800b3ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	2b05      	cmp	r3, #5
 800b366:	dc18      	bgt.n	800b39a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b368:	f7ff feb2 	bl	800b0d0 <xTaskGetSchedulerState>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d109      	bne.n	800b386 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b372:	4b11      	ldr	r3, [pc, #68]	; (800b3b8 <xTimerGenericCommand+0x98>)
 800b374:	6818      	ldr	r0, [r3, #0]
 800b376:	f107 0110 	add.w	r1, r7, #16
 800b37a:	2300      	movs	r3, #0
 800b37c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b37e:	f7fe fc77 	bl	8009c70 <xQueueGenericSend>
 800b382:	6278      	str	r0, [r7, #36]	; 0x24
 800b384:	e012      	b.n	800b3ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b386:	4b0c      	ldr	r3, [pc, #48]	; (800b3b8 <xTimerGenericCommand+0x98>)
 800b388:	6818      	ldr	r0, [r3, #0]
 800b38a:	f107 0110 	add.w	r1, r7, #16
 800b38e:	2300      	movs	r3, #0
 800b390:	2200      	movs	r2, #0
 800b392:	f7fe fc6d 	bl	8009c70 <xQueueGenericSend>
 800b396:	6278      	str	r0, [r7, #36]	; 0x24
 800b398:	e008      	b.n	800b3ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b39a:	4b07      	ldr	r3, [pc, #28]	; (800b3b8 <xTimerGenericCommand+0x98>)
 800b39c:	6818      	ldr	r0, [r3, #0]
 800b39e:	f107 0110 	add.w	r1, r7, #16
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	f7fe fd61 	bl	8009e6c <xQueueGenericSendFromISR>
 800b3aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3728      	adds	r7, #40	; 0x28
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	200014b0 	.word	0x200014b0

0800b3bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b088      	sub	sp, #32
 800b3c0:	af02      	add	r7, sp, #8
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3c6:	4b22      	ldr	r3, [pc, #136]	; (800b450 <prvProcessExpiredTimer+0x94>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe fb1d 	bl	8009a14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3e0:	f003 0304 	and.w	r3, r3, #4
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d022      	beq.n	800b42e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	699a      	ldr	r2, [r3, #24]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	18d1      	adds	r1, r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	6978      	ldr	r0, [r7, #20]
 800b3f6:	f000 f8d1 	bl	800b59c <prvInsertTimerInActiveList>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d01f      	beq.n	800b440 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b400:	2300      	movs	r3, #0
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	2300      	movs	r3, #0
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	2100      	movs	r1, #0
 800b40a:	6978      	ldr	r0, [r7, #20]
 800b40c:	f7ff ff88 	bl	800b320 <xTimerGenericCommand>
 800b410:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d113      	bne.n	800b440 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41c:	f383 8811 	msr	BASEPRI, r3
 800b420:	f3bf 8f6f 	isb	sy
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	60fb      	str	r3, [r7, #12]
}
 800b42a:	bf00      	nop
 800b42c:	e7fe      	b.n	800b42c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b434:	f023 0301 	bic.w	r3, r3, #1
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	6a1b      	ldr	r3, [r3, #32]
 800b444:	6978      	ldr	r0, [r7, #20]
 800b446:	4798      	blx	r3
}
 800b448:	bf00      	nop
 800b44a:	3718      	adds	r7, #24
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	200014a8 	.word	0x200014a8

0800b454 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b45c:	f107 0308 	add.w	r3, r7, #8
 800b460:	4618      	mov	r0, r3
 800b462:	f000 f857 	bl	800b514 <prvGetNextExpireTime>
 800b466:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	4619      	mov	r1, r3
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f000 f803 	bl	800b478 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b472:	f000 f8d5 	bl	800b620 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b476:	e7f1      	b.n	800b45c <prvTimerTask+0x8>

0800b478 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b482:	f7ff fa39 	bl	800a8f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b486:	f107 0308 	add.w	r3, r7, #8
 800b48a:	4618      	mov	r0, r3
 800b48c:	f000 f866 	bl	800b55c <prvSampleTimeNow>
 800b490:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d130      	bne.n	800b4fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10a      	bne.n	800b4b4 <prvProcessTimerOrBlockTask+0x3c>
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d806      	bhi.n	800b4b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b4a6:	f7ff fa35 	bl	800a914 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b4aa:	68f9      	ldr	r1, [r7, #12]
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7ff ff85 	bl	800b3bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b4b2:	e024      	b.n	800b4fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d008      	beq.n	800b4cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b4ba:	4b13      	ldr	r3, [pc, #76]	; (800b508 <prvProcessTimerOrBlockTask+0x90>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d101      	bne.n	800b4c8 <prvProcessTimerOrBlockTask+0x50>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	e000      	b.n	800b4ca <prvProcessTimerOrBlockTask+0x52>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b4cc:	4b0f      	ldr	r3, [pc, #60]	; (800b50c <prvProcessTimerOrBlockTask+0x94>)
 800b4ce:	6818      	ldr	r0, [r3, #0]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	1ad3      	subs	r3, r2, r3
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	4619      	mov	r1, r3
 800b4da:	f7fe ff7d 	bl	800a3d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b4de:	f7ff fa19 	bl	800a914 <xTaskResumeAll>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d10a      	bne.n	800b4fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b4e8:	4b09      	ldr	r3, [pc, #36]	; (800b510 <prvProcessTimerOrBlockTask+0x98>)
 800b4ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ee:	601a      	str	r2, [r3, #0]
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	f3bf 8f6f 	isb	sy
}
 800b4f8:	e001      	b.n	800b4fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b4fa:	f7ff fa0b 	bl	800a914 <xTaskResumeAll>
}
 800b4fe:	bf00      	nop
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	200014ac 	.word	0x200014ac
 800b50c:	200014b0 	.word	0x200014b0
 800b510:	e000ed04 	.word	0xe000ed04

0800b514 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b51c:	4b0e      	ldr	r3, [pc, #56]	; (800b558 <prvGetNextExpireTime+0x44>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d101      	bne.n	800b52a <prvGetNextExpireTime+0x16>
 800b526:	2201      	movs	r2, #1
 800b528:	e000      	b.n	800b52c <prvGetNextExpireTime+0x18>
 800b52a:	2200      	movs	r2, #0
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d105      	bne.n	800b544 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b538:	4b07      	ldr	r3, [pc, #28]	; (800b558 <prvGetNextExpireTime+0x44>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	60fb      	str	r3, [r7, #12]
 800b542:	e001      	b.n	800b548 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b544:	2300      	movs	r3, #0
 800b546:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b548:	68fb      	ldr	r3, [r7, #12]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	200014a8 	.word	0x200014a8

0800b55c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b564:	f7ff fa74 	bl	800aa50 <xTaskGetTickCount>
 800b568:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b56a:	4b0b      	ldr	r3, [pc, #44]	; (800b598 <prvSampleTimeNow+0x3c>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	429a      	cmp	r2, r3
 800b572:	d205      	bcs.n	800b580 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b574:	f000 f936 	bl	800b7e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	e002      	b.n	800b586 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b586:	4a04      	ldr	r2, [pc, #16]	; (800b598 <prvSampleTimeNow+0x3c>)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b58c:	68fb      	ldr	r3, [r7, #12]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	200014b8 	.word	0x200014b8

0800b59c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b5ba:	68ba      	ldr	r2, [r7, #8]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d812      	bhi.n	800b5e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	1ad2      	subs	r2, r2, r3
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d302      	bcc.n	800b5d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	617b      	str	r3, [r7, #20]
 800b5d4:	e01b      	b.n	800b60e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b5d6:	4b10      	ldr	r3, [pc, #64]	; (800b618 <prvInsertTimerInActiveList+0x7c>)
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	3304      	adds	r3, #4
 800b5de:	4619      	mov	r1, r3
 800b5e0:	4610      	mov	r0, r2
 800b5e2:	f7fe f9de 	bl	80099a2 <vListInsert>
 800b5e6:	e012      	b.n	800b60e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d206      	bcs.n	800b5fe <prvInsertTimerInActiveList+0x62>
 800b5f0:	68ba      	ldr	r2, [r7, #8]
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d302      	bcc.n	800b5fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	617b      	str	r3, [r7, #20]
 800b5fc:	e007      	b.n	800b60e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5fe:	4b07      	ldr	r3, [pc, #28]	; (800b61c <prvInsertTimerInActiveList+0x80>)
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	3304      	adds	r3, #4
 800b606:	4619      	mov	r1, r3
 800b608:	4610      	mov	r0, r2
 800b60a:	f7fe f9ca 	bl	80099a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b60e:	697b      	ldr	r3, [r7, #20]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3718      	adds	r7, #24
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	200014ac 	.word	0x200014ac
 800b61c:	200014a8 	.word	0x200014a8

0800b620 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b08e      	sub	sp, #56	; 0x38
 800b624:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b626:	e0ca      	b.n	800b7be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	da18      	bge.n	800b660 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b62e:	1d3b      	adds	r3, r7, #4
 800b630:	3304      	adds	r3, #4
 800b632:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10a      	bne.n	800b650 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	61fb      	str	r3, [r7, #28]
}
 800b64c:	bf00      	nop
 800b64e:	e7fe      	b.n	800b64e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b656:	6850      	ldr	r0, [r2, #4]
 800b658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b65a:	6892      	ldr	r2, [r2, #8]
 800b65c:	4611      	mov	r1, r2
 800b65e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	f2c0 80ab 	blt.w	800b7be <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66e:	695b      	ldr	r3, [r3, #20]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d004      	beq.n	800b67e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b676:	3304      	adds	r3, #4
 800b678:	4618      	mov	r0, r3
 800b67a:	f7fe f9cb 	bl	8009a14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b67e:	463b      	mov	r3, r7
 800b680:	4618      	mov	r0, r3
 800b682:	f7ff ff6b 	bl	800b55c <prvSampleTimeNow>
 800b686:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2b09      	cmp	r3, #9
 800b68c:	f200 8096 	bhi.w	800b7bc <prvProcessReceivedCommands+0x19c>
 800b690:	a201      	add	r2, pc, #4	; (adr r2, 800b698 <prvProcessReceivedCommands+0x78>)
 800b692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b696:	bf00      	nop
 800b698:	0800b6c1 	.word	0x0800b6c1
 800b69c:	0800b6c1 	.word	0x0800b6c1
 800b6a0:	0800b6c1 	.word	0x0800b6c1
 800b6a4:	0800b735 	.word	0x0800b735
 800b6a8:	0800b749 	.word	0x0800b749
 800b6ac:	0800b793 	.word	0x0800b793
 800b6b0:	0800b6c1 	.word	0x0800b6c1
 800b6b4:	0800b6c1 	.word	0x0800b6c1
 800b6b8:	0800b735 	.word	0x0800b735
 800b6bc:	0800b749 	.word	0x0800b749
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6c6:	f043 0301 	orr.w	r3, r3, #1
 800b6ca:	b2da      	uxtb	r2, r3
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d6:	699b      	ldr	r3, [r3, #24]
 800b6d8:	18d1      	adds	r1, r2, r3
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6e0:	f7ff ff5c 	bl	800b59c <prvInsertTimerInActiveList>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d069      	beq.n	800b7be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ec:	6a1b      	ldr	r3, [r3, #32]
 800b6ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6f8:	f003 0304 	and.w	r3, r3, #4
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d05e      	beq.n	800b7be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b704:	699b      	ldr	r3, [r3, #24]
 800b706:	441a      	add	r2, r3
 800b708:	2300      	movs	r3, #0
 800b70a:	9300      	str	r3, [sp, #0]
 800b70c:	2300      	movs	r3, #0
 800b70e:	2100      	movs	r1, #0
 800b710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b712:	f7ff fe05 	bl	800b320 <xTimerGenericCommand>
 800b716:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b718:	6a3b      	ldr	r3, [r7, #32]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d14f      	bne.n	800b7be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	61bb      	str	r3, [r7, #24]
}
 800b730:	bf00      	nop
 800b732:	e7fe      	b.n	800b732 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b73a:	f023 0301 	bic.w	r3, r3, #1
 800b73e:	b2da      	uxtb	r2, r3
 800b740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b746:	e03a      	b.n	800b7be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b74e:	f043 0301 	orr.w	r3, r3, #1
 800b752:	b2da      	uxtb	r2, r3
 800b754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b75a:	68ba      	ldr	r2, [r7, #8]
 800b75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b762:	699b      	ldr	r3, [r3, #24]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10a      	bne.n	800b77e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76c:	f383 8811 	msr	BASEPRI, r3
 800b770:	f3bf 8f6f 	isb	sy
 800b774:	f3bf 8f4f 	dsb	sy
 800b778:	617b      	str	r3, [r7, #20]
}
 800b77a:	bf00      	nop
 800b77c:	e7fe      	b.n	800b77c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b780:	699a      	ldr	r2, [r3, #24]
 800b782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b784:	18d1      	adds	r1, r2, r3
 800b786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b78a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b78c:	f7ff ff06 	bl	800b59c <prvInsertTimerInActiveList>
					break;
 800b790:	e015      	b.n	800b7be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b798:	f003 0302 	and.w	r3, r3, #2
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d103      	bne.n	800b7a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7a2:	f000 fbdd 	bl	800bf60 <vPortFree>
 800b7a6:	e00a      	b.n	800b7be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7ae:	f023 0301 	bic.w	r3, r3, #1
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b7ba:	e000      	b.n	800b7be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b7bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7be:	4b08      	ldr	r3, [pc, #32]	; (800b7e0 <prvProcessReceivedCommands+0x1c0>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	1d39      	adds	r1, r7, #4
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fe fbec 	bl	8009fa4 <xQueueReceive>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f47f af2a 	bne.w	800b628 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b7d4:	bf00      	nop
 800b7d6:	bf00      	nop
 800b7d8:	3730      	adds	r7, #48	; 0x30
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	200014b0 	.word	0x200014b0

0800b7e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b088      	sub	sp, #32
 800b7e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7ea:	e048      	b.n	800b87e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7ec:	4b2d      	ldr	r3, [pc, #180]	; (800b8a4 <prvSwitchTimerLists+0xc0>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f6:	4b2b      	ldr	r3, [pc, #172]	; (800b8a4 <prvSwitchTimerLists+0xc0>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3304      	adds	r3, #4
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe f905 	bl	8009a14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b818:	f003 0304 	and.w	r3, r3, #4
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d02e      	beq.n	800b87e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	699b      	ldr	r3, [r3, #24]
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	4413      	add	r3, r2
 800b828:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b82a:	68ba      	ldr	r2, [r7, #8]
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d90e      	bls.n	800b850 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b83e:	4b19      	ldr	r3, [pc, #100]	; (800b8a4 <prvSwitchTimerLists+0xc0>)
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	3304      	adds	r3, #4
 800b846:	4619      	mov	r1, r3
 800b848:	4610      	mov	r0, r2
 800b84a:	f7fe f8aa 	bl	80099a2 <vListInsert>
 800b84e:	e016      	b.n	800b87e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b850:	2300      	movs	r3, #0
 800b852:	9300      	str	r3, [sp, #0]
 800b854:	2300      	movs	r3, #0
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	2100      	movs	r1, #0
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	f7ff fd60 	bl	800b320 <xTimerGenericCommand>
 800b860:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d10a      	bne.n	800b87e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86c:	f383 8811 	msr	BASEPRI, r3
 800b870:	f3bf 8f6f 	isb	sy
 800b874:	f3bf 8f4f 	dsb	sy
 800b878:	603b      	str	r3, [r7, #0]
}
 800b87a:	bf00      	nop
 800b87c:	e7fe      	b.n	800b87c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b87e:	4b09      	ldr	r3, [pc, #36]	; (800b8a4 <prvSwitchTimerLists+0xc0>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1b1      	bne.n	800b7ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b888:	4b06      	ldr	r3, [pc, #24]	; (800b8a4 <prvSwitchTimerLists+0xc0>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b88e:	4b06      	ldr	r3, [pc, #24]	; (800b8a8 <prvSwitchTimerLists+0xc4>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a04      	ldr	r2, [pc, #16]	; (800b8a4 <prvSwitchTimerLists+0xc0>)
 800b894:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b896:	4a04      	ldr	r2, [pc, #16]	; (800b8a8 <prvSwitchTimerLists+0xc4>)
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	6013      	str	r3, [r2, #0]
}
 800b89c:	bf00      	nop
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	200014a8 	.word	0x200014a8
 800b8a8:	200014ac 	.word	0x200014ac

0800b8ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b8b2:	f000 f967 	bl	800bb84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b8b6:	4b15      	ldr	r3, [pc, #84]	; (800b90c <prvCheckForValidListAndQueue+0x60>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d120      	bne.n	800b900 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b8be:	4814      	ldr	r0, [pc, #80]	; (800b910 <prvCheckForValidListAndQueue+0x64>)
 800b8c0:	f7fe f81e 	bl	8009900 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b8c4:	4813      	ldr	r0, [pc, #76]	; (800b914 <prvCheckForValidListAndQueue+0x68>)
 800b8c6:	f7fe f81b 	bl	8009900 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b8ca:	4b13      	ldr	r3, [pc, #76]	; (800b918 <prvCheckForValidListAndQueue+0x6c>)
 800b8cc:	4a10      	ldr	r2, [pc, #64]	; (800b910 <prvCheckForValidListAndQueue+0x64>)
 800b8ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b8d0:	4b12      	ldr	r3, [pc, #72]	; (800b91c <prvCheckForValidListAndQueue+0x70>)
 800b8d2:	4a10      	ldr	r2, [pc, #64]	; (800b914 <prvCheckForValidListAndQueue+0x68>)
 800b8d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	4b11      	ldr	r3, [pc, #68]	; (800b920 <prvCheckForValidListAndQueue+0x74>)
 800b8dc:	4a11      	ldr	r2, [pc, #68]	; (800b924 <prvCheckForValidListAndQueue+0x78>)
 800b8de:	2110      	movs	r1, #16
 800b8e0:	200a      	movs	r0, #10
 800b8e2:	f7fe f929 	bl	8009b38 <xQueueGenericCreateStatic>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	4a08      	ldr	r2, [pc, #32]	; (800b90c <prvCheckForValidListAndQueue+0x60>)
 800b8ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b8ec:	4b07      	ldr	r3, [pc, #28]	; (800b90c <prvCheckForValidListAndQueue+0x60>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d005      	beq.n	800b900 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b8f4:	4b05      	ldr	r3, [pc, #20]	; (800b90c <prvCheckForValidListAndQueue+0x60>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	490b      	ldr	r1, [pc, #44]	; (800b928 <prvCheckForValidListAndQueue+0x7c>)
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fe fd42 	bl	800a384 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b900:	f000 f970 	bl	800bbe4 <vPortExitCritical>
}
 800b904:	bf00      	nop
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	200014b0 	.word	0x200014b0
 800b910:	20001480 	.word	0x20001480
 800b914:	20001494 	.word	0x20001494
 800b918:	200014a8 	.word	0x200014a8
 800b91c:	200014ac 	.word	0x200014ac
 800b920:	2000155c 	.word	0x2000155c
 800b924:	200014bc 	.word	0x200014bc
 800b928:	0800db48 	.word	0x0800db48

0800b92c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	3b04      	subs	r3, #4
 800b93c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	3b04      	subs	r3, #4
 800b94a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	f023 0201 	bic.w	r2, r3, #1
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	3b04      	subs	r3, #4
 800b95a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b95c:	4a0c      	ldr	r2, [pc, #48]	; (800b990 <pxPortInitialiseStack+0x64>)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	3b14      	subs	r3, #20
 800b966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	3b04      	subs	r3, #4
 800b972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f06f 0202 	mvn.w	r2, #2
 800b97a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	3b20      	subs	r3, #32
 800b980:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b982:	68fb      	ldr	r3, [r7, #12]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3714      	adds	r7, #20
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	0800b995 	.word	0x0800b995

0800b994 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b99a:	2300      	movs	r3, #0
 800b99c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b99e:	4b12      	ldr	r3, [pc, #72]	; (800b9e8 <prvTaskExitError+0x54>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a6:	d00a      	beq.n	800b9be <prvTaskExitError+0x2a>
	__asm volatile
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	f383 8811 	msr	BASEPRI, r3
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	60fb      	str	r3, [r7, #12]
}
 800b9ba:	bf00      	nop
 800b9bc:	e7fe      	b.n	800b9bc <prvTaskExitError+0x28>
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	60bb      	str	r3, [r7, #8]
}
 800b9d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b9d2:	bf00      	nop
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d0fc      	beq.n	800b9d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b9da:	bf00      	nop
 800b9dc:	bf00      	nop
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	20000014 	.word	0x20000014
 800b9ec:	00000000 	.word	0x00000000

0800b9f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b9f0:	4b07      	ldr	r3, [pc, #28]	; (800ba10 <pxCurrentTCBConst2>)
 800b9f2:	6819      	ldr	r1, [r3, #0]
 800b9f4:	6808      	ldr	r0, [r1, #0]
 800b9f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9fa:	f380 8809 	msr	PSP, r0
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f04f 0000 	mov.w	r0, #0
 800ba06:	f380 8811 	msr	BASEPRI, r0
 800ba0a:	4770      	bx	lr
 800ba0c:	f3af 8000 	nop.w

0800ba10 <pxCurrentTCBConst2>:
 800ba10:	20000f80 	.word	0x20000f80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba14:	bf00      	nop
 800ba16:	bf00      	nop

0800ba18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba18:	4808      	ldr	r0, [pc, #32]	; (800ba3c <prvPortStartFirstTask+0x24>)
 800ba1a:	6800      	ldr	r0, [r0, #0]
 800ba1c:	6800      	ldr	r0, [r0, #0]
 800ba1e:	f380 8808 	msr	MSP, r0
 800ba22:	f04f 0000 	mov.w	r0, #0
 800ba26:	f380 8814 	msr	CONTROL, r0
 800ba2a:	b662      	cpsie	i
 800ba2c:	b661      	cpsie	f
 800ba2e:	f3bf 8f4f 	dsb	sy
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	df00      	svc	0
 800ba38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba3a:	bf00      	nop
 800ba3c:	e000ed08 	.word	0xe000ed08

0800ba40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b086      	sub	sp, #24
 800ba44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba46:	4b46      	ldr	r3, [pc, #280]	; (800bb60 <xPortStartScheduler+0x120>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a46      	ldr	r2, [pc, #280]	; (800bb64 <xPortStartScheduler+0x124>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d10a      	bne.n	800ba66 <xPortStartScheduler+0x26>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	613b      	str	r3, [r7, #16]
}
 800ba62:	bf00      	nop
 800ba64:	e7fe      	b.n	800ba64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba66:	4b3e      	ldr	r3, [pc, #248]	; (800bb60 <xPortStartScheduler+0x120>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a3f      	ldr	r2, [pc, #252]	; (800bb68 <xPortStartScheduler+0x128>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d10a      	bne.n	800ba86 <xPortStartScheduler+0x46>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	60fb      	str	r3, [r7, #12]
}
 800ba82:	bf00      	nop
 800ba84:	e7fe      	b.n	800ba84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba86:	4b39      	ldr	r3, [pc, #228]	; (800bb6c <xPortStartScheduler+0x12c>)
 800ba88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	22ff      	movs	r2, #255	; 0xff
 800ba96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800baa0:	78fb      	ldrb	r3, [r7, #3]
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800baa8:	b2da      	uxtb	r2, r3
 800baaa:	4b31      	ldr	r3, [pc, #196]	; (800bb70 <xPortStartScheduler+0x130>)
 800baac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800baae:	4b31      	ldr	r3, [pc, #196]	; (800bb74 <xPortStartScheduler+0x134>)
 800bab0:	2207      	movs	r2, #7
 800bab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bab4:	e009      	b.n	800baca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bab6:	4b2f      	ldr	r3, [pc, #188]	; (800bb74 <xPortStartScheduler+0x134>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	3b01      	subs	r3, #1
 800babc:	4a2d      	ldr	r2, [pc, #180]	; (800bb74 <xPortStartScheduler+0x134>)
 800babe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bac0:	78fb      	ldrb	r3, [r7, #3]
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	005b      	lsls	r3, r3, #1
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baca:	78fb      	ldrb	r3, [r7, #3]
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bad2:	2b80      	cmp	r3, #128	; 0x80
 800bad4:	d0ef      	beq.n	800bab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bad6:	4b27      	ldr	r3, [pc, #156]	; (800bb74 <xPortStartScheduler+0x134>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f1c3 0307 	rsb	r3, r3, #7
 800bade:	2b04      	cmp	r3, #4
 800bae0:	d00a      	beq.n	800baf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	60bb      	str	r3, [r7, #8]
}
 800baf4:	bf00      	nop
 800baf6:	e7fe      	b.n	800baf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800baf8:	4b1e      	ldr	r3, [pc, #120]	; (800bb74 <xPortStartScheduler+0x134>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	021b      	lsls	r3, r3, #8
 800bafe:	4a1d      	ldr	r2, [pc, #116]	; (800bb74 <xPortStartScheduler+0x134>)
 800bb00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb02:	4b1c      	ldr	r3, [pc, #112]	; (800bb74 <xPortStartScheduler+0x134>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb0a:	4a1a      	ldr	r2, [pc, #104]	; (800bb74 <xPortStartScheduler+0x134>)
 800bb0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb16:	4b18      	ldr	r3, [pc, #96]	; (800bb78 <xPortStartScheduler+0x138>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a17      	ldr	r2, [pc, #92]	; (800bb78 <xPortStartScheduler+0x138>)
 800bb1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb22:	4b15      	ldr	r3, [pc, #84]	; (800bb78 <xPortStartScheduler+0x138>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a14      	ldr	r2, [pc, #80]	; (800bb78 <xPortStartScheduler+0x138>)
 800bb28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb2e:	f000 f8dd 	bl	800bcec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb32:	4b12      	ldr	r3, [pc, #72]	; (800bb7c <xPortStartScheduler+0x13c>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb38:	f000 f8fc 	bl	800bd34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb3c:	4b10      	ldr	r3, [pc, #64]	; (800bb80 <xPortStartScheduler+0x140>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a0f      	ldr	r2, [pc, #60]	; (800bb80 <xPortStartScheduler+0x140>)
 800bb42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb48:	f7ff ff66 	bl	800ba18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb4c:	f7ff f84a 	bl	800abe4 <vTaskSwitchContext>
	prvTaskExitError();
 800bb50:	f7ff ff20 	bl	800b994 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3718      	adds	r7, #24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	e000ed00 	.word	0xe000ed00
 800bb64:	410fc271 	.word	0x410fc271
 800bb68:	410fc270 	.word	0x410fc270
 800bb6c:	e000e400 	.word	0xe000e400
 800bb70:	200015ac 	.word	0x200015ac
 800bb74:	200015b0 	.word	0x200015b0
 800bb78:	e000ed20 	.word	0xe000ed20
 800bb7c:	20000014 	.word	0x20000014
 800bb80:	e000ef34 	.word	0xe000ef34

0800bb84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	607b      	str	r3, [r7, #4]
}
 800bb9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb9e:	4b0f      	ldr	r3, [pc, #60]	; (800bbdc <vPortEnterCritical+0x58>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	3301      	adds	r3, #1
 800bba4:	4a0d      	ldr	r2, [pc, #52]	; (800bbdc <vPortEnterCritical+0x58>)
 800bba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bba8:	4b0c      	ldr	r3, [pc, #48]	; (800bbdc <vPortEnterCritical+0x58>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d10f      	bne.n	800bbd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bbb0:	4b0b      	ldr	r3, [pc, #44]	; (800bbe0 <vPortEnterCritical+0x5c>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00a      	beq.n	800bbd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbe:	f383 8811 	msr	BASEPRI, r3
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	603b      	str	r3, [r7, #0]
}
 800bbcc:	bf00      	nop
 800bbce:	e7fe      	b.n	800bbce <vPortEnterCritical+0x4a>
	}
}
 800bbd0:	bf00      	nop
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	20000014 	.word	0x20000014
 800bbe0:	e000ed04 	.word	0xe000ed04

0800bbe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bbea:	4b12      	ldr	r3, [pc, #72]	; (800bc34 <vPortExitCritical+0x50>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10a      	bne.n	800bc08 <vPortExitCritical+0x24>
	__asm volatile
 800bbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf6:	f383 8811 	msr	BASEPRI, r3
 800bbfa:	f3bf 8f6f 	isb	sy
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	607b      	str	r3, [r7, #4]
}
 800bc04:	bf00      	nop
 800bc06:	e7fe      	b.n	800bc06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc08:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <vPortExitCritical+0x50>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	4a09      	ldr	r2, [pc, #36]	; (800bc34 <vPortExitCritical+0x50>)
 800bc10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc12:	4b08      	ldr	r3, [pc, #32]	; (800bc34 <vPortExitCritical+0x50>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d105      	bne.n	800bc26 <vPortExitCritical+0x42>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	f383 8811 	msr	BASEPRI, r3
}
 800bc24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc26:	bf00      	nop
 800bc28:	370c      	adds	r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	20000014 	.word	0x20000014
	...

0800bc40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc40:	f3ef 8009 	mrs	r0, PSP
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	4b15      	ldr	r3, [pc, #84]	; (800bca0 <pxCurrentTCBConst>)
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	f01e 0f10 	tst.w	lr, #16
 800bc50:	bf08      	it	eq
 800bc52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5a:	6010      	str	r0, [r2, #0]
 800bc5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc64:	f380 8811 	msr	BASEPRI, r0
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f7fe ffb8 	bl	800abe4 <vTaskSwitchContext>
 800bc74:	f04f 0000 	mov.w	r0, #0
 800bc78:	f380 8811 	msr	BASEPRI, r0
 800bc7c:	bc09      	pop	{r0, r3}
 800bc7e:	6819      	ldr	r1, [r3, #0]
 800bc80:	6808      	ldr	r0, [r1, #0]
 800bc82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc86:	f01e 0f10 	tst.w	lr, #16
 800bc8a:	bf08      	it	eq
 800bc8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc90:	f380 8809 	msr	PSP, r0
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	4770      	bx	lr
 800bc9a:	bf00      	nop
 800bc9c:	f3af 8000 	nop.w

0800bca0 <pxCurrentTCBConst>:
 800bca0:	20000f80 	.word	0x20000f80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bca4:	bf00      	nop
 800bca6:	bf00      	nop

0800bca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
	__asm volatile
 800bcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	607b      	str	r3, [r7, #4]
}
 800bcc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bcc2:	f7fe fed5 	bl	800aa70 <xTaskIncrementTick>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d003      	beq.n	800bcd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bccc:	4b06      	ldr	r3, [pc, #24]	; (800bce8 <xPortSysTickHandler+0x40>)
 800bcce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcd2:	601a      	str	r2, [r3, #0]
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	f383 8811 	msr	BASEPRI, r3
}
 800bcde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bce0:	bf00      	nop
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	e000ed04 	.word	0xe000ed04

0800bcec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bcec:	b480      	push	{r7}
 800bcee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bcf0:	4b0b      	ldr	r3, [pc, #44]	; (800bd20 <vPortSetupTimerInterrupt+0x34>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bcf6:	4b0b      	ldr	r3, [pc, #44]	; (800bd24 <vPortSetupTimerInterrupt+0x38>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcfc:	4b0a      	ldr	r3, [pc, #40]	; (800bd28 <vPortSetupTimerInterrupt+0x3c>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a0a      	ldr	r2, [pc, #40]	; (800bd2c <vPortSetupTimerInterrupt+0x40>)
 800bd02:	fba2 2303 	umull	r2, r3, r2, r3
 800bd06:	099b      	lsrs	r3, r3, #6
 800bd08:	4a09      	ldr	r2, [pc, #36]	; (800bd30 <vPortSetupTimerInterrupt+0x44>)
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd0e:	4b04      	ldr	r3, [pc, #16]	; (800bd20 <vPortSetupTimerInterrupt+0x34>)
 800bd10:	2207      	movs	r2, #7
 800bd12:	601a      	str	r2, [r3, #0]
}
 800bd14:	bf00      	nop
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	e000e010 	.word	0xe000e010
 800bd24:	e000e018 	.word	0xe000e018
 800bd28:	20000008 	.word	0x20000008
 800bd2c:	10624dd3 	.word	0x10624dd3
 800bd30:	e000e014 	.word	0xe000e014

0800bd34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd44 <vPortEnableVFP+0x10>
 800bd38:	6801      	ldr	r1, [r0, #0]
 800bd3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd3e:	6001      	str	r1, [r0, #0]
 800bd40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd42:	bf00      	nop
 800bd44:	e000ed88 	.word	0xe000ed88

0800bd48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd4e:	f3ef 8305 	mrs	r3, IPSR
 800bd52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2b0f      	cmp	r3, #15
 800bd58:	d914      	bls.n	800bd84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd5a:	4a17      	ldr	r2, [pc, #92]	; (800bdb8 <vPortValidateInterruptPriority+0x70>)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4413      	add	r3, r2
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd64:	4b15      	ldr	r3, [pc, #84]	; (800bdbc <vPortValidateInterruptPriority+0x74>)
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	7afa      	ldrb	r2, [r7, #11]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d20a      	bcs.n	800bd84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	607b      	str	r3, [r7, #4]
}
 800bd80:	bf00      	nop
 800bd82:	e7fe      	b.n	800bd82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd84:	4b0e      	ldr	r3, [pc, #56]	; (800bdc0 <vPortValidateInterruptPriority+0x78>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bd8c:	4b0d      	ldr	r3, [pc, #52]	; (800bdc4 <vPortValidateInterruptPriority+0x7c>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d90a      	bls.n	800bdaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	603b      	str	r3, [r7, #0]
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <vPortValidateInterruptPriority+0x60>
	}
 800bdaa:	bf00      	nop
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	e000e3f0 	.word	0xe000e3f0
 800bdbc:	200015ac 	.word	0x200015ac
 800bdc0:	e000ed0c 	.word	0xe000ed0c
 800bdc4:	200015b0 	.word	0x200015b0

0800bdc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b08a      	sub	sp, #40	; 0x28
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bdd4:	f7fe fd90 	bl	800a8f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bdd8:	4b5b      	ldr	r3, [pc, #364]	; (800bf48 <pvPortMalloc+0x180>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d101      	bne.n	800bde4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bde0:	f000 f920 	bl	800c024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bde4:	4b59      	ldr	r3, [pc, #356]	; (800bf4c <pvPortMalloc+0x184>)
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4013      	ands	r3, r2
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f040 8093 	bne.w	800bf18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d01d      	beq.n	800be34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bdf8:	2208      	movs	r2, #8
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f003 0307 	and.w	r3, r3, #7
 800be06:	2b00      	cmp	r3, #0
 800be08:	d014      	beq.n	800be34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f023 0307 	bic.w	r3, r3, #7
 800be10:	3308      	adds	r3, #8
 800be12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f003 0307 	and.w	r3, r3, #7
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00a      	beq.n	800be34 <pvPortMalloc+0x6c>
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	617b      	str	r3, [r7, #20]
}
 800be30:	bf00      	nop
 800be32:	e7fe      	b.n	800be32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d06e      	beq.n	800bf18 <pvPortMalloc+0x150>
 800be3a:	4b45      	ldr	r3, [pc, #276]	; (800bf50 <pvPortMalloc+0x188>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	429a      	cmp	r2, r3
 800be42:	d869      	bhi.n	800bf18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be44:	4b43      	ldr	r3, [pc, #268]	; (800bf54 <pvPortMalloc+0x18c>)
 800be46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be48:	4b42      	ldr	r3, [pc, #264]	; (800bf54 <pvPortMalloc+0x18c>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be4e:	e004      	b.n	800be5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	429a      	cmp	r2, r3
 800be62:	d903      	bls.n	800be6c <pvPortMalloc+0xa4>
 800be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1f1      	bne.n	800be50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be6c:	4b36      	ldr	r3, [pc, #216]	; (800bf48 <pvPortMalloc+0x180>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be72:	429a      	cmp	r2, r3
 800be74:	d050      	beq.n	800bf18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be76:	6a3b      	ldr	r3, [r7, #32]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2208      	movs	r2, #8
 800be7c:	4413      	add	r3, r2
 800be7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	6a3b      	ldr	r3, [r7, #32]
 800be86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8a:	685a      	ldr	r2, [r3, #4]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	1ad2      	subs	r2, r2, r3
 800be90:	2308      	movs	r3, #8
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	429a      	cmp	r2, r3
 800be96:	d91f      	bls.n	800bed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4413      	add	r3, r2
 800be9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	f003 0307 	and.w	r3, r3, #7
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00a      	beq.n	800bec0 <pvPortMalloc+0xf8>
	__asm volatile
 800beaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beae:	f383 8811 	msr	BASEPRI, r3
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	f3bf 8f4f 	dsb	sy
 800beba:	613b      	str	r3, [r7, #16]
}
 800bebc:	bf00      	nop
 800bebe:	e7fe      	b.n	800bebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	685a      	ldr	r2, [r3, #4]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	1ad2      	subs	r2, r2, r3
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bed2:	69b8      	ldr	r0, [r7, #24]
 800bed4:	f000 f908 	bl	800c0e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bed8:	4b1d      	ldr	r3, [pc, #116]	; (800bf50 <pvPortMalloc+0x188>)
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	1ad3      	subs	r3, r2, r3
 800bee2:	4a1b      	ldr	r2, [pc, #108]	; (800bf50 <pvPortMalloc+0x188>)
 800bee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bee6:	4b1a      	ldr	r3, [pc, #104]	; (800bf50 <pvPortMalloc+0x188>)
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	4b1b      	ldr	r3, [pc, #108]	; (800bf58 <pvPortMalloc+0x190>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d203      	bcs.n	800befa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bef2:	4b17      	ldr	r3, [pc, #92]	; (800bf50 <pvPortMalloc+0x188>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a18      	ldr	r2, [pc, #96]	; (800bf58 <pvPortMalloc+0x190>)
 800bef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	685a      	ldr	r2, [r3, #4]
 800befe:	4b13      	ldr	r3, [pc, #76]	; (800bf4c <pvPortMalloc+0x184>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	431a      	orrs	r2, r3
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bf0e:	4b13      	ldr	r3, [pc, #76]	; (800bf5c <pvPortMalloc+0x194>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	3301      	adds	r3, #1
 800bf14:	4a11      	ldr	r2, [pc, #68]	; (800bf5c <pvPortMalloc+0x194>)
 800bf16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf18:	f7fe fcfc 	bl	800a914 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	f003 0307 	and.w	r3, r3, #7
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00a      	beq.n	800bf3c <pvPortMalloc+0x174>
	__asm volatile
 800bf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2a:	f383 8811 	msr	BASEPRI, r3
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f3bf 8f4f 	dsb	sy
 800bf36:	60fb      	str	r3, [r7, #12]
}
 800bf38:	bf00      	nop
 800bf3a:	e7fe      	b.n	800bf3a <pvPortMalloc+0x172>
	return pvReturn;
 800bf3c:	69fb      	ldr	r3, [r7, #28]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3728      	adds	r7, #40	; 0x28
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	200051bc 	.word	0x200051bc
 800bf4c:	200051d0 	.word	0x200051d0
 800bf50:	200051c0 	.word	0x200051c0
 800bf54:	200051b4 	.word	0x200051b4
 800bf58:	200051c4 	.word	0x200051c4
 800bf5c:	200051c8 	.word	0x200051c8

0800bf60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d04d      	beq.n	800c00e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf72:	2308      	movs	r3, #8
 800bf74:	425b      	negs	r3, r3
 800bf76:	697a      	ldr	r2, [r7, #20]
 800bf78:	4413      	add	r3, r2
 800bf7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	4b24      	ldr	r3, [pc, #144]	; (800c018 <vPortFree+0xb8>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4013      	ands	r3, r2
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d10a      	bne.n	800bfa4 <vPortFree+0x44>
	__asm volatile
 800bf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	60fb      	str	r3, [r7, #12]
}
 800bfa0:	bf00      	nop
 800bfa2:	e7fe      	b.n	800bfa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00a      	beq.n	800bfc2 <vPortFree+0x62>
	__asm volatile
 800bfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	60bb      	str	r3, [r7, #8]
}
 800bfbe:	bf00      	nop
 800bfc0:	e7fe      	b.n	800bfc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	685a      	ldr	r2, [r3, #4]
 800bfc6:	4b14      	ldr	r3, [pc, #80]	; (800c018 <vPortFree+0xb8>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4013      	ands	r3, r2
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d01e      	beq.n	800c00e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d11a      	bne.n	800c00e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	685a      	ldr	r2, [r3, #4]
 800bfdc:	4b0e      	ldr	r3, [pc, #56]	; (800c018 <vPortFree+0xb8>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	43db      	mvns	r3, r3
 800bfe2:	401a      	ands	r2, r3
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bfe8:	f7fe fc86 	bl	800a8f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	685a      	ldr	r2, [r3, #4]
 800bff0:	4b0a      	ldr	r3, [pc, #40]	; (800c01c <vPortFree+0xbc>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4413      	add	r3, r2
 800bff6:	4a09      	ldr	r2, [pc, #36]	; (800c01c <vPortFree+0xbc>)
 800bff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bffa:	6938      	ldr	r0, [r7, #16]
 800bffc:	f000 f874 	bl	800c0e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c000:	4b07      	ldr	r3, [pc, #28]	; (800c020 <vPortFree+0xc0>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	3301      	adds	r3, #1
 800c006:	4a06      	ldr	r2, [pc, #24]	; (800c020 <vPortFree+0xc0>)
 800c008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c00a:	f7fe fc83 	bl	800a914 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c00e:	bf00      	nop
 800c010:	3718      	adds	r7, #24
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	200051d0 	.word	0x200051d0
 800c01c:	200051c0 	.word	0x200051c0
 800c020:	200051cc 	.word	0x200051cc

0800c024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c02a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c02e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c030:	4b27      	ldr	r3, [pc, #156]	; (800c0d0 <prvHeapInit+0xac>)
 800c032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f003 0307 	and.w	r3, r3, #7
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00c      	beq.n	800c058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	3307      	adds	r3, #7
 800c042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f023 0307 	bic.w	r3, r3, #7
 800c04a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c04c:	68ba      	ldr	r2, [r7, #8]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	4a1f      	ldr	r2, [pc, #124]	; (800c0d0 <prvHeapInit+0xac>)
 800c054:	4413      	add	r3, r2
 800c056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c05c:	4a1d      	ldr	r2, [pc, #116]	; (800c0d4 <prvHeapInit+0xb0>)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c062:	4b1c      	ldr	r3, [pc, #112]	; (800c0d4 <prvHeapInit+0xb0>)
 800c064:	2200      	movs	r2, #0
 800c066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	4413      	add	r3, r2
 800c06e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c070:	2208      	movs	r2, #8
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	1a9b      	subs	r3, r3, r2
 800c076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f023 0307 	bic.w	r3, r3, #7
 800c07e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4a15      	ldr	r2, [pc, #84]	; (800c0d8 <prvHeapInit+0xb4>)
 800c084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c086:	4b14      	ldr	r3, [pc, #80]	; (800c0d8 <prvHeapInit+0xb4>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2200      	movs	r2, #0
 800c08c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c08e:	4b12      	ldr	r3, [pc, #72]	; (800c0d8 <prvHeapInit+0xb4>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2200      	movs	r2, #0
 800c094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	68fa      	ldr	r2, [r7, #12]
 800c09e:	1ad2      	subs	r2, r2, r3
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c0a4:	4b0c      	ldr	r3, [pc, #48]	; (800c0d8 <prvHeapInit+0xb4>)
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	4a0a      	ldr	r2, [pc, #40]	; (800c0dc <prvHeapInit+0xb8>)
 800c0b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	4a09      	ldr	r2, [pc, #36]	; (800c0e0 <prvHeapInit+0xbc>)
 800c0ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0bc:	4b09      	ldr	r3, [pc, #36]	; (800c0e4 <prvHeapInit+0xc0>)
 800c0be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c0c2:	601a      	str	r2, [r3, #0]
}
 800c0c4:	bf00      	nop
 800c0c6:	3714      	adds	r7, #20
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr
 800c0d0:	200015b4 	.word	0x200015b4
 800c0d4:	200051b4 	.word	0x200051b4
 800c0d8:	200051bc 	.word	0x200051bc
 800c0dc:	200051c4 	.word	0x200051c4
 800c0e0:	200051c0 	.word	0x200051c0
 800c0e4:	200051d0 	.word	0x200051d0

0800c0e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c0f0:	4b28      	ldr	r3, [pc, #160]	; (800c194 <prvInsertBlockIntoFreeList+0xac>)
 800c0f2:	60fb      	str	r3, [r7, #12]
 800c0f4:	e002      	b.n	800c0fc <prvInsertBlockIntoFreeList+0x14>
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	60fb      	str	r3, [r7, #12]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	429a      	cmp	r2, r3
 800c104:	d8f7      	bhi.n	800c0f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	68ba      	ldr	r2, [r7, #8]
 800c110:	4413      	add	r3, r2
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	429a      	cmp	r2, r3
 800c116:	d108      	bne.n	800c12a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	685a      	ldr	r2, [r3, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	441a      	add	r2, r3
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	68ba      	ldr	r2, [r7, #8]
 800c134:	441a      	add	r2, r3
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d118      	bne.n	800c170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	4b15      	ldr	r3, [pc, #84]	; (800c198 <prvInsertBlockIntoFreeList+0xb0>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	429a      	cmp	r2, r3
 800c148:	d00d      	beq.n	800c166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	685a      	ldr	r2, [r3, #4]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	441a      	add	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	601a      	str	r2, [r3, #0]
 800c164:	e008      	b.n	800c178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c166:	4b0c      	ldr	r3, [pc, #48]	; (800c198 <prvInsertBlockIntoFreeList+0xb0>)
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	601a      	str	r2, [r3, #0]
 800c16e:	e003      	b.n	800c178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d002      	beq.n	800c186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c186:	bf00      	nop
 800c188:	3714      	adds	r7, #20
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop
 800c194:	200051b4 	.word	0x200051b4
 800c198:	200051bc 	.word	0x200051bc

0800c19c <siprintf>:
 800c19c:	b40e      	push	{r1, r2, r3}
 800c19e:	b500      	push	{lr}
 800c1a0:	b09c      	sub	sp, #112	; 0x70
 800c1a2:	ab1d      	add	r3, sp, #116	; 0x74
 800c1a4:	9002      	str	r0, [sp, #8]
 800c1a6:	9006      	str	r0, [sp, #24]
 800c1a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1ac:	4809      	ldr	r0, [pc, #36]	; (800c1d4 <siprintf+0x38>)
 800c1ae:	9107      	str	r1, [sp, #28]
 800c1b0:	9104      	str	r1, [sp, #16]
 800c1b2:	4909      	ldr	r1, [pc, #36]	; (800c1d8 <siprintf+0x3c>)
 800c1b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1b8:	9105      	str	r1, [sp, #20]
 800c1ba:	6800      	ldr	r0, [r0, #0]
 800c1bc:	9301      	str	r3, [sp, #4]
 800c1be:	a902      	add	r1, sp, #8
 800c1c0:	f000 f9f6 	bl	800c5b0 <_svfiprintf_r>
 800c1c4:	9b02      	ldr	r3, [sp, #8]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	701a      	strb	r2, [r3, #0]
 800c1ca:	b01c      	add	sp, #112	; 0x70
 800c1cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1d0:	b003      	add	sp, #12
 800c1d2:	4770      	bx	lr
 800c1d4:	20000064 	.word	0x20000064
 800c1d8:	ffff0208 	.word	0xffff0208

0800c1dc <memset>:
 800c1dc:	4402      	add	r2, r0
 800c1de:	4603      	mov	r3, r0
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d100      	bne.n	800c1e6 <memset+0xa>
 800c1e4:	4770      	bx	lr
 800c1e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c1ea:	e7f9      	b.n	800c1e0 <memset+0x4>

0800c1ec <_reclaim_reent>:
 800c1ec:	4b29      	ldr	r3, [pc, #164]	; (800c294 <_reclaim_reent+0xa8>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4283      	cmp	r3, r0
 800c1f2:	b570      	push	{r4, r5, r6, lr}
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	d04b      	beq.n	800c290 <_reclaim_reent+0xa4>
 800c1f8:	69c3      	ldr	r3, [r0, #28]
 800c1fa:	b143      	cbz	r3, 800c20e <_reclaim_reent+0x22>
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d144      	bne.n	800c28c <_reclaim_reent+0xa0>
 800c202:	69e3      	ldr	r3, [r4, #28]
 800c204:	6819      	ldr	r1, [r3, #0]
 800c206:	b111      	cbz	r1, 800c20e <_reclaim_reent+0x22>
 800c208:	4620      	mov	r0, r4
 800c20a:	f000 f87f 	bl	800c30c <_free_r>
 800c20e:	6961      	ldr	r1, [r4, #20]
 800c210:	b111      	cbz	r1, 800c218 <_reclaim_reent+0x2c>
 800c212:	4620      	mov	r0, r4
 800c214:	f000 f87a 	bl	800c30c <_free_r>
 800c218:	69e1      	ldr	r1, [r4, #28]
 800c21a:	b111      	cbz	r1, 800c222 <_reclaim_reent+0x36>
 800c21c:	4620      	mov	r0, r4
 800c21e:	f000 f875 	bl	800c30c <_free_r>
 800c222:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c224:	b111      	cbz	r1, 800c22c <_reclaim_reent+0x40>
 800c226:	4620      	mov	r0, r4
 800c228:	f000 f870 	bl	800c30c <_free_r>
 800c22c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c22e:	b111      	cbz	r1, 800c236 <_reclaim_reent+0x4a>
 800c230:	4620      	mov	r0, r4
 800c232:	f000 f86b 	bl	800c30c <_free_r>
 800c236:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c238:	b111      	cbz	r1, 800c240 <_reclaim_reent+0x54>
 800c23a:	4620      	mov	r0, r4
 800c23c:	f000 f866 	bl	800c30c <_free_r>
 800c240:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c242:	b111      	cbz	r1, 800c24a <_reclaim_reent+0x5e>
 800c244:	4620      	mov	r0, r4
 800c246:	f000 f861 	bl	800c30c <_free_r>
 800c24a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c24c:	b111      	cbz	r1, 800c254 <_reclaim_reent+0x68>
 800c24e:	4620      	mov	r0, r4
 800c250:	f000 f85c 	bl	800c30c <_free_r>
 800c254:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c256:	b111      	cbz	r1, 800c25e <_reclaim_reent+0x72>
 800c258:	4620      	mov	r0, r4
 800c25a:	f000 f857 	bl	800c30c <_free_r>
 800c25e:	6a23      	ldr	r3, [r4, #32]
 800c260:	b1b3      	cbz	r3, 800c290 <_reclaim_reent+0xa4>
 800c262:	4620      	mov	r0, r4
 800c264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c268:	4718      	bx	r3
 800c26a:	5949      	ldr	r1, [r1, r5]
 800c26c:	b941      	cbnz	r1, 800c280 <_reclaim_reent+0x94>
 800c26e:	3504      	adds	r5, #4
 800c270:	69e3      	ldr	r3, [r4, #28]
 800c272:	2d80      	cmp	r5, #128	; 0x80
 800c274:	68d9      	ldr	r1, [r3, #12]
 800c276:	d1f8      	bne.n	800c26a <_reclaim_reent+0x7e>
 800c278:	4620      	mov	r0, r4
 800c27a:	f000 f847 	bl	800c30c <_free_r>
 800c27e:	e7c0      	b.n	800c202 <_reclaim_reent+0x16>
 800c280:	680e      	ldr	r6, [r1, #0]
 800c282:	4620      	mov	r0, r4
 800c284:	f000 f842 	bl	800c30c <_free_r>
 800c288:	4631      	mov	r1, r6
 800c28a:	e7ef      	b.n	800c26c <_reclaim_reent+0x80>
 800c28c:	2500      	movs	r5, #0
 800c28e:	e7ef      	b.n	800c270 <_reclaim_reent+0x84>
 800c290:	bd70      	pop	{r4, r5, r6, pc}
 800c292:	bf00      	nop
 800c294:	20000064 	.word	0x20000064

0800c298 <__errno>:
 800c298:	4b01      	ldr	r3, [pc, #4]	; (800c2a0 <__errno+0x8>)
 800c29a:	6818      	ldr	r0, [r3, #0]
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	20000064 	.word	0x20000064

0800c2a4 <__libc_init_array>:
 800c2a4:	b570      	push	{r4, r5, r6, lr}
 800c2a6:	4d0d      	ldr	r5, [pc, #52]	; (800c2dc <__libc_init_array+0x38>)
 800c2a8:	4c0d      	ldr	r4, [pc, #52]	; (800c2e0 <__libc_init_array+0x3c>)
 800c2aa:	1b64      	subs	r4, r4, r5
 800c2ac:	10a4      	asrs	r4, r4, #2
 800c2ae:	2600      	movs	r6, #0
 800c2b0:	42a6      	cmp	r6, r4
 800c2b2:	d109      	bne.n	800c2c8 <__libc_init_array+0x24>
 800c2b4:	4d0b      	ldr	r5, [pc, #44]	; (800c2e4 <__libc_init_array+0x40>)
 800c2b6:	4c0c      	ldr	r4, [pc, #48]	; (800c2e8 <__libc_init_array+0x44>)
 800c2b8:	f001 fbc6 	bl	800da48 <_init>
 800c2bc:	1b64      	subs	r4, r4, r5
 800c2be:	10a4      	asrs	r4, r4, #2
 800c2c0:	2600      	movs	r6, #0
 800c2c2:	42a6      	cmp	r6, r4
 800c2c4:	d105      	bne.n	800c2d2 <__libc_init_array+0x2e>
 800c2c6:	bd70      	pop	{r4, r5, r6, pc}
 800c2c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2cc:	4798      	blx	r3
 800c2ce:	3601      	adds	r6, #1
 800c2d0:	e7ee      	b.n	800c2b0 <__libc_init_array+0xc>
 800c2d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2d6:	4798      	blx	r3
 800c2d8:	3601      	adds	r6, #1
 800c2da:	e7f2      	b.n	800c2c2 <__libc_init_array+0x1e>
 800c2dc:	0800e7a0 	.word	0x0800e7a0
 800c2e0:	0800e7a0 	.word	0x0800e7a0
 800c2e4:	0800e7a0 	.word	0x0800e7a0
 800c2e8:	0800e7a4 	.word	0x0800e7a4

0800c2ec <__retarget_lock_acquire_recursive>:
 800c2ec:	4770      	bx	lr

0800c2ee <__retarget_lock_release_recursive>:
 800c2ee:	4770      	bx	lr

0800c2f0 <memcpy>:
 800c2f0:	440a      	add	r2, r1
 800c2f2:	4291      	cmp	r1, r2
 800c2f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2f8:	d100      	bne.n	800c2fc <memcpy+0xc>
 800c2fa:	4770      	bx	lr
 800c2fc:	b510      	push	{r4, lr}
 800c2fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c302:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c306:	4291      	cmp	r1, r2
 800c308:	d1f9      	bne.n	800c2fe <memcpy+0xe>
 800c30a:	bd10      	pop	{r4, pc}

0800c30c <_free_r>:
 800c30c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c30e:	2900      	cmp	r1, #0
 800c310:	d044      	beq.n	800c39c <_free_r+0x90>
 800c312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c316:	9001      	str	r0, [sp, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f1a1 0404 	sub.w	r4, r1, #4
 800c31e:	bfb8      	it	lt
 800c320:	18e4      	addlt	r4, r4, r3
 800c322:	f000 f8df 	bl	800c4e4 <__malloc_lock>
 800c326:	4a1e      	ldr	r2, [pc, #120]	; (800c3a0 <_free_r+0x94>)
 800c328:	9801      	ldr	r0, [sp, #4]
 800c32a:	6813      	ldr	r3, [r2, #0]
 800c32c:	b933      	cbnz	r3, 800c33c <_free_r+0x30>
 800c32e:	6063      	str	r3, [r4, #4]
 800c330:	6014      	str	r4, [r2, #0]
 800c332:	b003      	add	sp, #12
 800c334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c338:	f000 b8da 	b.w	800c4f0 <__malloc_unlock>
 800c33c:	42a3      	cmp	r3, r4
 800c33e:	d908      	bls.n	800c352 <_free_r+0x46>
 800c340:	6825      	ldr	r5, [r4, #0]
 800c342:	1961      	adds	r1, r4, r5
 800c344:	428b      	cmp	r3, r1
 800c346:	bf01      	itttt	eq
 800c348:	6819      	ldreq	r1, [r3, #0]
 800c34a:	685b      	ldreq	r3, [r3, #4]
 800c34c:	1949      	addeq	r1, r1, r5
 800c34e:	6021      	streq	r1, [r4, #0]
 800c350:	e7ed      	b.n	800c32e <_free_r+0x22>
 800c352:	461a      	mov	r2, r3
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	b10b      	cbz	r3, 800c35c <_free_r+0x50>
 800c358:	42a3      	cmp	r3, r4
 800c35a:	d9fa      	bls.n	800c352 <_free_r+0x46>
 800c35c:	6811      	ldr	r1, [r2, #0]
 800c35e:	1855      	adds	r5, r2, r1
 800c360:	42a5      	cmp	r5, r4
 800c362:	d10b      	bne.n	800c37c <_free_r+0x70>
 800c364:	6824      	ldr	r4, [r4, #0]
 800c366:	4421      	add	r1, r4
 800c368:	1854      	adds	r4, r2, r1
 800c36a:	42a3      	cmp	r3, r4
 800c36c:	6011      	str	r1, [r2, #0]
 800c36e:	d1e0      	bne.n	800c332 <_free_r+0x26>
 800c370:	681c      	ldr	r4, [r3, #0]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	6053      	str	r3, [r2, #4]
 800c376:	440c      	add	r4, r1
 800c378:	6014      	str	r4, [r2, #0]
 800c37a:	e7da      	b.n	800c332 <_free_r+0x26>
 800c37c:	d902      	bls.n	800c384 <_free_r+0x78>
 800c37e:	230c      	movs	r3, #12
 800c380:	6003      	str	r3, [r0, #0]
 800c382:	e7d6      	b.n	800c332 <_free_r+0x26>
 800c384:	6825      	ldr	r5, [r4, #0]
 800c386:	1961      	adds	r1, r4, r5
 800c388:	428b      	cmp	r3, r1
 800c38a:	bf04      	itt	eq
 800c38c:	6819      	ldreq	r1, [r3, #0]
 800c38e:	685b      	ldreq	r3, [r3, #4]
 800c390:	6063      	str	r3, [r4, #4]
 800c392:	bf04      	itt	eq
 800c394:	1949      	addeq	r1, r1, r5
 800c396:	6021      	streq	r1, [r4, #0]
 800c398:	6054      	str	r4, [r2, #4]
 800c39a:	e7ca      	b.n	800c332 <_free_r+0x26>
 800c39c:	b003      	add	sp, #12
 800c39e:	bd30      	pop	{r4, r5, pc}
 800c3a0:	20005314 	.word	0x20005314

0800c3a4 <sbrk_aligned>:
 800c3a4:	b570      	push	{r4, r5, r6, lr}
 800c3a6:	4e0e      	ldr	r6, [pc, #56]	; (800c3e0 <sbrk_aligned+0x3c>)
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	6831      	ldr	r1, [r6, #0]
 800c3ac:	4605      	mov	r5, r0
 800c3ae:	b911      	cbnz	r1, 800c3b6 <sbrk_aligned+0x12>
 800c3b0:	f000 fba6 	bl	800cb00 <_sbrk_r>
 800c3b4:	6030      	str	r0, [r6, #0]
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	f000 fba1 	bl	800cb00 <_sbrk_r>
 800c3be:	1c43      	adds	r3, r0, #1
 800c3c0:	d00a      	beq.n	800c3d8 <sbrk_aligned+0x34>
 800c3c2:	1cc4      	adds	r4, r0, #3
 800c3c4:	f024 0403 	bic.w	r4, r4, #3
 800c3c8:	42a0      	cmp	r0, r4
 800c3ca:	d007      	beq.n	800c3dc <sbrk_aligned+0x38>
 800c3cc:	1a21      	subs	r1, r4, r0
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	f000 fb96 	bl	800cb00 <_sbrk_r>
 800c3d4:	3001      	adds	r0, #1
 800c3d6:	d101      	bne.n	800c3dc <sbrk_aligned+0x38>
 800c3d8:	f04f 34ff 	mov.w	r4, #4294967295
 800c3dc:	4620      	mov	r0, r4
 800c3de:	bd70      	pop	{r4, r5, r6, pc}
 800c3e0:	20005318 	.word	0x20005318

0800c3e4 <_malloc_r>:
 800c3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3e8:	1ccd      	adds	r5, r1, #3
 800c3ea:	f025 0503 	bic.w	r5, r5, #3
 800c3ee:	3508      	adds	r5, #8
 800c3f0:	2d0c      	cmp	r5, #12
 800c3f2:	bf38      	it	cc
 800c3f4:	250c      	movcc	r5, #12
 800c3f6:	2d00      	cmp	r5, #0
 800c3f8:	4607      	mov	r7, r0
 800c3fa:	db01      	blt.n	800c400 <_malloc_r+0x1c>
 800c3fc:	42a9      	cmp	r1, r5
 800c3fe:	d905      	bls.n	800c40c <_malloc_r+0x28>
 800c400:	230c      	movs	r3, #12
 800c402:	603b      	str	r3, [r7, #0]
 800c404:	2600      	movs	r6, #0
 800c406:	4630      	mov	r0, r6
 800c408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c40c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c4e0 <_malloc_r+0xfc>
 800c410:	f000 f868 	bl	800c4e4 <__malloc_lock>
 800c414:	f8d8 3000 	ldr.w	r3, [r8]
 800c418:	461c      	mov	r4, r3
 800c41a:	bb5c      	cbnz	r4, 800c474 <_malloc_r+0x90>
 800c41c:	4629      	mov	r1, r5
 800c41e:	4638      	mov	r0, r7
 800c420:	f7ff ffc0 	bl	800c3a4 <sbrk_aligned>
 800c424:	1c43      	adds	r3, r0, #1
 800c426:	4604      	mov	r4, r0
 800c428:	d155      	bne.n	800c4d6 <_malloc_r+0xf2>
 800c42a:	f8d8 4000 	ldr.w	r4, [r8]
 800c42e:	4626      	mov	r6, r4
 800c430:	2e00      	cmp	r6, #0
 800c432:	d145      	bne.n	800c4c0 <_malloc_r+0xdc>
 800c434:	2c00      	cmp	r4, #0
 800c436:	d048      	beq.n	800c4ca <_malloc_r+0xe6>
 800c438:	6823      	ldr	r3, [r4, #0]
 800c43a:	4631      	mov	r1, r6
 800c43c:	4638      	mov	r0, r7
 800c43e:	eb04 0903 	add.w	r9, r4, r3
 800c442:	f000 fb5d 	bl	800cb00 <_sbrk_r>
 800c446:	4581      	cmp	r9, r0
 800c448:	d13f      	bne.n	800c4ca <_malloc_r+0xe6>
 800c44a:	6821      	ldr	r1, [r4, #0]
 800c44c:	1a6d      	subs	r5, r5, r1
 800c44e:	4629      	mov	r1, r5
 800c450:	4638      	mov	r0, r7
 800c452:	f7ff ffa7 	bl	800c3a4 <sbrk_aligned>
 800c456:	3001      	adds	r0, #1
 800c458:	d037      	beq.n	800c4ca <_malloc_r+0xe6>
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	442b      	add	r3, r5
 800c45e:	6023      	str	r3, [r4, #0]
 800c460:	f8d8 3000 	ldr.w	r3, [r8]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d038      	beq.n	800c4da <_malloc_r+0xf6>
 800c468:	685a      	ldr	r2, [r3, #4]
 800c46a:	42a2      	cmp	r2, r4
 800c46c:	d12b      	bne.n	800c4c6 <_malloc_r+0xe2>
 800c46e:	2200      	movs	r2, #0
 800c470:	605a      	str	r2, [r3, #4]
 800c472:	e00f      	b.n	800c494 <_malloc_r+0xb0>
 800c474:	6822      	ldr	r2, [r4, #0]
 800c476:	1b52      	subs	r2, r2, r5
 800c478:	d41f      	bmi.n	800c4ba <_malloc_r+0xd6>
 800c47a:	2a0b      	cmp	r2, #11
 800c47c:	d917      	bls.n	800c4ae <_malloc_r+0xca>
 800c47e:	1961      	adds	r1, r4, r5
 800c480:	42a3      	cmp	r3, r4
 800c482:	6025      	str	r5, [r4, #0]
 800c484:	bf18      	it	ne
 800c486:	6059      	strne	r1, [r3, #4]
 800c488:	6863      	ldr	r3, [r4, #4]
 800c48a:	bf08      	it	eq
 800c48c:	f8c8 1000 	streq.w	r1, [r8]
 800c490:	5162      	str	r2, [r4, r5]
 800c492:	604b      	str	r3, [r1, #4]
 800c494:	4638      	mov	r0, r7
 800c496:	f104 060b 	add.w	r6, r4, #11
 800c49a:	f000 f829 	bl	800c4f0 <__malloc_unlock>
 800c49e:	f026 0607 	bic.w	r6, r6, #7
 800c4a2:	1d23      	adds	r3, r4, #4
 800c4a4:	1af2      	subs	r2, r6, r3
 800c4a6:	d0ae      	beq.n	800c406 <_malloc_r+0x22>
 800c4a8:	1b9b      	subs	r3, r3, r6
 800c4aa:	50a3      	str	r3, [r4, r2]
 800c4ac:	e7ab      	b.n	800c406 <_malloc_r+0x22>
 800c4ae:	42a3      	cmp	r3, r4
 800c4b0:	6862      	ldr	r2, [r4, #4]
 800c4b2:	d1dd      	bne.n	800c470 <_malloc_r+0x8c>
 800c4b4:	f8c8 2000 	str.w	r2, [r8]
 800c4b8:	e7ec      	b.n	800c494 <_malloc_r+0xb0>
 800c4ba:	4623      	mov	r3, r4
 800c4bc:	6864      	ldr	r4, [r4, #4]
 800c4be:	e7ac      	b.n	800c41a <_malloc_r+0x36>
 800c4c0:	4634      	mov	r4, r6
 800c4c2:	6876      	ldr	r6, [r6, #4]
 800c4c4:	e7b4      	b.n	800c430 <_malloc_r+0x4c>
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	e7cc      	b.n	800c464 <_malloc_r+0x80>
 800c4ca:	230c      	movs	r3, #12
 800c4cc:	603b      	str	r3, [r7, #0]
 800c4ce:	4638      	mov	r0, r7
 800c4d0:	f000 f80e 	bl	800c4f0 <__malloc_unlock>
 800c4d4:	e797      	b.n	800c406 <_malloc_r+0x22>
 800c4d6:	6025      	str	r5, [r4, #0]
 800c4d8:	e7dc      	b.n	800c494 <_malloc_r+0xb0>
 800c4da:	605b      	str	r3, [r3, #4]
 800c4dc:	deff      	udf	#255	; 0xff
 800c4de:	bf00      	nop
 800c4e0:	20005314 	.word	0x20005314

0800c4e4 <__malloc_lock>:
 800c4e4:	4801      	ldr	r0, [pc, #4]	; (800c4ec <__malloc_lock+0x8>)
 800c4e6:	f7ff bf01 	b.w	800c2ec <__retarget_lock_acquire_recursive>
 800c4ea:	bf00      	nop
 800c4ec:	20005310 	.word	0x20005310

0800c4f0 <__malloc_unlock>:
 800c4f0:	4801      	ldr	r0, [pc, #4]	; (800c4f8 <__malloc_unlock+0x8>)
 800c4f2:	f7ff befc 	b.w	800c2ee <__retarget_lock_release_recursive>
 800c4f6:	bf00      	nop
 800c4f8:	20005310 	.word	0x20005310

0800c4fc <__ssputs_r>:
 800c4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c500:	688e      	ldr	r6, [r1, #8]
 800c502:	461f      	mov	r7, r3
 800c504:	42be      	cmp	r6, r7
 800c506:	680b      	ldr	r3, [r1, #0]
 800c508:	4682      	mov	sl, r0
 800c50a:	460c      	mov	r4, r1
 800c50c:	4690      	mov	r8, r2
 800c50e:	d82c      	bhi.n	800c56a <__ssputs_r+0x6e>
 800c510:	898a      	ldrh	r2, [r1, #12]
 800c512:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c516:	d026      	beq.n	800c566 <__ssputs_r+0x6a>
 800c518:	6965      	ldr	r5, [r4, #20]
 800c51a:	6909      	ldr	r1, [r1, #16]
 800c51c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c520:	eba3 0901 	sub.w	r9, r3, r1
 800c524:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c528:	1c7b      	adds	r3, r7, #1
 800c52a:	444b      	add	r3, r9
 800c52c:	106d      	asrs	r5, r5, #1
 800c52e:	429d      	cmp	r5, r3
 800c530:	bf38      	it	cc
 800c532:	461d      	movcc	r5, r3
 800c534:	0553      	lsls	r3, r2, #21
 800c536:	d527      	bpl.n	800c588 <__ssputs_r+0x8c>
 800c538:	4629      	mov	r1, r5
 800c53a:	f7ff ff53 	bl	800c3e4 <_malloc_r>
 800c53e:	4606      	mov	r6, r0
 800c540:	b360      	cbz	r0, 800c59c <__ssputs_r+0xa0>
 800c542:	6921      	ldr	r1, [r4, #16]
 800c544:	464a      	mov	r2, r9
 800c546:	f7ff fed3 	bl	800c2f0 <memcpy>
 800c54a:	89a3      	ldrh	r3, [r4, #12]
 800c54c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c554:	81a3      	strh	r3, [r4, #12]
 800c556:	6126      	str	r6, [r4, #16]
 800c558:	6165      	str	r5, [r4, #20]
 800c55a:	444e      	add	r6, r9
 800c55c:	eba5 0509 	sub.w	r5, r5, r9
 800c560:	6026      	str	r6, [r4, #0]
 800c562:	60a5      	str	r5, [r4, #8]
 800c564:	463e      	mov	r6, r7
 800c566:	42be      	cmp	r6, r7
 800c568:	d900      	bls.n	800c56c <__ssputs_r+0x70>
 800c56a:	463e      	mov	r6, r7
 800c56c:	6820      	ldr	r0, [r4, #0]
 800c56e:	4632      	mov	r2, r6
 800c570:	4641      	mov	r1, r8
 800c572:	f000 faab 	bl	800cacc <memmove>
 800c576:	68a3      	ldr	r3, [r4, #8]
 800c578:	1b9b      	subs	r3, r3, r6
 800c57a:	60a3      	str	r3, [r4, #8]
 800c57c:	6823      	ldr	r3, [r4, #0]
 800c57e:	4433      	add	r3, r6
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	2000      	movs	r0, #0
 800c584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c588:	462a      	mov	r2, r5
 800c58a:	f000 fac9 	bl	800cb20 <_realloc_r>
 800c58e:	4606      	mov	r6, r0
 800c590:	2800      	cmp	r0, #0
 800c592:	d1e0      	bne.n	800c556 <__ssputs_r+0x5a>
 800c594:	6921      	ldr	r1, [r4, #16]
 800c596:	4650      	mov	r0, sl
 800c598:	f7ff feb8 	bl	800c30c <_free_r>
 800c59c:	230c      	movs	r3, #12
 800c59e:	f8ca 3000 	str.w	r3, [sl]
 800c5a2:	89a3      	ldrh	r3, [r4, #12]
 800c5a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5a8:	81a3      	strh	r3, [r4, #12]
 800c5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ae:	e7e9      	b.n	800c584 <__ssputs_r+0x88>

0800c5b0 <_svfiprintf_r>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	4698      	mov	r8, r3
 800c5b6:	898b      	ldrh	r3, [r1, #12]
 800c5b8:	061b      	lsls	r3, r3, #24
 800c5ba:	b09d      	sub	sp, #116	; 0x74
 800c5bc:	4607      	mov	r7, r0
 800c5be:	460d      	mov	r5, r1
 800c5c0:	4614      	mov	r4, r2
 800c5c2:	d50e      	bpl.n	800c5e2 <_svfiprintf_r+0x32>
 800c5c4:	690b      	ldr	r3, [r1, #16]
 800c5c6:	b963      	cbnz	r3, 800c5e2 <_svfiprintf_r+0x32>
 800c5c8:	2140      	movs	r1, #64	; 0x40
 800c5ca:	f7ff ff0b 	bl	800c3e4 <_malloc_r>
 800c5ce:	6028      	str	r0, [r5, #0]
 800c5d0:	6128      	str	r0, [r5, #16]
 800c5d2:	b920      	cbnz	r0, 800c5de <_svfiprintf_r+0x2e>
 800c5d4:	230c      	movs	r3, #12
 800c5d6:	603b      	str	r3, [r7, #0]
 800c5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5dc:	e0d0      	b.n	800c780 <_svfiprintf_r+0x1d0>
 800c5de:	2340      	movs	r3, #64	; 0x40
 800c5e0:	616b      	str	r3, [r5, #20]
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e6:	2320      	movs	r3, #32
 800c5e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5f0:	2330      	movs	r3, #48	; 0x30
 800c5f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c798 <_svfiprintf_r+0x1e8>
 800c5f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5fa:	f04f 0901 	mov.w	r9, #1
 800c5fe:	4623      	mov	r3, r4
 800c600:	469a      	mov	sl, r3
 800c602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c606:	b10a      	cbz	r2, 800c60c <_svfiprintf_r+0x5c>
 800c608:	2a25      	cmp	r2, #37	; 0x25
 800c60a:	d1f9      	bne.n	800c600 <_svfiprintf_r+0x50>
 800c60c:	ebba 0b04 	subs.w	fp, sl, r4
 800c610:	d00b      	beq.n	800c62a <_svfiprintf_r+0x7a>
 800c612:	465b      	mov	r3, fp
 800c614:	4622      	mov	r2, r4
 800c616:	4629      	mov	r1, r5
 800c618:	4638      	mov	r0, r7
 800c61a:	f7ff ff6f 	bl	800c4fc <__ssputs_r>
 800c61e:	3001      	adds	r0, #1
 800c620:	f000 80a9 	beq.w	800c776 <_svfiprintf_r+0x1c6>
 800c624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c626:	445a      	add	r2, fp
 800c628:	9209      	str	r2, [sp, #36]	; 0x24
 800c62a:	f89a 3000 	ldrb.w	r3, [sl]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f000 80a1 	beq.w	800c776 <_svfiprintf_r+0x1c6>
 800c634:	2300      	movs	r3, #0
 800c636:	f04f 32ff 	mov.w	r2, #4294967295
 800c63a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c63e:	f10a 0a01 	add.w	sl, sl, #1
 800c642:	9304      	str	r3, [sp, #16]
 800c644:	9307      	str	r3, [sp, #28]
 800c646:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c64a:	931a      	str	r3, [sp, #104]	; 0x68
 800c64c:	4654      	mov	r4, sl
 800c64e:	2205      	movs	r2, #5
 800c650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c654:	4850      	ldr	r0, [pc, #320]	; (800c798 <_svfiprintf_r+0x1e8>)
 800c656:	f7f3 fdbb 	bl	80001d0 <memchr>
 800c65a:	9a04      	ldr	r2, [sp, #16]
 800c65c:	b9d8      	cbnz	r0, 800c696 <_svfiprintf_r+0xe6>
 800c65e:	06d0      	lsls	r0, r2, #27
 800c660:	bf44      	itt	mi
 800c662:	2320      	movmi	r3, #32
 800c664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c668:	0711      	lsls	r1, r2, #28
 800c66a:	bf44      	itt	mi
 800c66c:	232b      	movmi	r3, #43	; 0x2b
 800c66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c672:	f89a 3000 	ldrb.w	r3, [sl]
 800c676:	2b2a      	cmp	r3, #42	; 0x2a
 800c678:	d015      	beq.n	800c6a6 <_svfiprintf_r+0xf6>
 800c67a:	9a07      	ldr	r2, [sp, #28]
 800c67c:	4654      	mov	r4, sl
 800c67e:	2000      	movs	r0, #0
 800c680:	f04f 0c0a 	mov.w	ip, #10
 800c684:	4621      	mov	r1, r4
 800c686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c68a:	3b30      	subs	r3, #48	; 0x30
 800c68c:	2b09      	cmp	r3, #9
 800c68e:	d94d      	bls.n	800c72c <_svfiprintf_r+0x17c>
 800c690:	b1b0      	cbz	r0, 800c6c0 <_svfiprintf_r+0x110>
 800c692:	9207      	str	r2, [sp, #28]
 800c694:	e014      	b.n	800c6c0 <_svfiprintf_r+0x110>
 800c696:	eba0 0308 	sub.w	r3, r0, r8
 800c69a:	fa09 f303 	lsl.w	r3, r9, r3
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	9304      	str	r3, [sp, #16]
 800c6a2:	46a2      	mov	sl, r4
 800c6a4:	e7d2      	b.n	800c64c <_svfiprintf_r+0x9c>
 800c6a6:	9b03      	ldr	r3, [sp, #12]
 800c6a8:	1d19      	adds	r1, r3, #4
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	9103      	str	r1, [sp, #12]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	bfbb      	ittet	lt
 800c6b2:	425b      	neglt	r3, r3
 800c6b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c6b8:	9307      	strge	r3, [sp, #28]
 800c6ba:	9307      	strlt	r3, [sp, #28]
 800c6bc:	bfb8      	it	lt
 800c6be:	9204      	strlt	r2, [sp, #16]
 800c6c0:	7823      	ldrb	r3, [r4, #0]
 800c6c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c6c4:	d10c      	bne.n	800c6e0 <_svfiprintf_r+0x130>
 800c6c6:	7863      	ldrb	r3, [r4, #1]
 800c6c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6ca:	d134      	bne.n	800c736 <_svfiprintf_r+0x186>
 800c6cc:	9b03      	ldr	r3, [sp, #12]
 800c6ce:	1d1a      	adds	r2, r3, #4
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	9203      	str	r2, [sp, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	bfb8      	it	lt
 800c6d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6dc:	3402      	adds	r4, #2
 800c6de:	9305      	str	r3, [sp, #20]
 800c6e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c7a8 <_svfiprintf_r+0x1f8>
 800c6e4:	7821      	ldrb	r1, [r4, #0]
 800c6e6:	2203      	movs	r2, #3
 800c6e8:	4650      	mov	r0, sl
 800c6ea:	f7f3 fd71 	bl	80001d0 <memchr>
 800c6ee:	b138      	cbz	r0, 800c700 <_svfiprintf_r+0x150>
 800c6f0:	9b04      	ldr	r3, [sp, #16]
 800c6f2:	eba0 000a 	sub.w	r0, r0, sl
 800c6f6:	2240      	movs	r2, #64	; 0x40
 800c6f8:	4082      	lsls	r2, r0
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	3401      	adds	r4, #1
 800c6fe:	9304      	str	r3, [sp, #16]
 800c700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c704:	4825      	ldr	r0, [pc, #148]	; (800c79c <_svfiprintf_r+0x1ec>)
 800c706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c70a:	2206      	movs	r2, #6
 800c70c:	f7f3 fd60 	bl	80001d0 <memchr>
 800c710:	2800      	cmp	r0, #0
 800c712:	d038      	beq.n	800c786 <_svfiprintf_r+0x1d6>
 800c714:	4b22      	ldr	r3, [pc, #136]	; (800c7a0 <_svfiprintf_r+0x1f0>)
 800c716:	bb1b      	cbnz	r3, 800c760 <_svfiprintf_r+0x1b0>
 800c718:	9b03      	ldr	r3, [sp, #12]
 800c71a:	3307      	adds	r3, #7
 800c71c:	f023 0307 	bic.w	r3, r3, #7
 800c720:	3308      	adds	r3, #8
 800c722:	9303      	str	r3, [sp, #12]
 800c724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c726:	4433      	add	r3, r6
 800c728:	9309      	str	r3, [sp, #36]	; 0x24
 800c72a:	e768      	b.n	800c5fe <_svfiprintf_r+0x4e>
 800c72c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c730:	460c      	mov	r4, r1
 800c732:	2001      	movs	r0, #1
 800c734:	e7a6      	b.n	800c684 <_svfiprintf_r+0xd4>
 800c736:	2300      	movs	r3, #0
 800c738:	3401      	adds	r4, #1
 800c73a:	9305      	str	r3, [sp, #20]
 800c73c:	4619      	mov	r1, r3
 800c73e:	f04f 0c0a 	mov.w	ip, #10
 800c742:	4620      	mov	r0, r4
 800c744:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c748:	3a30      	subs	r2, #48	; 0x30
 800c74a:	2a09      	cmp	r2, #9
 800c74c:	d903      	bls.n	800c756 <_svfiprintf_r+0x1a6>
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d0c6      	beq.n	800c6e0 <_svfiprintf_r+0x130>
 800c752:	9105      	str	r1, [sp, #20]
 800c754:	e7c4      	b.n	800c6e0 <_svfiprintf_r+0x130>
 800c756:	fb0c 2101 	mla	r1, ip, r1, r2
 800c75a:	4604      	mov	r4, r0
 800c75c:	2301      	movs	r3, #1
 800c75e:	e7f0      	b.n	800c742 <_svfiprintf_r+0x192>
 800c760:	ab03      	add	r3, sp, #12
 800c762:	9300      	str	r3, [sp, #0]
 800c764:	462a      	mov	r2, r5
 800c766:	4b0f      	ldr	r3, [pc, #60]	; (800c7a4 <_svfiprintf_r+0x1f4>)
 800c768:	a904      	add	r1, sp, #16
 800c76a:	4638      	mov	r0, r7
 800c76c:	f3af 8000 	nop.w
 800c770:	1c42      	adds	r2, r0, #1
 800c772:	4606      	mov	r6, r0
 800c774:	d1d6      	bne.n	800c724 <_svfiprintf_r+0x174>
 800c776:	89ab      	ldrh	r3, [r5, #12]
 800c778:	065b      	lsls	r3, r3, #25
 800c77a:	f53f af2d 	bmi.w	800c5d8 <_svfiprintf_r+0x28>
 800c77e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c780:	b01d      	add	sp, #116	; 0x74
 800c782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c786:	ab03      	add	r3, sp, #12
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	462a      	mov	r2, r5
 800c78c:	4b05      	ldr	r3, [pc, #20]	; (800c7a4 <_svfiprintf_r+0x1f4>)
 800c78e:	a904      	add	r1, sp, #16
 800c790:	4638      	mov	r0, r7
 800c792:	f000 f879 	bl	800c888 <_printf_i>
 800c796:	e7eb      	b.n	800c770 <_svfiprintf_r+0x1c0>
 800c798:	0800e734 	.word	0x0800e734
 800c79c:	0800e73e 	.word	0x0800e73e
 800c7a0:	00000000 	.word	0x00000000
 800c7a4:	0800c4fd 	.word	0x0800c4fd
 800c7a8:	0800e73a 	.word	0x0800e73a

0800c7ac <_printf_common>:
 800c7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7b0:	4616      	mov	r6, r2
 800c7b2:	4699      	mov	r9, r3
 800c7b4:	688a      	ldr	r2, [r1, #8]
 800c7b6:	690b      	ldr	r3, [r1, #16]
 800c7b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	bfb8      	it	lt
 800c7c0:	4613      	movlt	r3, r2
 800c7c2:	6033      	str	r3, [r6, #0]
 800c7c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7c8:	4607      	mov	r7, r0
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	b10a      	cbz	r2, 800c7d2 <_printf_common+0x26>
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	6033      	str	r3, [r6, #0]
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	0699      	lsls	r1, r3, #26
 800c7d6:	bf42      	ittt	mi
 800c7d8:	6833      	ldrmi	r3, [r6, #0]
 800c7da:	3302      	addmi	r3, #2
 800c7dc:	6033      	strmi	r3, [r6, #0]
 800c7de:	6825      	ldr	r5, [r4, #0]
 800c7e0:	f015 0506 	ands.w	r5, r5, #6
 800c7e4:	d106      	bne.n	800c7f4 <_printf_common+0x48>
 800c7e6:	f104 0a19 	add.w	sl, r4, #25
 800c7ea:	68e3      	ldr	r3, [r4, #12]
 800c7ec:	6832      	ldr	r2, [r6, #0]
 800c7ee:	1a9b      	subs	r3, r3, r2
 800c7f0:	42ab      	cmp	r3, r5
 800c7f2:	dc26      	bgt.n	800c842 <_printf_common+0x96>
 800c7f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7f8:	1e13      	subs	r3, r2, #0
 800c7fa:	6822      	ldr	r2, [r4, #0]
 800c7fc:	bf18      	it	ne
 800c7fe:	2301      	movne	r3, #1
 800c800:	0692      	lsls	r2, r2, #26
 800c802:	d42b      	bmi.n	800c85c <_printf_common+0xb0>
 800c804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c808:	4649      	mov	r1, r9
 800c80a:	4638      	mov	r0, r7
 800c80c:	47c0      	blx	r8
 800c80e:	3001      	adds	r0, #1
 800c810:	d01e      	beq.n	800c850 <_printf_common+0xa4>
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	6922      	ldr	r2, [r4, #16]
 800c816:	f003 0306 	and.w	r3, r3, #6
 800c81a:	2b04      	cmp	r3, #4
 800c81c:	bf02      	ittt	eq
 800c81e:	68e5      	ldreq	r5, [r4, #12]
 800c820:	6833      	ldreq	r3, [r6, #0]
 800c822:	1aed      	subeq	r5, r5, r3
 800c824:	68a3      	ldr	r3, [r4, #8]
 800c826:	bf0c      	ite	eq
 800c828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c82c:	2500      	movne	r5, #0
 800c82e:	4293      	cmp	r3, r2
 800c830:	bfc4      	itt	gt
 800c832:	1a9b      	subgt	r3, r3, r2
 800c834:	18ed      	addgt	r5, r5, r3
 800c836:	2600      	movs	r6, #0
 800c838:	341a      	adds	r4, #26
 800c83a:	42b5      	cmp	r5, r6
 800c83c:	d11a      	bne.n	800c874 <_printf_common+0xc8>
 800c83e:	2000      	movs	r0, #0
 800c840:	e008      	b.n	800c854 <_printf_common+0xa8>
 800c842:	2301      	movs	r3, #1
 800c844:	4652      	mov	r2, sl
 800c846:	4649      	mov	r1, r9
 800c848:	4638      	mov	r0, r7
 800c84a:	47c0      	blx	r8
 800c84c:	3001      	adds	r0, #1
 800c84e:	d103      	bne.n	800c858 <_printf_common+0xac>
 800c850:	f04f 30ff 	mov.w	r0, #4294967295
 800c854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c858:	3501      	adds	r5, #1
 800c85a:	e7c6      	b.n	800c7ea <_printf_common+0x3e>
 800c85c:	18e1      	adds	r1, r4, r3
 800c85e:	1c5a      	adds	r2, r3, #1
 800c860:	2030      	movs	r0, #48	; 0x30
 800c862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c866:	4422      	add	r2, r4
 800c868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c86c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c870:	3302      	adds	r3, #2
 800c872:	e7c7      	b.n	800c804 <_printf_common+0x58>
 800c874:	2301      	movs	r3, #1
 800c876:	4622      	mov	r2, r4
 800c878:	4649      	mov	r1, r9
 800c87a:	4638      	mov	r0, r7
 800c87c:	47c0      	blx	r8
 800c87e:	3001      	adds	r0, #1
 800c880:	d0e6      	beq.n	800c850 <_printf_common+0xa4>
 800c882:	3601      	adds	r6, #1
 800c884:	e7d9      	b.n	800c83a <_printf_common+0x8e>
	...

0800c888 <_printf_i>:
 800c888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c88c:	7e0f      	ldrb	r7, [r1, #24]
 800c88e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c890:	2f78      	cmp	r7, #120	; 0x78
 800c892:	4691      	mov	r9, r2
 800c894:	4680      	mov	r8, r0
 800c896:	460c      	mov	r4, r1
 800c898:	469a      	mov	sl, r3
 800c89a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c89e:	d807      	bhi.n	800c8b0 <_printf_i+0x28>
 800c8a0:	2f62      	cmp	r7, #98	; 0x62
 800c8a2:	d80a      	bhi.n	800c8ba <_printf_i+0x32>
 800c8a4:	2f00      	cmp	r7, #0
 800c8a6:	f000 80d4 	beq.w	800ca52 <_printf_i+0x1ca>
 800c8aa:	2f58      	cmp	r7, #88	; 0x58
 800c8ac:	f000 80c0 	beq.w	800ca30 <_printf_i+0x1a8>
 800c8b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8b8:	e03a      	b.n	800c930 <_printf_i+0xa8>
 800c8ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8be:	2b15      	cmp	r3, #21
 800c8c0:	d8f6      	bhi.n	800c8b0 <_printf_i+0x28>
 800c8c2:	a101      	add	r1, pc, #4	; (adr r1, 800c8c8 <_printf_i+0x40>)
 800c8c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8c8:	0800c921 	.word	0x0800c921
 800c8cc:	0800c935 	.word	0x0800c935
 800c8d0:	0800c8b1 	.word	0x0800c8b1
 800c8d4:	0800c8b1 	.word	0x0800c8b1
 800c8d8:	0800c8b1 	.word	0x0800c8b1
 800c8dc:	0800c8b1 	.word	0x0800c8b1
 800c8e0:	0800c935 	.word	0x0800c935
 800c8e4:	0800c8b1 	.word	0x0800c8b1
 800c8e8:	0800c8b1 	.word	0x0800c8b1
 800c8ec:	0800c8b1 	.word	0x0800c8b1
 800c8f0:	0800c8b1 	.word	0x0800c8b1
 800c8f4:	0800ca39 	.word	0x0800ca39
 800c8f8:	0800c961 	.word	0x0800c961
 800c8fc:	0800c9f3 	.word	0x0800c9f3
 800c900:	0800c8b1 	.word	0x0800c8b1
 800c904:	0800c8b1 	.word	0x0800c8b1
 800c908:	0800ca5b 	.word	0x0800ca5b
 800c90c:	0800c8b1 	.word	0x0800c8b1
 800c910:	0800c961 	.word	0x0800c961
 800c914:	0800c8b1 	.word	0x0800c8b1
 800c918:	0800c8b1 	.word	0x0800c8b1
 800c91c:	0800c9fb 	.word	0x0800c9fb
 800c920:	682b      	ldr	r3, [r5, #0]
 800c922:	1d1a      	adds	r2, r3, #4
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	602a      	str	r2, [r5, #0]
 800c928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c92c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c930:	2301      	movs	r3, #1
 800c932:	e09f      	b.n	800ca74 <_printf_i+0x1ec>
 800c934:	6820      	ldr	r0, [r4, #0]
 800c936:	682b      	ldr	r3, [r5, #0]
 800c938:	0607      	lsls	r7, r0, #24
 800c93a:	f103 0104 	add.w	r1, r3, #4
 800c93e:	6029      	str	r1, [r5, #0]
 800c940:	d501      	bpl.n	800c946 <_printf_i+0xbe>
 800c942:	681e      	ldr	r6, [r3, #0]
 800c944:	e003      	b.n	800c94e <_printf_i+0xc6>
 800c946:	0646      	lsls	r6, r0, #25
 800c948:	d5fb      	bpl.n	800c942 <_printf_i+0xba>
 800c94a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c94e:	2e00      	cmp	r6, #0
 800c950:	da03      	bge.n	800c95a <_printf_i+0xd2>
 800c952:	232d      	movs	r3, #45	; 0x2d
 800c954:	4276      	negs	r6, r6
 800c956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c95a:	485a      	ldr	r0, [pc, #360]	; (800cac4 <_printf_i+0x23c>)
 800c95c:	230a      	movs	r3, #10
 800c95e:	e012      	b.n	800c986 <_printf_i+0xfe>
 800c960:	682b      	ldr	r3, [r5, #0]
 800c962:	6820      	ldr	r0, [r4, #0]
 800c964:	1d19      	adds	r1, r3, #4
 800c966:	6029      	str	r1, [r5, #0]
 800c968:	0605      	lsls	r5, r0, #24
 800c96a:	d501      	bpl.n	800c970 <_printf_i+0xe8>
 800c96c:	681e      	ldr	r6, [r3, #0]
 800c96e:	e002      	b.n	800c976 <_printf_i+0xee>
 800c970:	0641      	lsls	r1, r0, #25
 800c972:	d5fb      	bpl.n	800c96c <_printf_i+0xe4>
 800c974:	881e      	ldrh	r6, [r3, #0]
 800c976:	4853      	ldr	r0, [pc, #332]	; (800cac4 <_printf_i+0x23c>)
 800c978:	2f6f      	cmp	r7, #111	; 0x6f
 800c97a:	bf0c      	ite	eq
 800c97c:	2308      	moveq	r3, #8
 800c97e:	230a      	movne	r3, #10
 800c980:	2100      	movs	r1, #0
 800c982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c986:	6865      	ldr	r5, [r4, #4]
 800c988:	60a5      	str	r5, [r4, #8]
 800c98a:	2d00      	cmp	r5, #0
 800c98c:	bfa2      	ittt	ge
 800c98e:	6821      	ldrge	r1, [r4, #0]
 800c990:	f021 0104 	bicge.w	r1, r1, #4
 800c994:	6021      	strge	r1, [r4, #0]
 800c996:	b90e      	cbnz	r6, 800c99c <_printf_i+0x114>
 800c998:	2d00      	cmp	r5, #0
 800c99a:	d04b      	beq.n	800ca34 <_printf_i+0x1ac>
 800c99c:	4615      	mov	r5, r2
 800c99e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c9a2:	fb03 6711 	mls	r7, r3, r1, r6
 800c9a6:	5dc7      	ldrb	r7, [r0, r7]
 800c9a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c9ac:	4637      	mov	r7, r6
 800c9ae:	42bb      	cmp	r3, r7
 800c9b0:	460e      	mov	r6, r1
 800c9b2:	d9f4      	bls.n	800c99e <_printf_i+0x116>
 800c9b4:	2b08      	cmp	r3, #8
 800c9b6:	d10b      	bne.n	800c9d0 <_printf_i+0x148>
 800c9b8:	6823      	ldr	r3, [r4, #0]
 800c9ba:	07de      	lsls	r6, r3, #31
 800c9bc:	d508      	bpl.n	800c9d0 <_printf_i+0x148>
 800c9be:	6923      	ldr	r3, [r4, #16]
 800c9c0:	6861      	ldr	r1, [r4, #4]
 800c9c2:	4299      	cmp	r1, r3
 800c9c4:	bfde      	ittt	le
 800c9c6:	2330      	movle	r3, #48	; 0x30
 800c9c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c9cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c9d0:	1b52      	subs	r2, r2, r5
 800c9d2:	6122      	str	r2, [r4, #16]
 800c9d4:	f8cd a000 	str.w	sl, [sp]
 800c9d8:	464b      	mov	r3, r9
 800c9da:	aa03      	add	r2, sp, #12
 800c9dc:	4621      	mov	r1, r4
 800c9de:	4640      	mov	r0, r8
 800c9e0:	f7ff fee4 	bl	800c7ac <_printf_common>
 800c9e4:	3001      	adds	r0, #1
 800c9e6:	d14a      	bne.n	800ca7e <_printf_i+0x1f6>
 800c9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ec:	b004      	add	sp, #16
 800c9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9f2:	6823      	ldr	r3, [r4, #0]
 800c9f4:	f043 0320 	orr.w	r3, r3, #32
 800c9f8:	6023      	str	r3, [r4, #0]
 800c9fa:	4833      	ldr	r0, [pc, #204]	; (800cac8 <_printf_i+0x240>)
 800c9fc:	2778      	movs	r7, #120	; 0x78
 800c9fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	6829      	ldr	r1, [r5, #0]
 800ca06:	061f      	lsls	r7, r3, #24
 800ca08:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca0c:	d402      	bmi.n	800ca14 <_printf_i+0x18c>
 800ca0e:	065f      	lsls	r7, r3, #25
 800ca10:	bf48      	it	mi
 800ca12:	b2b6      	uxthmi	r6, r6
 800ca14:	07df      	lsls	r7, r3, #31
 800ca16:	bf48      	it	mi
 800ca18:	f043 0320 	orrmi.w	r3, r3, #32
 800ca1c:	6029      	str	r1, [r5, #0]
 800ca1e:	bf48      	it	mi
 800ca20:	6023      	strmi	r3, [r4, #0]
 800ca22:	b91e      	cbnz	r6, 800ca2c <_printf_i+0x1a4>
 800ca24:	6823      	ldr	r3, [r4, #0]
 800ca26:	f023 0320 	bic.w	r3, r3, #32
 800ca2a:	6023      	str	r3, [r4, #0]
 800ca2c:	2310      	movs	r3, #16
 800ca2e:	e7a7      	b.n	800c980 <_printf_i+0xf8>
 800ca30:	4824      	ldr	r0, [pc, #144]	; (800cac4 <_printf_i+0x23c>)
 800ca32:	e7e4      	b.n	800c9fe <_printf_i+0x176>
 800ca34:	4615      	mov	r5, r2
 800ca36:	e7bd      	b.n	800c9b4 <_printf_i+0x12c>
 800ca38:	682b      	ldr	r3, [r5, #0]
 800ca3a:	6826      	ldr	r6, [r4, #0]
 800ca3c:	6961      	ldr	r1, [r4, #20]
 800ca3e:	1d18      	adds	r0, r3, #4
 800ca40:	6028      	str	r0, [r5, #0]
 800ca42:	0635      	lsls	r5, r6, #24
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	d501      	bpl.n	800ca4c <_printf_i+0x1c4>
 800ca48:	6019      	str	r1, [r3, #0]
 800ca4a:	e002      	b.n	800ca52 <_printf_i+0x1ca>
 800ca4c:	0670      	lsls	r0, r6, #25
 800ca4e:	d5fb      	bpl.n	800ca48 <_printf_i+0x1c0>
 800ca50:	8019      	strh	r1, [r3, #0]
 800ca52:	2300      	movs	r3, #0
 800ca54:	6123      	str	r3, [r4, #16]
 800ca56:	4615      	mov	r5, r2
 800ca58:	e7bc      	b.n	800c9d4 <_printf_i+0x14c>
 800ca5a:	682b      	ldr	r3, [r5, #0]
 800ca5c:	1d1a      	adds	r2, r3, #4
 800ca5e:	602a      	str	r2, [r5, #0]
 800ca60:	681d      	ldr	r5, [r3, #0]
 800ca62:	6862      	ldr	r2, [r4, #4]
 800ca64:	2100      	movs	r1, #0
 800ca66:	4628      	mov	r0, r5
 800ca68:	f7f3 fbb2 	bl	80001d0 <memchr>
 800ca6c:	b108      	cbz	r0, 800ca72 <_printf_i+0x1ea>
 800ca6e:	1b40      	subs	r0, r0, r5
 800ca70:	6060      	str	r0, [r4, #4]
 800ca72:	6863      	ldr	r3, [r4, #4]
 800ca74:	6123      	str	r3, [r4, #16]
 800ca76:	2300      	movs	r3, #0
 800ca78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca7c:	e7aa      	b.n	800c9d4 <_printf_i+0x14c>
 800ca7e:	6923      	ldr	r3, [r4, #16]
 800ca80:	462a      	mov	r2, r5
 800ca82:	4649      	mov	r1, r9
 800ca84:	4640      	mov	r0, r8
 800ca86:	47d0      	blx	sl
 800ca88:	3001      	adds	r0, #1
 800ca8a:	d0ad      	beq.n	800c9e8 <_printf_i+0x160>
 800ca8c:	6823      	ldr	r3, [r4, #0]
 800ca8e:	079b      	lsls	r3, r3, #30
 800ca90:	d413      	bmi.n	800caba <_printf_i+0x232>
 800ca92:	68e0      	ldr	r0, [r4, #12]
 800ca94:	9b03      	ldr	r3, [sp, #12]
 800ca96:	4298      	cmp	r0, r3
 800ca98:	bfb8      	it	lt
 800ca9a:	4618      	movlt	r0, r3
 800ca9c:	e7a6      	b.n	800c9ec <_printf_i+0x164>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	4632      	mov	r2, r6
 800caa2:	4649      	mov	r1, r9
 800caa4:	4640      	mov	r0, r8
 800caa6:	47d0      	blx	sl
 800caa8:	3001      	adds	r0, #1
 800caaa:	d09d      	beq.n	800c9e8 <_printf_i+0x160>
 800caac:	3501      	adds	r5, #1
 800caae:	68e3      	ldr	r3, [r4, #12]
 800cab0:	9903      	ldr	r1, [sp, #12]
 800cab2:	1a5b      	subs	r3, r3, r1
 800cab4:	42ab      	cmp	r3, r5
 800cab6:	dcf2      	bgt.n	800ca9e <_printf_i+0x216>
 800cab8:	e7eb      	b.n	800ca92 <_printf_i+0x20a>
 800caba:	2500      	movs	r5, #0
 800cabc:	f104 0619 	add.w	r6, r4, #25
 800cac0:	e7f5      	b.n	800caae <_printf_i+0x226>
 800cac2:	bf00      	nop
 800cac4:	0800e745 	.word	0x0800e745
 800cac8:	0800e756 	.word	0x0800e756

0800cacc <memmove>:
 800cacc:	4288      	cmp	r0, r1
 800cace:	b510      	push	{r4, lr}
 800cad0:	eb01 0402 	add.w	r4, r1, r2
 800cad4:	d902      	bls.n	800cadc <memmove+0x10>
 800cad6:	4284      	cmp	r4, r0
 800cad8:	4623      	mov	r3, r4
 800cada:	d807      	bhi.n	800caec <memmove+0x20>
 800cadc:	1e43      	subs	r3, r0, #1
 800cade:	42a1      	cmp	r1, r4
 800cae0:	d008      	beq.n	800caf4 <memmove+0x28>
 800cae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caea:	e7f8      	b.n	800cade <memmove+0x12>
 800caec:	4402      	add	r2, r0
 800caee:	4601      	mov	r1, r0
 800caf0:	428a      	cmp	r2, r1
 800caf2:	d100      	bne.n	800caf6 <memmove+0x2a>
 800caf4:	bd10      	pop	{r4, pc}
 800caf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cafa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cafe:	e7f7      	b.n	800caf0 <memmove+0x24>

0800cb00 <_sbrk_r>:
 800cb00:	b538      	push	{r3, r4, r5, lr}
 800cb02:	4d06      	ldr	r5, [pc, #24]	; (800cb1c <_sbrk_r+0x1c>)
 800cb04:	2300      	movs	r3, #0
 800cb06:	4604      	mov	r4, r0
 800cb08:	4608      	mov	r0, r1
 800cb0a:	602b      	str	r3, [r5, #0]
 800cb0c:	f7f7 f98a 	bl	8003e24 <_sbrk>
 800cb10:	1c43      	adds	r3, r0, #1
 800cb12:	d102      	bne.n	800cb1a <_sbrk_r+0x1a>
 800cb14:	682b      	ldr	r3, [r5, #0]
 800cb16:	b103      	cbz	r3, 800cb1a <_sbrk_r+0x1a>
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	bd38      	pop	{r3, r4, r5, pc}
 800cb1c:	2000530c 	.word	0x2000530c

0800cb20 <_realloc_r>:
 800cb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb24:	4680      	mov	r8, r0
 800cb26:	4614      	mov	r4, r2
 800cb28:	460e      	mov	r6, r1
 800cb2a:	b921      	cbnz	r1, 800cb36 <_realloc_r+0x16>
 800cb2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb30:	4611      	mov	r1, r2
 800cb32:	f7ff bc57 	b.w	800c3e4 <_malloc_r>
 800cb36:	b92a      	cbnz	r2, 800cb44 <_realloc_r+0x24>
 800cb38:	f7ff fbe8 	bl	800c30c <_free_r>
 800cb3c:	4625      	mov	r5, r4
 800cb3e:	4628      	mov	r0, r5
 800cb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb44:	f000 f81b 	bl	800cb7e <_malloc_usable_size_r>
 800cb48:	4284      	cmp	r4, r0
 800cb4a:	4607      	mov	r7, r0
 800cb4c:	d802      	bhi.n	800cb54 <_realloc_r+0x34>
 800cb4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb52:	d812      	bhi.n	800cb7a <_realloc_r+0x5a>
 800cb54:	4621      	mov	r1, r4
 800cb56:	4640      	mov	r0, r8
 800cb58:	f7ff fc44 	bl	800c3e4 <_malloc_r>
 800cb5c:	4605      	mov	r5, r0
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d0ed      	beq.n	800cb3e <_realloc_r+0x1e>
 800cb62:	42bc      	cmp	r4, r7
 800cb64:	4622      	mov	r2, r4
 800cb66:	4631      	mov	r1, r6
 800cb68:	bf28      	it	cs
 800cb6a:	463a      	movcs	r2, r7
 800cb6c:	f7ff fbc0 	bl	800c2f0 <memcpy>
 800cb70:	4631      	mov	r1, r6
 800cb72:	4640      	mov	r0, r8
 800cb74:	f7ff fbca 	bl	800c30c <_free_r>
 800cb78:	e7e1      	b.n	800cb3e <_realloc_r+0x1e>
 800cb7a:	4635      	mov	r5, r6
 800cb7c:	e7df      	b.n	800cb3e <_realloc_r+0x1e>

0800cb7e <_malloc_usable_size_r>:
 800cb7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb82:	1f18      	subs	r0, r3, #4
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	bfbc      	itt	lt
 800cb88:	580b      	ldrlt	r3, [r1, r0]
 800cb8a:	18c0      	addlt	r0, r0, r3
 800cb8c:	4770      	bx	lr
	...

0800cb90 <pow>:
 800cb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb92:	ed2d 8b02 	vpush	{d8}
 800cb96:	eeb0 8a40 	vmov.f32	s16, s0
 800cb9a:	eef0 8a60 	vmov.f32	s17, s1
 800cb9e:	ec55 4b11 	vmov	r4, r5, d1
 800cba2:	f000 f895 	bl	800ccd0 <__ieee754_pow>
 800cba6:	4622      	mov	r2, r4
 800cba8:	462b      	mov	r3, r5
 800cbaa:	4620      	mov	r0, r4
 800cbac:	4629      	mov	r1, r5
 800cbae:	ec57 6b10 	vmov	r6, r7, d0
 800cbb2:	f7f3 ffb3 	bl	8000b1c <__aeabi_dcmpun>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d13b      	bne.n	800cc32 <pow+0xa2>
 800cbba:	ec51 0b18 	vmov	r0, r1, d8
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	f7f3 ff79 	bl	8000ab8 <__aeabi_dcmpeq>
 800cbc6:	b1b8      	cbz	r0, 800cbf8 <pow+0x68>
 800cbc8:	2200      	movs	r2, #0
 800cbca:	2300      	movs	r3, #0
 800cbcc:	4620      	mov	r0, r4
 800cbce:	4629      	mov	r1, r5
 800cbd0:	f7f3 ff72 	bl	8000ab8 <__aeabi_dcmpeq>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d146      	bne.n	800cc66 <pow+0xd6>
 800cbd8:	ec45 4b10 	vmov	d0, r4, r5
 800cbdc:	f000 f848 	bl	800cc70 <finite>
 800cbe0:	b338      	cbz	r0, 800cc32 <pow+0xa2>
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	4629      	mov	r1, r5
 800cbea:	f7f3 ff6f 	bl	8000acc <__aeabi_dcmplt>
 800cbee:	b300      	cbz	r0, 800cc32 <pow+0xa2>
 800cbf0:	f7ff fb52 	bl	800c298 <__errno>
 800cbf4:	2322      	movs	r3, #34	; 0x22
 800cbf6:	e01b      	b.n	800cc30 <pow+0xa0>
 800cbf8:	ec47 6b10 	vmov	d0, r6, r7
 800cbfc:	f000 f838 	bl	800cc70 <finite>
 800cc00:	b9e0      	cbnz	r0, 800cc3c <pow+0xac>
 800cc02:	eeb0 0a48 	vmov.f32	s0, s16
 800cc06:	eef0 0a68 	vmov.f32	s1, s17
 800cc0a:	f000 f831 	bl	800cc70 <finite>
 800cc0e:	b1a8      	cbz	r0, 800cc3c <pow+0xac>
 800cc10:	ec45 4b10 	vmov	d0, r4, r5
 800cc14:	f000 f82c 	bl	800cc70 <finite>
 800cc18:	b180      	cbz	r0, 800cc3c <pow+0xac>
 800cc1a:	4632      	mov	r2, r6
 800cc1c:	463b      	mov	r3, r7
 800cc1e:	4630      	mov	r0, r6
 800cc20:	4639      	mov	r1, r7
 800cc22:	f7f3 ff7b 	bl	8000b1c <__aeabi_dcmpun>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	d0e2      	beq.n	800cbf0 <pow+0x60>
 800cc2a:	f7ff fb35 	bl	800c298 <__errno>
 800cc2e:	2321      	movs	r3, #33	; 0x21
 800cc30:	6003      	str	r3, [r0, #0]
 800cc32:	ecbd 8b02 	vpop	{d8}
 800cc36:	ec47 6b10 	vmov	d0, r6, r7
 800cc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	2300      	movs	r3, #0
 800cc40:	4630      	mov	r0, r6
 800cc42:	4639      	mov	r1, r7
 800cc44:	f7f3 ff38 	bl	8000ab8 <__aeabi_dcmpeq>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d0f2      	beq.n	800cc32 <pow+0xa2>
 800cc4c:	eeb0 0a48 	vmov.f32	s0, s16
 800cc50:	eef0 0a68 	vmov.f32	s1, s17
 800cc54:	f000 f80c 	bl	800cc70 <finite>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	d0ea      	beq.n	800cc32 <pow+0xa2>
 800cc5c:	ec45 4b10 	vmov	d0, r4, r5
 800cc60:	f000 f806 	bl	800cc70 <finite>
 800cc64:	e7c3      	b.n	800cbee <pow+0x5e>
 800cc66:	4f01      	ldr	r7, [pc, #4]	; (800cc6c <pow+0xdc>)
 800cc68:	2600      	movs	r6, #0
 800cc6a:	e7e2      	b.n	800cc32 <pow+0xa2>
 800cc6c:	3ff00000 	.word	0x3ff00000

0800cc70 <finite>:
 800cc70:	b082      	sub	sp, #8
 800cc72:	ed8d 0b00 	vstr	d0, [sp]
 800cc76:	9801      	ldr	r0, [sp, #4]
 800cc78:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cc7c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cc80:	0fc0      	lsrs	r0, r0, #31
 800cc82:	b002      	add	sp, #8
 800cc84:	4770      	bx	lr
	...

0800cc88 <roundf>:
 800cc88:	ee10 0a10 	vmov	r0, s0
 800cc8c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800cc90:	3a7f      	subs	r2, #127	; 0x7f
 800cc92:	2a16      	cmp	r2, #22
 800cc94:	dc15      	bgt.n	800ccc2 <roundf+0x3a>
 800cc96:	2a00      	cmp	r2, #0
 800cc98:	da08      	bge.n	800ccac <roundf+0x24>
 800cc9a:	3201      	adds	r2, #1
 800cc9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800cca0:	d101      	bne.n	800cca6 <roundf+0x1e>
 800cca2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800cca6:	ee00 3a10 	vmov	s0, r3
 800ccaa:	4770      	bx	lr
 800ccac:	4907      	ldr	r1, [pc, #28]	; (800cccc <roundf+0x44>)
 800ccae:	4111      	asrs	r1, r2
 800ccb0:	4208      	tst	r0, r1
 800ccb2:	d0fa      	beq.n	800ccaa <roundf+0x22>
 800ccb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ccb8:	4113      	asrs	r3, r2
 800ccba:	4403      	add	r3, r0
 800ccbc:	ea23 0301 	bic.w	r3, r3, r1
 800ccc0:	e7f1      	b.n	800cca6 <roundf+0x1e>
 800ccc2:	2a80      	cmp	r2, #128	; 0x80
 800ccc4:	d1f1      	bne.n	800ccaa <roundf+0x22>
 800ccc6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ccca:	4770      	bx	lr
 800cccc:	007fffff 	.word	0x007fffff

0800ccd0 <__ieee754_pow>:
 800ccd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd4:	ed2d 8b06 	vpush	{d8-d10}
 800ccd8:	b089      	sub	sp, #36	; 0x24
 800ccda:	ed8d 1b00 	vstr	d1, [sp]
 800ccde:	e9dd 2900 	ldrd	r2, r9, [sp]
 800cce2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800cce6:	ea58 0102 	orrs.w	r1, r8, r2
 800ccea:	ec57 6b10 	vmov	r6, r7, d0
 800ccee:	d115      	bne.n	800cd1c <__ieee754_pow+0x4c>
 800ccf0:	19b3      	adds	r3, r6, r6
 800ccf2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ccf6:	4152      	adcs	r2, r2
 800ccf8:	4299      	cmp	r1, r3
 800ccfa:	4b89      	ldr	r3, [pc, #548]	; (800cf20 <__ieee754_pow+0x250>)
 800ccfc:	4193      	sbcs	r3, r2
 800ccfe:	f080 84d1 	bcs.w	800d6a4 <__ieee754_pow+0x9d4>
 800cd02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd06:	4630      	mov	r0, r6
 800cd08:	4639      	mov	r1, r7
 800cd0a:	f7f3 fab7 	bl	800027c <__adddf3>
 800cd0e:	ec41 0b10 	vmov	d0, r0, r1
 800cd12:	b009      	add	sp, #36	; 0x24
 800cd14:	ecbd 8b06 	vpop	{d8-d10}
 800cd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd1c:	4b81      	ldr	r3, [pc, #516]	; (800cf24 <__ieee754_pow+0x254>)
 800cd1e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800cd22:	429c      	cmp	r4, r3
 800cd24:	ee10 aa10 	vmov	sl, s0
 800cd28:	463d      	mov	r5, r7
 800cd2a:	dc06      	bgt.n	800cd3a <__ieee754_pow+0x6a>
 800cd2c:	d101      	bne.n	800cd32 <__ieee754_pow+0x62>
 800cd2e:	2e00      	cmp	r6, #0
 800cd30:	d1e7      	bne.n	800cd02 <__ieee754_pow+0x32>
 800cd32:	4598      	cmp	r8, r3
 800cd34:	dc01      	bgt.n	800cd3a <__ieee754_pow+0x6a>
 800cd36:	d10f      	bne.n	800cd58 <__ieee754_pow+0x88>
 800cd38:	b172      	cbz	r2, 800cd58 <__ieee754_pow+0x88>
 800cd3a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800cd3e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800cd42:	ea55 050a 	orrs.w	r5, r5, sl
 800cd46:	d1dc      	bne.n	800cd02 <__ieee754_pow+0x32>
 800cd48:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd4c:	18db      	adds	r3, r3, r3
 800cd4e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800cd52:	4152      	adcs	r2, r2
 800cd54:	429d      	cmp	r5, r3
 800cd56:	e7d0      	b.n	800ccfa <__ieee754_pow+0x2a>
 800cd58:	2d00      	cmp	r5, #0
 800cd5a:	da3b      	bge.n	800cdd4 <__ieee754_pow+0x104>
 800cd5c:	4b72      	ldr	r3, [pc, #456]	; (800cf28 <__ieee754_pow+0x258>)
 800cd5e:	4598      	cmp	r8, r3
 800cd60:	dc51      	bgt.n	800ce06 <__ieee754_pow+0x136>
 800cd62:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cd66:	4598      	cmp	r8, r3
 800cd68:	f340 84ab 	ble.w	800d6c2 <__ieee754_pow+0x9f2>
 800cd6c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cd70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cd74:	2b14      	cmp	r3, #20
 800cd76:	dd0f      	ble.n	800cd98 <__ieee754_pow+0xc8>
 800cd78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cd7c:	fa22 f103 	lsr.w	r1, r2, r3
 800cd80:	fa01 f303 	lsl.w	r3, r1, r3
 800cd84:	4293      	cmp	r3, r2
 800cd86:	f040 849c 	bne.w	800d6c2 <__ieee754_pow+0x9f2>
 800cd8a:	f001 0101 	and.w	r1, r1, #1
 800cd8e:	f1c1 0302 	rsb	r3, r1, #2
 800cd92:	9304      	str	r3, [sp, #16]
 800cd94:	b182      	cbz	r2, 800cdb8 <__ieee754_pow+0xe8>
 800cd96:	e05f      	b.n	800ce58 <__ieee754_pow+0x188>
 800cd98:	2a00      	cmp	r2, #0
 800cd9a:	d15b      	bne.n	800ce54 <__ieee754_pow+0x184>
 800cd9c:	f1c3 0314 	rsb	r3, r3, #20
 800cda0:	fa48 f103 	asr.w	r1, r8, r3
 800cda4:	fa01 f303 	lsl.w	r3, r1, r3
 800cda8:	4543      	cmp	r3, r8
 800cdaa:	f040 8487 	bne.w	800d6bc <__ieee754_pow+0x9ec>
 800cdae:	f001 0101 	and.w	r1, r1, #1
 800cdb2:	f1c1 0302 	rsb	r3, r1, #2
 800cdb6:	9304      	str	r3, [sp, #16]
 800cdb8:	4b5c      	ldr	r3, [pc, #368]	; (800cf2c <__ieee754_pow+0x25c>)
 800cdba:	4598      	cmp	r8, r3
 800cdbc:	d132      	bne.n	800ce24 <__ieee754_pow+0x154>
 800cdbe:	f1b9 0f00 	cmp.w	r9, #0
 800cdc2:	f280 8477 	bge.w	800d6b4 <__ieee754_pow+0x9e4>
 800cdc6:	4959      	ldr	r1, [pc, #356]	; (800cf2c <__ieee754_pow+0x25c>)
 800cdc8:	4632      	mov	r2, r6
 800cdca:	463b      	mov	r3, r7
 800cdcc:	2000      	movs	r0, #0
 800cdce:	f7f3 fd35 	bl	800083c <__aeabi_ddiv>
 800cdd2:	e79c      	b.n	800cd0e <__ieee754_pow+0x3e>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	9304      	str	r3, [sp, #16]
 800cdd8:	2a00      	cmp	r2, #0
 800cdda:	d13d      	bne.n	800ce58 <__ieee754_pow+0x188>
 800cddc:	4b51      	ldr	r3, [pc, #324]	; (800cf24 <__ieee754_pow+0x254>)
 800cdde:	4598      	cmp	r8, r3
 800cde0:	d1ea      	bne.n	800cdb8 <__ieee754_pow+0xe8>
 800cde2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cde6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cdea:	ea53 030a 	orrs.w	r3, r3, sl
 800cdee:	f000 8459 	beq.w	800d6a4 <__ieee754_pow+0x9d4>
 800cdf2:	4b4f      	ldr	r3, [pc, #316]	; (800cf30 <__ieee754_pow+0x260>)
 800cdf4:	429c      	cmp	r4, r3
 800cdf6:	dd08      	ble.n	800ce0a <__ieee754_pow+0x13a>
 800cdf8:	f1b9 0f00 	cmp.w	r9, #0
 800cdfc:	f2c0 8456 	blt.w	800d6ac <__ieee754_pow+0x9dc>
 800ce00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce04:	e783      	b.n	800cd0e <__ieee754_pow+0x3e>
 800ce06:	2302      	movs	r3, #2
 800ce08:	e7e5      	b.n	800cdd6 <__ieee754_pow+0x106>
 800ce0a:	f1b9 0f00 	cmp.w	r9, #0
 800ce0e:	f04f 0000 	mov.w	r0, #0
 800ce12:	f04f 0100 	mov.w	r1, #0
 800ce16:	f6bf af7a 	bge.w	800cd0e <__ieee754_pow+0x3e>
 800ce1a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ce1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ce22:	e774      	b.n	800cd0e <__ieee754_pow+0x3e>
 800ce24:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ce28:	d106      	bne.n	800ce38 <__ieee754_pow+0x168>
 800ce2a:	4632      	mov	r2, r6
 800ce2c:	463b      	mov	r3, r7
 800ce2e:	4630      	mov	r0, r6
 800ce30:	4639      	mov	r1, r7
 800ce32:	f7f3 fbd9 	bl	80005e8 <__aeabi_dmul>
 800ce36:	e76a      	b.n	800cd0e <__ieee754_pow+0x3e>
 800ce38:	4b3e      	ldr	r3, [pc, #248]	; (800cf34 <__ieee754_pow+0x264>)
 800ce3a:	4599      	cmp	r9, r3
 800ce3c:	d10c      	bne.n	800ce58 <__ieee754_pow+0x188>
 800ce3e:	2d00      	cmp	r5, #0
 800ce40:	db0a      	blt.n	800ce58 <__ieee754_pow+0x188>
 800ce42:	ec47 6b10 	vmov	d0, r6, r7
 800ce46:	b009      	add	sp, #36	; 0x24
 800ce48:	ecbd 8b06 	vpop	{d8-d10}
 800ce4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce50:	f000 bd20 	b.w	800d894 <__ieee754_sqrt>
 800ce54:	2300      	movs	r3, #0
 800ce56:	9304      	str	r3, [sp, #16]
 800ce58:	ec47 6b10 	vmov	d0, r6, r7
 800ce5c:	f000 fc62 	bl	800d724 <fabs>
 800ce60:	ec51 0b10 	vmov	r0, r1, d0
 800ce64:	f1ba 0f00 	cmp.w	sl, #0
 800ce68:	d129      	bne.n	800cebe <__ieee754_pow+0x1ee>
 800ce6a:	b124      	cbz	r4, 800ce76 <__ieee754_pow+0x1a6>
 800ce6c:	4b2f      	ldr	r3, [pc, #188]	; (800cf2c <__ieee754_pow+0x25c>)
 800ce6e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d123      	bne.n	800cebe <__ieee754_pow+0x1ee>
 800ce76:	f1b9 0f00 	cmp.w	r9, #0
 800ce7a:	da05      	bge.n	800ce88 <__ieee754_pow+0x1b8>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	460b      	mov	r3, r1
 800ce80:	2000      	movs	r0, #0
 800ce82:	492a      	ldr	r1, [pc, #168]	; (800cf2c <__ieee754_pow+0x25c>)
 800ce84:	f7f3 fcda 	bl	800083c <__aeabi_ddiv>
 800ce88:	2d00      	cmp	r5, #0
 800ce8a:	f6bf af40 	bge.w	800cd0e <__ieee754_pow+0x3e>
 800ce8e:	9b04      	ldr	r3, [sp, #16]
 800ce90:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ce94:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ce98:	431c      	orrs	r4, r3
 800ce9a:	d108      	bne.n	800ceae <__ieee754_pow+0x1de>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	460b      	mov	r3, r1
 800cea0:	4610      	mov	r0, r2
 800cea2:	4619      	mov	r1, r3
 800cea4:	f7f3 f9e8 	bl	8000278 <__aeabi_dsub>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	e78f      	b.n	800cdce <__ieee754_pow+0xfe>
 800ceae:	9b04      	ldr	r3, [sp, #16]
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	f47f af2c 	bne.w	800cd0e <__ieee754_pow+0x3e>
 800ceb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ceba:	4619      	mov	r1, r3
 800cebc:	e727      	b.n	800cd0e <__ieee754_pow+0x3e>
 800cebe:	0feb      	lsrs	r3, r5, #31
 800cec0:	3b01      	subs	r3, #1
 800cec2:	9306      	str	r3, [sp, #24]
 800cec4:	9a06      	ldr	r2, [sp, #24]
 800cec6:	9b04      	ldr	r3, [sp, #16]
 800cec8:	4313      	orrs	r3, r2
 800ceca:	d102      	bne.n	800ced2 <__ieee754_pow+0x202>
 800cecc:	4632      	mov	r2, r6
 800cece:	463b      	mov	r3, r7
 800ced0:	e7e6      	b.n	800cea0 <__ieee754_pow+0x1d0>
 800ced2:	4b19      	ldr	r3, [pc, #100]	; (800cf38 <__ieee754_pow+0x268>)
 800ced4:	4598      	cmp	r8, r3
 800ced6:	f340 80fb 	ble.w	800d0d0 <__ieee754_pow+0x400>
 800ceda:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cede:	4598      	cmp	r8, r3
 800cee0:	4b13      	ldr	r3, [pc, #76]	; (800cf30 <__ieee754_pow+0x260>)
 800cee2:	dd0c      	ble.n	800cefe <__ieee754_pow+0x22e>
 800cee4:	429c      	cmp	r4, r3
 800cee6:	dc0f      	bgt.n	800cf08 <__ieee754_pow+0x238>
 800cee8:	f1b9 0f00 	cmp.w	r9, #0
 800ceec:	da0f      	bge.n	800cf0e <__ieee754_pow+0x23e>
 800ceee:	2000      	movs	r0, #0
 800cef0:	b009      	add	sp, #36	; 0x24
 800cef2:	ecbd 8b06 	vpop	{d8-d10}
 800cef6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cefa:	f000 bcc2 	b.w	800d882 <__math_oflow>
 800cefe:	429c      	cmp	r4, r3
 800cf00:	dbf2      	blt.n	800cee8 <__ieee754_pow+0x218>
 800cf02:	4b0a      	ldr	r3, [pc, #40]	; (800cf2c <__ieee754_pow+0x25c>)
 800cf04:	429c      	cmp	r4, r3
 800cf06:	dd19      	ble.n	800cf3c <__ieee754_pow+0x26c>
 800cf08:	f1b9 0f00 	cmp.w	r9, #0
 800cf0c:	dcef      	bgt.n	800ceee <__ieee754_pow+0x21e>
 800cf0e:	2000      	movs	r0, #0
 800cf10:	b009      	add	sp, #36	; 0x24
 800cf12:	ecbd 8b06 	vpop	{d8-d10}
 800cf16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf1a:	f000 bca9 	b.w	800d870 <__math_uflow>
 800cf1e:	bf00      	nop
 800cf20:	fff00000 	.word	0xfff00000
 800cf24:	7ff00000 	.word	0x7ff00000
 800cf28:	433fffff 	.word	0x433fffff
 800cf2c:	3ff00000 	.word	0x3ff00000
 800cf30:	3fefffff 	.word	0x3fefffff
 800cf34:	3fe00000 	.word	0x3fe00000
 800cf38:	41e00000 	.word	0x41e00000
 800cf3c:	4b60      	ldr	r3, [pc, #384]	; (800d0c0 <__ieee754_pow+0x3f0>)
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f7f3 f99a 	bl	8000278 <__aeabi_dsub>
 800cf44:	a354      	add	r3, pc, #336	; (adr r3, 800d098 <__ieee754_pow+0x3c8>)
 800cf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	460d      	mov	r5, r1
 800cf4e:	f7f3 fb4b 	bl	80005e8 <__aeabi_dmul>
 800cf52:	a353      	add	r3, pc, #332	; (adr r3, 800d0a0 <__ieee754_pow+0x3d0>)
 800cf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf58:	4606      	mov	r6, r0
 800cf5a:	460f      	mov	r7, r1
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	4629      	mov	r1, r5
 800cf60:	f7f3 fb42 	bl	80005e8 <__aeabi_dmul>
 800cf64:	4b57      	ldr	r3, [pc, #348]	; (800d0c4 <__ieee754_pow+0x3f4>)
 800cf66:	4682      	mov	sl, r0
 800cf68:	468b      	mov	fp, r1
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	4629      	mov	r1, r5
 800cf70:	f7f3 fb3a 	bl	80005e8 <__aeabi_dmul>
 800cf74:	4602      	mov	r2, r0
 800cf76:	460b      	mov	r3, r1
 800cf78:	a14b      	add	r1, pc, #300	; (adr r1, 800d0a8 <__ieee754_pow+0x3d8>)
 800cf7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf7e:	f7f3 f97b 	bl	8000278 <__aeabi_dsub>
 800cf82:	4622      	mov	r2, r4
 800cf84:	462b      	mov	r3, r5
 800cf86:	f7f3 fb2f 	bl	80005e8 <__aeabi_dmul>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	2000      	movs	r0, #0
 800cf90:	494d      	ldr	r1, [pc, #308]	; (800d0c8 <__ieee754_pow+0x3f8>)
 800cf92:	f7f3 f971 	bl	8000278 <__aeabi_dsub>
 800cf96:	4622      	mov	r2, r4
 800cf98:	4680      	mov	r8, r0
 800cf9a:	4689      	mov	r9, r1
 800cf9c:	462b      	mov	r3, r5
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	f7f3 fb21 	bl	80005e8 <__aeabi_dmul>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	4640      	mov	r0, r8
 800cfac:	4649      	mov	r1, r9
 800cfae:	f7f3 fb1b 	bl	80005e8 <__aeabi_dmul>
 800cfb2:	a33f      	add	r3, pc, #252	; (adr r3, 800d0b0 <__ieee754_pow+0x3e0>)
 800cfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb8:	f7f3 fb16 	bl	80005e8 <__aeabi_dmul>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	4650      	mov	r0, sl
 800cfc2:	4659      	mov	r1, fp
 800cfc4:	f7f3 f958 	bl	8000278 <__aeabi_dsub>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4680      	mov	r8, r0
 800cfce:	4689      	mov	r9, r1
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	4639      	mov	r1, r7
 800cfd4:	f7f3 f952 	bl	800027c <__adddf3>
 800cfd8:	2000      	movs	r0, #0
 800cfda:	4632      	mov	r2, r6
 800cfdc:	463b      	mov	r3, r7
 800cfde:	4604      	mov	r4, r0
 800cfe0:	460d      	mov	r5, r1
 800cfe2:	f7f3 f949 	bl	8000278 <__aeabi_dsub>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	460b      	mov	r3, r1
 800cfea:	4640      	mov	r0, r8
 800cfec:	4649      	mov	r1, r9
 800cfee:	f7f3 f943 	bl	8000278 <__aeabi_dsub>
 800cff2:	9b04      	ldr	r3, [sp, #16]
 800cff4:	9a06      	ldr	r2, [sp, #24]
 800cff6:	3b01      	subs	r3, #1
 800cff8:	4313      	orrs	r3, r2
 800cffa:	4682      	mov	sl, r0
 800cffc:	468b      	mov	fp, r1
 800cffe:	f040 81e7 	bne.w	800d3d0 <__ieee754_pow+0x700>
 800d002:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d0b8 <__ieee754_pow+0x3e8>
 800d006:	eeb0 8a47 	vmov.f32	s16, s14
 800d00a:	eef0 8a67 	vmov.f32	s17, s15
 800d00e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d012:	2600      	movs	r6, #0
 800d014:	4632      	mov	r2, r6
 800d016:	463b      	mov	r3, r7
 800d018:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d01c:	f7f3 f92c 	bl	8000278 <__aeabi_dsub>
 800d020:	4622      	mov	r2, r4
 800d022:	462b      	mov	r3, r5
 800d024:	f7f3 fae0 	bl	80005e8 <__aeabi_dmul>
 800d028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d02c:	4680      	mov	r8, r0
 800d02e:	4689      	mov	r9, r1
 800d030:	4650      	mov	r0, sl
 800d032:	4659      	mov	r1, fp
 800d034:	f7f3 fad8 	bl	80005e8 <__aeabi_dmul>
 800d038:	4602      	mov	r2, r0
 800d03a:	460b      	mov	r3, r1
 800d03c:	4640      	mov	r0, r8
 800d03e:	4649      	mov	r1, r9
 800d040:	f7f3 f91c 	bl	800027c <__adddf3>
 800d044:	4632      	mov	r2, r6
 800d046:	463b      	mov	r3, r7
 800d048:	4680      	mov	r8, r0
 800d04a:	4689      	mov	r9, r1
 800d04c:	4620      	mov	r0, r4
 800d04e:	4629      	mov	r1, r5
 800d050:	f7f3 faca 	bl	80005e8 <__aeabi_dmul>
 800d054:	460b      	mov	r3, r1
 800d056:	4604      	mov	r4, r0
 800d058:	460d      	mov	r5, r1
 800d05a:	4602      	mov	r2, r0
 800d05c:	4649      	mov	r1, r9
 800d05e:	4640      	mov	r0, r8
 800d060:	f7f3 f90c 	bl	800027c <__adddf3>
 800d064:	4b19      	ldr	r3, [pc, #100]	; (800d0cc <__ieee754_pow+0x3fc>)
 800d066:	4299      	cmp	r1, r3
 800d068:	ec45 4b19 	vmov	d9, r4, r5
 800d06c:	4606      	mov	r6, r0
 800d06e:	460f      	mov	r7, r1
 800d070:	468b      	mov	fp, r1
 800d072:	f340 82f0 	ble.w	800d656 <__ieee754_pow+0x986>
 800d076:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d07a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d07e:	4303      	orrs	r3, r0
 800d080:	f000 81e4 	beq.w	800d44c <__ieee754_pow+0x77c>
 800d084:	ec51 0b18 	vmov	r0, r1, d8
 800d088:	2200      	movs	r2, #0
 800d08a:	2300      	movs	r3, #0
 800d08c:	f7f3 fd1e 	bl	8000acc <__aeabi_dcmplt>
 800d090:	3800      	subs	r0, #0
 800d092:	bf18      	it	ne
 800d094:	2001      	movne	r0, #1
 800d096:	e72b      	b.n	800cef0 <__ieee754_pow+0x220>
 800d098:	60000000 	.word	0x60000000
 800d09c:	3ff71547 	.word	0x3ff71547
 800d0a0:	f85ddf44 	.word	0xf85ddf44
 800d0a4:	3e54ae0b 	.word	0x3e54ae0b
 800d0a8:	55555555 	.word	0x55555555
 800d0ac:	3fd55555 	.word	0x3fd55555
 800d0b0:	652b82fe 	.word	0x652b82fe
 800d0b4:	3ff71547 	.word	0x3ff71547
 800d0b8:	00000000 	.word	0x00000000
 800d0bc:	bff00000 	.word	0xbff00000
 800d0c0:	3ff00000 	.word	0x3ff00000
 800d0c4:	3fd00000 	.word	0x3fd00000
 800d0c8:	3fe00000 	.word	0x3fe00000
 800d0cc:	408fffff 	.word	0x408fffff
 800d0d0:	4bd5      	ldr	r3, [pc, #852]	; (800d428 <__ieee754_pow+0x758>)
 800d0d2:	402b      	ands	r3, r5
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	b92b      	cbnz	r3, 800d0e4 <__ieee754_pow+0x414>
 800d0d8:	4bd4      	ldr	r3, [pc, #848]	; (800d42c <__ieee754_pow+0x75c>)
 800d0da:	f7f3 fa85 	bl	80005e8 <__aeabi_dmul>
 800d0de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d0e2:	460c      	mov	r4, r1
 800d0e4:	1523      	asrs	r3, r4, #20
 800d0e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d0ea:	4413      	add	r3, r2
 800d0ec:	9305      	str	r3, [sp, #20]
 800d0ee:	4bd0      	ldr	r3, [pc, #832]	; (800d430 <__ieee754_pow+0x760>)
 800d0f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d0f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d0f8:	429c      	cmp	r4, r3
 800d0fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d0fe:	dd08      	ble.n	800d112 <__ieee754_pow+0x442>
 800d100:	4bcc      	ldr	r3, [pc, #816]	; (800d434 <__ieee754_pow+0x764>)
 800d102:	429c      	cmp	r4, r3
 800d104:	f340 8162 	ble.w	800d3cc <__ieee754_pow+0x6fc>
 800d108:	9b05      	ldr	r3, [sp, #20]
 800d10a:	3301      	adds	r3, #1
 800d10c:	9305      	str	r3, [sp, #20]
 800d10e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d112:	2400      	movs	r4, #0
 800d114:	00e3      	lsls	r3, r4, #3
 800d116:	9307      	str	r3, [sp, #28]
 800d118:	4bc7      	ldr	r3, [pc, #796]	; (800d438 <__ieee754_pow+0x768>)
 800d11a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d11e:	ed93 7b00 	vldr	d7, [r3]
 800d122:	4629      	mov	r1, r5
 800d124:	ec53 2b17 	vmov	r2, r3, d7
 800d128:	eeb0 9a47 	vmov.f32	s18, s14
 800d12c:	eef0 9a67 	vmov.f32	s19, s15
 800d130:	4682      	mov	sl, r0
 800d132:	f7f3 f8a1 	bl	8000278 <__aeabi_dsub>
 800d136:	4652      	mov	r2, sl
 800d138:	4606      	mov	r6, r0
 800d13a:	460f      	mov	r7, r1
 800d13c:	462b      	mov	r3, r5
 800d13e:	ec51 0b19 	vmov	r0, r1, d9
 800d142:	f7f3 f89b 	bl	800027c <__adddf3>
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	2000      	movs	r0, #0
 800d14c:	49bb      	ldr	r1, [pc, #748]	; (800d43c <__ieee754_pow+0x76c>)
 800d14e:	f7f3 fb75 	bl	800083c <__aeabi_ddiv>
 800d152:	ec41 0b1a 	vmov	d10, r0, r1
 800d156:	4602      	mov	r2, r0
 800d158:	460b      	mov	r3, r1
 800d15a:	4630      	mov	r0, r6
 800d15c:	4639      	mov	r1, r7
 800d15e:	f7f3 fa43 	bl	80005e8 <__aeabi_dmul>
 800d162:	2300      	movs	r3, #0
 800d164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d168:	9302      	str	r3, [sp, #8]
 800d16a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d16e:	46ab      	mov	fp, r5
 800d170:	106d      	asrs	r5, r5, #1
 800d172:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d176:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d17a:	ec41 0b18 	vmov	d8, r0, r1
 800d17e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d182:	2200      	movs	r2, #0
 800d184:	4640      	mov	r0, r8
 800d186:	4649      	mov	r1, r9
 800d188:	4614      	mov	r4, r2
 800d18a:	461d      	mov	r5, r3
 800d18c:	f7f3 fa2c 	bl	80005e8 <__aeabi_dmul>
 800d190:	4602      	mov	r2, r0
 800d192:	460b      	mov	r3, r1
 800d194:	4630      	mov	r0, r6
 800d196:	4639      	mov	r1, r7
 800d198:	f7f3 f86e 	bl	8000278 <__aeabi_dsub>
 800d19c:	ec53 2b19 	vmov	r2, r3, d9
 800d1a0:	4606      	mov	r6, r0
 800d1a2:	460f      	mov	r7, r1
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	f7f3 f866 	bl	8000278 <__aeabi_dsub>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	4650      	mov	r0, sl
 800d1b2:	4659      	mov	r1, fp
 800d1b4:	f7f3 f860 	bl	8000278 <__aeabi_dsub>
 800d1b8:	4642      	mov	r2, r8
 800d1ba:	464b      	mov	r3, r9
 800d1bc:	f7f3 fa14 	bl	80005e8 <__aeabi_dmul>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	4639      	mov	r1, r7
 800d1c8:	f7f3 f856 	bl	8000278 <__aeabi_dsub>
 800d1cc:	ec53 2b1a 	vmov	r2, r3, d10
 800d1d0:	f7f3 fa0a 	bl	80005e8 <__aeabi_dmul>
 800d1d4:	ec53 2b18 	vmov	r2, r3, d8
 800d1d8:	ec41 0b19 	vmov	d9, r0, r1
 800d1dc:	ec51 0b18 	vmov	r0, r1, d8
 800d1e0:	f7f3 fa02 	bl	80005e8 <__aeabi_dmul>
 800d1e4:	a37c      	add	r3, pc, #496	; (adr r3, 800d3d8 <__ieee754_pow+0x708>)
 800d1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	460d      	mov	r5, r1
 800d1ee:	f7f3 f9fb 	bl	80005e8 <__aeabi_dmul>
 800d1f2:	a37b      	add	r3, pc, #492	; (adr r3, 800d3e0 <__ieee754_pow+0x710>)
 800d1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f8:	f7f3 f840 	bl	800027c <__adddf3>
 800d1fc:	4622      	mov	r2, r4
 800d1fe:	462b      	mov	r3, r5
 800d200:	f7f3 f9f2 	bl	80005e8 <__aeabi_dmul>
 800d204:	a378      	add	r3, pc, #480	; (adr r3, 800d3e8 <__ieee754_pow+0x718>)
 800d206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20a:	f7f3 f837 	bl	800027c <__adddf3>
 800d20e:	4622      	mov	r2, r4
 800d210:	462b      	mov	r3, r5
 800d212:	f7f3 f9e9 	bl	80005e8 <__aeabi_dmul>
 800d216:	a376      	add	r3, pc, #472	; (adr r3, 800d3f0 <__ieee754_pow+0x720>)
 800d218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21c:	f7f3 f82e 	bl	800027c <__adddf3>
 800d220:	4622      	mov	r2, r4
 800d222:	462b      	mov	r3, r5
 800d224:	f7f3 f9e0 	bl	80005e8 <__aeabi_dmul>
 800d228:	a373      	add	r3, pc, #460	; (adr r3, 800d3f8 <__ieee754_pow+0x728>)
 800d22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22e:	f7f3 f825 	bl	800027c <__adddf3>
 800d232:	4622      	mov	r2, r4
 800d234:	462b      	mov	r3, r5
 800d236:	f7f3 f9d7 	bl	80005e8 <__aeabi_dmul>
 800d23a:	a371      	add	r3, pc, #452	; (adr r3, 800d400 <__ieee754_pow+0x730>)
 800d23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d240:	f7f3 f81c 	bl	800027c <__adddf3>
 800d244:	4622      	mov	r2, r4
 800d246:	4606      	mov	r6, r0
 800d248:	460f      	mov	r7, r1
 800d24a:	462b      	mov	r3, r5
 800d24c:	4620      	mov	r0, r4
 800d24e:	4629      	mov	r1, r5
 800d250:	f7f3 f9ca 	bl	80005e8 <__aeabi_dmul>
 800d254:	4602      	mov	r2, r0
 800d256:	460b      	mov	r3, r1
 800d258:	4630      	mov	r0, r6
 800d25a:	4639      	mov	r1, r7
 800d25c:	f7f3 f9c4 	bl	80005e8 <__aeabi_dmul>
 800d260:	4642      	mov	r2, r8
 800d262:	4604      	mov	r4, r0
 800d264:	460d      	mov	r5, r1
 800d266:	464b      	mov	r3, r9
 800d268:	ec51 0b18 	vmov	r0, r1, d8
 800d26c:	f7f3 f806 	bl	800027c <__adddf3>
 800d270:	ec53 2b19 	vmov	r2, r3, d9
 800d274:	f7f3 f9b8 	bl	80005e8 <__aeabi_dmul>
 800d278:	4622      	mov	r2, r4
 800d27a:	462b      	mov	r3, r5
 800d27c:	f7f2 fffe 	bl	800027c <__adddf3>
 800d280:	4642      	mov	r2, r8
 800d282:	4682      	mov	sl, r0
 800d284:	468b      	mov	fp, r1
 800d286:	464b      	mov	r3, r9
 800d288:	4640      	mov	r0, r8
 800d28a:	4649      	mov	r1, r9
 800d28c:	f7f3 f9ac 	bl	80005e8 <__aeabi_dmul>
 800d290:	4b6b      	ldr	r3, [pc, #428]	; (800d440 <__ieee754_pow+0x770>)
 800d292:	2200      	movs	r2, #0
 800d294:	4606      	mov	r6, r0
 800d296:	460f      	mov	r7, r1
 800d298:	f7f2 fff0 	bl	800027c <__adddf3>
 800d29c:	4652      	mov	r2, sl
 800d29e:	465b      	mov	r3, fp
 800d2a0:	f7f2 ffec 	bl	800027c <__adddf3>
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	460d      	mov	r5, r1
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	4640      	mov	r0, r8
 800d2b0:	4649      	mov	r1, r9
 800d2b2:	f7f3 f999 	bl	80005e8 <__aeabi_dmul>
 800d2b6:	4b62      	ldr	r3, [pc, #392]	; (800d440 <__ieee754_pow+0x770>)
 800d2b8:	4680      	mov	r8, r0
 800d2ba:	4689      	mov	r9, r1
 800d2bc:	2200      	movs	r2, #0
 800d2be:	4620      	mov	r0, r4
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	f7f2 ffd9 	bl	8000278 <__aeabi_dsub>
 800d2c6:	4632      	mov	r2, r6
 800d2c8:	463b      	mov	r3, r7
 800d2ca:	f7f2 ffd5 	bl	8000278 <__aeabi_dsub>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	4650      	mov	r0, sl
 800d2d4:	4659      	mov	r1, fp
 800d2d6:	f7f2 ffcf 	bl	8000278 <__aeabi_dsub>
 800d2da:	ec53 2b18 	vmov	r2, r3, d8
 800d2de:	f7f3 f983 	bl	80005e8 <__aeabi_dmul>
 800d2e2:	4622      	mov	r2, r4
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	460f      	mov	r7, r1
 800d2e8:	462b      	mov	r3, r5
 800d2ea:	ec51 0b19 	vmov	r0, r1, d9
 800d2ee:	f7f3 f97b 	bl	80005e8 <__aeabi_dmul>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	4639      	mov	r1, r7
 800d2fa:	f7f2 ffbf 	bl	800027c <__adddf3>
 800d2fe:	4606      	mov	r6, r0
 800d300:	460f      	mov	r7, r1
 800d302:	4602      	mov	r2, r0
 800d304:	460b      	mov	r3, r1
 800d306:	4640      	mov	r0, r8
 800d308:	4649      	mov	r1, r9
 800d30a:	f7f2 ffb7 	bl	800027c <__adddf3>
 800d30e:	a33e      	add	r3, pc, #248	; (adr r3, 800d408 <__ieee754_pow+0x738>)
 800d310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d314:	2000      	movs	r0, #0
 800d316:	4604      	mov	r4, r0
 800d318:	460d      	mov	r5, r1
 800d31a:	f7f3 f965 	bl	80005e8 <__aeabi_dmul>
 800d31e:	4642      	mov	r2, r8
 800d320:	ec41 0b18 	vmov	d8, r0, r1
 800d324:	464b      	mov	r3, r9
 800d326:	4620      	mov	r0, r4
 800d328:	4629      	mov	r1, r5
 800d32a:	f7f2 ffa5 	bl	8000278 <__aeabi_dsub>
 800d32e:	4602      	mov	r2, r0
 800d330:	460b      	mov	r3, r1
 800d332:	4630      	mov	r0, r6
 800d334:	4639      	mov	r1, r7
 800d336:	f7f2 ff9f 	bl	8000278 <__aeabi_dsub>
 800d33a:	a335      	add	r3, pc, #212	; (adr r3, 800d410 <__ieee754_pow+0x740>)
 800d33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d340:	f7f3 f952 	bl	80005e8 <__aeabi_dmul>
 800d344:	a334      	add	r3, pc, #208	; (adr r3, 800d418 <__ieee754_pow+0x748>)
 800d346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34a:	4606      	mov	r6, r0
 800d34c:	460f      	mov	r7, r1
 800d34e:	4620      	mov	r0, r4
 800d350:	4629      	mov	r1, r5
 800d352:	f7f3 f949 	bl	80005e8 <__aeabi_dmul>
 800d356:	4602      	mov	r2, r0
 800d358:	460b      	mov	r3, r1
 800d35a:	4630      	mov	r0, r6
 800d35c:	4639      	mov	r1, r7
 800d35e:	f7f2 ff8d 	bl	800027c <__adddf3>
 800d362:	9a07      	ldr	r2, [sp, #28]
 800d364:	4b37      	ldr	r3, [pc, #220]	; (800d444 <__ieee754_pow+0x774>)
 800d366:	4413      	add	r3, r2
 800d368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36c:	f7f2 ff86 	bl	800027c <__adddf3>
 800d370:	4682      	mov	sl, r0
 800d372:	9805      	ldr	r0, [sp, #20]
 800d374:	468b      	mov	fp, r1
 800d376:	f7f3 f8cd 	bl	8000514 <__aeabi_i2d>
 800d37a:	9a07      	ldr	r2, [sp, #28]
 800d37c:	4b32      	ldr	r3, [pc, #200]	; (800d448 <__ieee754_pow+0x778>)
 800d37e:	4413      	add	r3, r2
 800d380:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d384:	4606      	mov	r6, r0
 800d386:	460f      	mov	r7, r1
 800d388:	4652      	mov	r2, sl
 800d38a:	465b      	mov	r3, fp
 800d38c:	ec51 0b18 	vmov	r0, r1, d8
 800d390:	f7f2 ff74 	bl	800027c <__adddf3>
 800d394:	4642      	mov	r2, r8
 800d396:	464b      	mov	r3, r9
 800d398:	f7f2 ff70 	bl	800027c <__adddf3>
 800d39c:	4632      	mov	r2, r6
 800d39e:	463b      	mov	r3, r7
 800d3a0:	f7f2 ff6c 	bl	800027c <__adddf3>
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	4632      	mov	r2, r6
 800d3a8:	463b      	mov	r3, r7
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	460d      	mov	r5, r1
 800d3ae:	f7f2 ff63 	bl	8000278 <__aeabi_dsub>
 800d3b2:	4642      	mov	r2, r8
 800d3b4:	464b      	mov	r3, r9
 800d3b6:	f7f2 ff5f 	bl	8000278 <__aeabi_dsub>
 800d3ba:	ec53 2b18 	vmov	r2, r3, d8
 800d3be:	f7f2 ff5b 	bl	8000278 <__aeabi_dsub>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	4650      	mov	r0, sl
 800d3c8:	4659      	mov	r1, fp
 800d3ca:	e610      	b.n	800cfee <__ieee754_pow+0x31e>
 800d3cc:	2401      	movs	r4, #1
 800d3ce:	e6a1      	b.n	800d114 <__ieee754_pow+0x444>
 800d3d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d420 <__ieee754_pow+0x750>
 800d3d4:	e617      	b.n	800d006 <__ieee754_pow+0x336>
 800d3d6:	bf00      	nop
 800d3d8:	4a454eef 	.word	0x4a454eef
 800d3dc:	3fca7e28 	.word	0x3fca7e28
 800d3e0:	93c9db65 	.word	0x93c9db65
 800d3e4:	3fcd864a 	.word	0x3fcd864a
 800d3e8:	a91d4101 	.word	0xa91d4101
 800d3ec:	3fd17460 	.word	0x3fd17460
 800d3f0:	518f264d 	.word	0x518f264d
 800d3f4:	3fd55555 	.word	0x3fd55555
 800d3f8:	db6fabff 	.word	0xdb6fabff
 800d3fc:	3fdb6db6 	.word	0x3fdb6db6
 800d400:	33333303 	.word	0x33333303
 800d404:	3fe33333 	.word	0x3fe33333
 800d408:	e0000000 	.word	0xe0000000
 800d40c:	3feec709 	.word	0x3feec709
 800d410:	dc3a03fd 	.word	0xdc3a03fd
 800d414:	3feec709 	.word	0x3feec709
 800d418:	145b01f5 	.word	0x145b01f5
 800d41c:	be3e2fe0 	.word	0xbe3e2fe0
 800d420:	00000000 	.word	0x00000000
 800d424:	3ff00000 	.word	0x3ff00000
 800d428:	7ff00000 	.word	0x7ff00000
 800d42c:	43400000 	.word	0x43400000
 800d430:	0003988e 	.word	0x0003988e
 800d434:	000bb679 	.word	0x000bb679
 800d438:	0800e768 	.word	0x0800e768
 800d43c:	3ff00000 	.word	0x3ff00000
 800d440:	40080000 	.word	0x40080000
 800d444:	0800e788 	.word	0x0800e788
 800d448:	0800e778 	.word	0x0800e778
 800d44c:	a3b3      	add	r3, pc, #716	; (adr r3, 800d71c <__ieee754_pow+0xa4c>)
 800d44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d452:	4640      	mov	r0, r8
 800d454:	4649      	mov	r1, r9
 800d456:	f7f2 ff11 	bl	800027c <__adddf3>
 800d45a:	4622      	mov	r2, r4
 800d45c:	ec41 0b1a 	vmov	d10, r0, r1
 800d460:	462b      	mov	r3, r5
 800d462:	4630      	mov	r0, r6
 800d464:	4639      	mov	r1, r7
 800d466:	f7f2 ff07 	bl	8000278 <__aeabi_dsub>
 800d46a:	4602      	mov	r2, r0
 800d46c:	460b      	mov	r3, r1
 800d46e:	ec51 0b1a 	vmov	r0, r1, d10
 800d472:	f7f3 fb49 	bl	8000b08 <__aeabi_dcmpgt>
 800d476:	2800      	cmp	r0, #0
 800d478:	f47f ae04 	bne.w	800d084 <__ieee754_pow+0x3b4>
 800d47c:	4aa2      	ldr	r2, [pc, #648]	; (800d708 <__ieee754_pow+0xa38>)
 800d47e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d482:	4293      	cmp	r3, r2
 800d484:	f340 8107 	ble.w	800d696 <__ieee754_pow+0x9c6>
 800d488:	151b      	asrs	r3, r3, #20
 800d48a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d48e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d492:	fa4a fa03 	asr.w	sl, sl, r3
 800d496:	44da      	add	sl, fp
 800d498:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d49c:	489b      	ldr	r0, [pc, #620]	; (800d70c <__ieee754_pow+0xa3c>)
 800d49e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d4a2:	4108      	asrs	r0, r1
 800d4a4:	ea00 030a 	and.w	r3, r0, sl
 800d4a8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d4ac:	f1c1 0114 	rsb	r1, r1, #20
 800d4b0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d4b4:	fa4a fa01 	asr.w	sl, sl, r1
 800d4b8:	f1bb 0f00 	cmp.w	fp, #0
 800d4bc:	f04f 0200 	mov.w	r2, #0
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	4629      	mov	r1, r5
 800d4c4:	bfb8      	it	lt
 800d4c6:	f1ca 0a00 	rsblt	sl, sl, #0
 800d4ca:	f7f2 fed5 	bl	8000278 <__aeabi_dsub>
 800d4ce:	ec41 0b19 	vmov	d9, r0, r1
 800d4d2:	4642      	mov	r2, r8
 800d4d4:	464b      	mov	r3, r9
 800d4d6:	ec51 0b19 	vmov	r0, r1, d9
 800d4da:	f7f2 fecf 	bl	800027c <__adddf3>
 800d4de:	a37a      	add	r3, pc, #488	; (adr r3, 800d6c8 <__ieee754_pow+0x9f8>)
 800d4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	460d      	mov	r5, r1
 800d4ea:	f7f3 f87d 	bl	80005e8 <__aeabi_dmul>
 800d4ee:	ec53 2b19 	vmov	r2, r3, d9
 800d4f2:	4606      	mov	r6, r0
 800d4f4:	460f      	mov	r7, r1
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	f7f2 febd 	bl	8000278 <__aeabi_dsub>
 800d4fe:	4602      	mov	r2, r0
 800d500:	460b      	mov	r3, r1
 800d502:	4640      	mov	r0, r8
 800d504:	4649      	mov	r1, r9
 800d506:	f7f2 feb7 	bl	8000278 <__aeabi_dsub>
 800d50a:	a371      	add	r3, pc, #452	; (adr r3, 800d6d0 <__ieee754_pow+0xa00>)
 800d50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d510:	f7f3 f86a 	bl	80005e8 <__aeabi_dmul>
 800d514:	a370      	add	r3, pc, #448	; (adr r3, 800d6d8 <__ieee754_pow+0xa08>)
 800d516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51a:	4680      	mov	r8, r0
 800d51c:	4689      	mov	r9, r1
 800d51e:	4620      	mov	r0, r4
 800d520:	4629      	mov	r1, r5
 800d522:	f7f3 f861 	bl	80005e8 <__aeabi_dmul>
 800d526:	4602      	mov	r2, r0
 800d528:	460b      	mov	r3, r1
 800d52a:	4640      	mov	r0, r8
 800d52c:	4649      	mov	r1, r9
 800d52e:	f7f2 fea5 	bl	800027c <__adddf3>
 800d532:	4604      	mov	r4, r0
 800d534:	460d      	mov	r5, r1
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	4630      	mov	r0, r6
 800d53c:	4639      	mov	r1, r7
 800d53e:	f7f2 fe9d 	bl	800027c <__adddf3>
 800d542:	4632      	mov	r2, r6
 800d544:	463b      	mov	r3, r7
 800d546:	4680      	mov	r8, r0
 800d548:	4689      	mov	r9, r1
 800d54a:	f7f2 fe95 	bl	8000278 <__aeabi_dsub>
 800d54e:	4602      	mov	r2, r0
 800d550:	460b      	mov	r3, r1
 800d552:	4620      	mov	r0, r4
 800d554:	4629      	mov	r1, r5
 800d556:	f7f2 fe8f 	bl	8000278 <__aeabi_dsub>
 800d55a:	4642      	mov	r2, r8
 800d55c:	4606      	mov	r6, r0
 800d55e:	460f      	mov	r7, r1
 800d560:	464b      	mov	r3, r9
 800d562:	4640      	mov	r0, r8
 800d564:	4649      	mov	r1, r9
 800d566:	f7f3 f83f 	bl	80005e8 <__aeabi_dmul>
 800d56a:	a35d      	add	r3, pc, #372	; (adr r3, 800d6e0 <__ieee754_pow+0xa10>)
 800d56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d570:	4604      	mov	r4, r0
 800d572:	460d      	mov	r5, r1
 800d574:	f7f3 f838 	bl	80005e8 <__aeabi_dmul>
 800d578:	a35b      	add	r3, pc, #364	; (adr r3, 800d6e8 <__ieee754_pow+0xa18>)
 800d57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57e:	f7f2 fe7b 	bl	8000278 <__aeabi_dsub>
 800d582:	4622      	mov	r2, r4
 800d584:	462b      	mov	r3, r5
 800d586:	f7f3 f82f 	bl	80005e8 <__aeabi_dmul>
 800d58a:	a359      	add	r3, pc, #356	; (adr r3, 800d6f0 <__ieee754_pow+0xa20>)
 800d58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d590:	f7f2 fe74 	bl	800027c <__adddf3>
 800d594:	4622      	mov	r2, r4
 800d596:	462b      	mov	r3, r5
 800d598:	f7f3 f826 	bl	80005e8 <__aeabi_dmul>
 800d59c:	a356      	add	r3, pc, #344	; (adr r3, 800d6f8 <__ieee754_pow+0xa28>)
 800d59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a2:	f7f2 fe69 	bl	8000278 <__aeabi_dsub>
 800d5a6:	4622      	mov	r2, r4
 800d5a8:	462b      	mov	r3, r5
 800d5aa:	f7f3 f81d 	bl	80005e8 <__aeabi_dmul>
 800d5ae:	a354      	add	r3, pc, #336	; (adr r3, 800d700 <__ieee754_pow+0xa30>)
 800d5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b4:	f7f2 fe62 	bl	800027c <__adddf3>
 800d5b8:	4622      	mov	r2, r4
 800d5ba:	462b      	mov	r3, r5
 800d5bc:	f7f3 f814 	bl	80005e8 <__aeabi_dmul>
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	460b      	mov	r3, r1
 800d5c4:	4640      	mov	r0, r8
 800d5c6:	4649      	mov	r1, r9
 800d5c8:	f7f2 fe56 	bl	8000278 <__aeabi_dsub>
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	460d      	mov	r5, r1
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	4640      	mov	r0, r8
 800d5d6:	4649      	mov	r1, r9
 800d5d8:	f7f3 f806 	bl	80005e8 <__aeabi_dmul>
 800d5dc:	2200      	movs	r2, #0
 800d5de:	ec41 0b19 	vmov	d9, r0, r1
 800d5e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	4629      	mov	r1, r5
 800d5ea:	f7f2 fe45 	bl	8000278 <__aeabi_dsub>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	ec51 0b19 	vmov	r0, r1, d9
 800d5f6:	f7f3 f921 	bl	800083c <__aeabi_ddiv>
 800d5fa:	4632      	mov	r2, r6
 800d5fc:	4604      	mov	r4, r0
 800d5fe:	460d      	mov	r5, r1
 800d600:	463b      	mov	r3, r7
 800d602:	4640      	mov	r0, r8
 800d604:	4649      	mov	r1, r9
 800d606:	f7f2 ffef 	bl	80005e8 <__aeabi_dmul>
 800d60a:	4632      	mov	r2, r6
 800d60c:	463b      	mov	r3, r7
 800d60e:	f7f2 fe35 	bl	800027c <__adddf3>
 800d612:	4602      	mov	r2, r0
 800d614:	460b      	mov	r3, r1
 800d616:	4620      	mov	r0, r4
 800d618:	4629      	mov	r1, r5
 800d61a:	f7f2 fe2d 	bl	8000278 <__aeabi_dsub>
 800d61e:	4642      	mov	r2, r8
 800d620:	464b      	mov	r3, r9
 800d622:	f7f2 fe29 	bl	8000278 <__aeabi_dsub>
 800d626:	460b      	mov	r3, r1
 800d628:	4602      	mov	r2, r0
 800d62a:	4939      	ldr	r1, [pc, #228]	; (800d710 <__ieee754_pow+0xa40>)
 800d62c:	2000      	movs	r0, #0
 800d62e:	f7f2 fe23 	bl	8000278 <__aeabi_dsub>
 800d632:	ec41 0b10 	vmov	d0, r0, r1
 800d636:	ee10 3a90 	vmov	r3, s1
 800d63a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d63e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d642:	da2b      	bge.n	800d69c <__ieee754_pow+0x9cc>
 800d644:	4650      	mov	r0, sl
 800d646:	f000 f877 	bl	800d738 <scalbn>
 800d64a:	ec51 0b10 	vmov	r0, r1, d0
 800d64e:	ec53 2b18 	vmov	r2, r3, d8
 800d652:	f7ff bbee 	b.w	800ce32 <__ieee754_pow+0x162>
 800d656:	4b2f      	ldr	r3, [pc, #188]	; (800d714 <__ieee754_pow+0xa44>)
 800d658:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d65c:	429e      	cmp	r6, r3
 800d65e:	f77f af0d 	ble.w	800d47c <__ieee754_pow+0x7ac>
 800d662:	4b2d      	ldr	r3, [pc, #180]	; (800d718 <__ieee754_pow+0xa48>)
 800d664:	440b      	add	r3, r1
 800d666:	4303      	orrs	r3, r0
 800d668:	d009      	beq.n	800d67e <__ieee754_pow+0x9ae>
 800d66a:	ec51 0b18 	vmov	r0, r1, d8
 800d66e:	2200      	movs	r2, #0
 800d670:	2300      	movs	r3, #0
 800d672:	f7f3 fa2b 	bl	8000acc <__aeabi_dcmplt>
 800d676:	3800      	subs	r0, #0
 800d678:	bf18      	it	ne
 800d67a:	2001      	movne	r0, #1
 800d67c:	e448      	b.n	800cf10 <__ieee754_pow+0x240>
 800d67e:	4622      	mov	r2, r4
 800d680:	462b      	mov	r3, r5
 800d682:	f7f2 fdf9 	bl	8000278 <__aeabi_dsub>
 800d686:	4642      	mov	r2, r8
 800d688:	464b      	mov	r3, r9
 800d68a:	f7f3 fa33 	bl	8000af4 <__aeabi_dcmpge>
 800d68e:	2800      	cmp	r0, #0
 800d690:	f43f aef4 	beq.w	800d47c <__ieee754_pow+0x7ac>
 800d694:	e7e9      	b.n	800d66a <__ieee754_pow+0x99a>
 800d696:	f04f 0a00 	mov.w	sl, #0
 800d69a:	e71a      	b.n	800d4d2 <__ieee754_pow+0x802>
 800d69c:	ec51 0b10 	vmov	r0, r1, d0
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	e7d4      	b.n	800d64e <__ieee754_pow+0x97e>
 800d6a4:	491a      	ldr	r1, [pc, #104]	; (800d710 <__ieee754_pow+0xa40>)
 800d6a6:	2000      	movs	r0, #0
 800d6a8:	f7ff bb31 	b.w	800cd0e <__ieee754_pow+0x3e>
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	f7ff bb2d 	b.w	800cd0e <__ieee754_pow+0x3e>
 800d6b4:	4630      	mov	r0, r6
 800d6b6:	4639      	mov	r1, r7
 800d6b8:	f7ff bb29 	b.w	800cd0e <__ieee754_pow+0x3e>
 800d6bc:	9204      	str	r2, [sp, #16]
 800d6be:	f7ff bb7b 	b.w	800cdb8 <__ieee754_pow+0xe8>
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	f7ff bb65 	b.w	800cd92 <__ieee754_pow+0xc2>
 800d6c8:	00000000 	.word	0x00000000
 800d6cc:	3fe62e43 	.word	0x3fe62e43
 800d6d0:	fefa39ef 	.word	0xfefa39ef
 800d6d4:	3fe62e42 	.word	0x3fe62e42
 800d6d8:	0ca86c39 	.word	0x0ca86c39
 800d6dc:	be205c61 	.word	0xbe205c61
 800d6e0:	72bea4d0 	.word	0x72bea4d0
 800d6e4:	3e663769 	.word	0x3e663769
 800d6e8:	c5d26bf1 	.word	0xc5d26bf1
 800d6ec:	3ebbbd41 	.word	0x3ebbbd41
 800d6f0:	af25de2c 	.word	0xaf25de2c
 800d6f4:	3f11566a 	.word	0x3f11566a
 800d6f8:	16bebd93 	.word	0x16bebd93
 800d6fc:	3f66c16c 	.word	0x3f66c16c
 800d700:	5555553e 	.word	0x5555553e
 800d704:	3fc55555 	.word	0x3fc55555
 800d708:	3fe00000 	.word	0x3fe00000
 800d70c:	fff00000 	.word	0xfff00000
 800d710:	3ff00000 	.word	0x3ff00000
 800d714:	4090cbff 	.word	0x4090cbff
 800d718:	3f6f3400 	.word	0x3f6f3400
 800d71c:	652b82fe 	.word	0x652b82fe
 800d720:	3c971547 	.word	0x3c971547

0800d724 <fabs>:
 800d724:	ec51 0b10 	vmov	r0, r1, d0
 800d728:	ee10 2a10 	vmov	r2, s0
 800d72c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d730:	ec43 2b10 	vmov	d0, r2, r3
 800d734:	4770      	bx	lr
	...

0800d738 <scalbn>:
 800d738:	b570      	push	{r4, r5, r6, lr}
 800d73a:	ec55 4b10 	vmov	r4, r5, d0
 800d73e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d742:	4606      	mov	r6, r0
 800d744:	462b      	mov	r3, r5
 800d746:	b999      	cbnz	r1, 800d770 <scalbn+0x38>
 800d748:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d74c:	4323      	orrs	r3, r4
 800d74e:	d03f      	beq.n	800d7d0 <scalbn+0x98>
 800d750:	4b35      	ldr	r3, [pc, #212]	; (800d828 <scalbn+0xf0>)
 800d752:	4629      	mov	r1, r5
 800d754:	ee10 0a10 	vmov	r0, s0
 800d758:	2200      	movs	r2, #0
 800d75a:	f7f2 ff45 	bl	80005e8 <__aeabi_dmul>
 800d75e:	4b33      	ldr	r3, [pc, #204]	; (800d82c <scalbn+0xf4>)
 800d760:	429e      	cmp	r6, r3
 800d762:	4604      	mov	r4, r0
 800d764:	460d      	mov	r5, r1
 800d766:	da10      	bge.n	800d78a <scalbn+0x52>
 800d768:	a327      	add	r3, pc, #156	; (adr r3, 800d808 <scalbn+0xd0>)
 800d76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76e:	e01f      	b.n	800d7b0 <scalbn+0x78>
 800d770:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d774:	4291      	cmp	r1, r2
 800d776:	d10c      	bne.n	800d792 <scalbn+0x5a>
 800d778:	ee10 2a10 	vmov	r2, s0
 800d77c:	4620      	mov	r0, r4
 800d77e:	4629      	mov	r1, r5
 800d780:	f7f2 fd7c 	bl	800027c <__adddf3>
 800d784:	4604      	mov	r4, r0
 800d786:	460d      	mov	r5, r1
 800d788:	e022      	b.n	800d7d0 <scalbn+0x98>
 800d78a:	460b      	mov	r3, r1
 800d78c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d790:	3936      	subs	r1, #54	; 0x36
 800d792:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d796:	4296      	cmp	r6, r2
 800d798:	dd0d      	ble.n	800d7b6 <scalbn+0x7e>
 800d79a:	2d00      	cmp	r5, #0
 800d79c:	a11c      	add	r1, pc, #112	; (adr r1, 800d810 <scalbn+0xd8>)
 800d79e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7a2:	da02      	bge.n	800d7aa <scalbn+0x72>
 800d7a4:	a11c      	add	r1, pc, #112	; (adr r1, 800d818 <scalbn+0xe0>)
 800d7a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7aa:	a319      	add	r3, pc, #100	; (adr r3, 800d810 <scalbn+0xd8>)
 800d7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b0:	f7f2 ff1a 	bl	80005e8 <__aeabi_dmul>
 800d7b4:	e7e6      	b.n	800d784 <scalbn+0x4c>
 800d7b6:	1872      	adds	r2, r6, r1
 800d7b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d7bc:	428a      	cmp	r2, r1
 800d7be:	dcec      	bgt.n	800d79a <scalbn+0x62>
 800d7c0:	2a00      	cmp	r2, #0
 800d7c2:	dd08      	ble.n	800d7d6 <scalbn+0x9e>
 800d7c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d7c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d7cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d7d0:	ec45 4b10 	vmov	d0, r4, r5
 800d7d4:	bd70      	pop	{r4, r5, r6, pc}
 800d7d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d7da:	da08      	bge.n	800d7ee <scalbn+0xb6>
 800d7dc:	2d00      	cmp	r5, #0
 800d7de:	a10a      	add	r1, pc, #40	; (adr r1, 800d808 <scalbn+0xd0>)
 800d7e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7e4:	dac0      	bge.n	800d768 <scalbn+0x30>
 800d7e6:	a10e      	add	r1, pc, #56	; (adr r1, 800d820 <scalbn+0xe8>)
 800d7e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7ec:	e7bc      	b.n	800d768 <scalbn+0x30>
 800d7ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d7f2:	3236      	adds	r2, #54	; 0x36
 800d7f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d7f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	4b0c      	ldr	r3, [pc, #48]	; (800d830 <scalbn+0xf8>)
 800d800:	2200      	movs	r2, #0
 800d802:	e7d5      	b.n	800d7b0 <scalbn+0x78>
 800d804:	f3af 8000 	nop.w
 800d808:	c2f8f359 	.word	0xc2f8f359
 800d80c:	01a56e1f 	.word	0x01a56e1f
 800d810:	8800759c 	.word	0x8800759c
 800d814:	7e37e43c 	.word	0x7e37e43c
 800d818:	8800759c 	.word	0x8800759c
 800d81c:	fe37e43c 	.word	0xfe37e43c
 800d820:	c2f8f359 	.word	0xc2f8f359
 800d824:	81a56e1f 	.word	0x81a56e1f
 800d828:	43500000 	.word	0x43500000
 800d82c:	ffff3cb0 	.word	0xffff3cb0
 800d830:	3c900000 	.word	0x3c900000

0800d834 <with_errno>:
 800d834:	b570      	push	{r4, r5, r6, lr}
 800d836:	4604      	mov	r4, r0
 800d838:	460d      	mov	r5, r1
 800d83a:	4616      	mov	r6, r2
 800d83c:	f7fe fd2c 	bl	800c298 <__errno>
 800d840:	4629      	mov	r1, r5
 800d842:	6006      	str	r6, [r0, #0]
 800d844:	4620      	mov	r0, r4
 800d846:	bd70      	pop	{r4, r5, r6, pc}

0800d848 <xflow>:
 800d848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d84a:	4614      	mov	r4, r2
 800d84c:	461d      	mov	r5, r3
 800d84e:	b108      	cbz	r0, 800d854 <xflow+0xc>
 800d850:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d854:	e9cd 2300 	strd	r2, r3, [sp]
 800d858:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d85c:	4620      	mov	r0, r4
 800d85e:	4629      	mov	r1, r5
 800d860:	f7f2 fec2 	bl	80005e8 <__aeabi_dmul>
 800d864:	2222      	movs	r2, #34	; 0x22
 800d866:	b003      	add	sp, #12
 800d868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d86c:	f7ff bfe2 	b.w	800d834 <with_errno>

0800d870 <__math_uflow>:
 800d870:	b508      	push	{r3, lr}
 800d872:	2200      	movs	r2, #0
 800d874:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d878:	f7ff ffe6 	bl	800d848 <xflow>
 800d87c:	ec41 0b10 	vmov	d0, r0, r1
 800d880:	bd08      	pop	{r3, pc}

0800d882 <__math_oflow>:
 800d882:	b508      	push	{r3, lr}
 800d884:	2200      	movs	r2, #0
 800d886:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d88a:	f7ff ffdd 	bl	800d848 <xflow>
 800d88e:	ec41 0b10 	vmov	d0, r0, r1
 800d892:	bd08      	pop	{r3, pc}

0800d894 <__ieee754_sqrt>:
 800d894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d898:	ec55 4b10 	vmov	r4, r5, d0
 800d89c:	4e67      	ldr	r6, [pc, #412]	; (800da3c <__ieee754_sqrt+0x1a8>)
 800d89e:	43ae      	bics	r6, r5
 800d8a0:	ee10 0a10 	vmov	r0, s0
 800d8a4:	ee10 2a10 	vmov	r2, s0
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	462b      	mov	r3, r5
 800d8ac:	d10d      	bne.n	800d8ca <__ieee754_sqrt+0x36>
 800d8ae:	f7f2 fe9b 	bl	80005e8 <__aeabi_dmul>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	f7f2 fcdf 	bl	800027c <__adddf3>
 800d8be:	4604      	mov	r4, r0
 800d8c0:	460d      	mov	r5, r1
 800d8c2:	ec45 4b10 	vmov	d0, r4, r5
 800d8c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ca:	2d00      	cmp	r5, #0
 800d8cc:	dc0b      	bgt.n	800d8e6 <__ieee754_sqrt+0x52>
 800d8ce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d8d2:	4326      	orrs	r6, r4
 800d8d4:	d0f5      	beq.n	800d8c2 <__ieee754_sqrt+0x2e>
 800d8d6:	b135      	cbz	r5, 800d8e6 <__ieee754_sqrt+0x52>
 800d8d8:	f7f2 fcce 	bl	8000278 <__aeabi_dsub>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	460b      	mov	r3, r1
 800d8e0:	f7f2 ffac 	bl	800083c <__aeabi_ddiv>
 800d8e4:	e7eb      	b.n	800d8be <__ieee754_sqrt+0x2a>
 800d8e6:	1509      	asrs	r1, r1, #20
 800d8e8:	f000 808d 	beq.w	800da06 <__ieee754_sqrt+0x172>
 800d8ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8f0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d8f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8f8:	07c9      	lsls	r1, r1, #31
 800d8fa:	bf5c      	itt	pl
 800d8fc:	005b      	lslpl	r3, r3, #1
 800d8fe:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d902:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d906:	bf58      	it	pl
 800d908:	0052      	lslpl	r2, r2, #1
 800d90a:	2500      	movs	r5, #0
 800d90c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d910:	1076      	asrs	r6, r6, #1
 800d912:	0052      	lsls	r2, r2, #1
 800d914:	f04f 0e16 	mov.w	lr, #22
 800d918:	46ac      	mov	ip, r5
 800d91a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d91e:	eb0c 0001 	add.w	r0, ip, r1
 800d922:	4298      	cmp	r0, r3
 800d924:	bfde      	ittt	le
 800d926:	1a1b      	suble	r3, r3, r0
 800d928:	eb00 0c01 	addle.w	ip, r0, r1
 800d92c:	186d      	addle	r5, r5, r1
 800d92e:	005b      	lsls	r3, r3, #1
 800d930:	f1be 0e01 	subs.w	lr, lr, #1
 800d934:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d938:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d93c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d940:	d1ed      	bne.n	800d91e <__ieee754_sqrt+0x8a>
 800d942:	4674      	mov	r4, lr
 800d944:	2720      	movs	r7, #32
 800d946:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d94a:	4563      	cmp	r3, ip
 800d94c:	eb01 000e 	add.w	r0, r1, lr
 800d950:	dc02      	bgt.n	800d958 <__ieee754_sqrt+0xc4>
 800d952:	d113      	bne.n	800d97c <__ieee754_sqrt+0xe8>
 800d954:	4290      	cmp	r0, r2
 800d956:	d811      	bhi.n	800d97c <__ieee754_sqrt+0xe8>
 800d958:	2800      	cmp	r0, #0
 800d95a:	eb00 0e01 	add.w	lr, r0, r1
 800d95e:	da57      	bge.n	800da10 <__ieee754_sqrt+0x17c>
 800d960:	f1be 0f00 	cmp.w	lr, #0
 800d964:	db54      	blt.n	800da10 <__ieee754_sqrt+0x17c>
 800d966:	f10c 0801 	add.w	r8, ip, #1
 800d96a:	eba3 030c 	sub.w	r3, r3, ip
 800d96e:	4290      	cmp	r0, r2
 800d970:	bf88      	it	hi
 800d972:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d976:	1a12      	subs	r2, r2, r0
 800d978:	440c      	add	r4, r1
 800d97a:	46c4      	mov	ip, r8
 800d97c:	005b      	lsls	r3, r3, #1
 800d97e:	3f01      	subs	r7, #1
 800d980:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d984:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d988:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d98c:	d1dd      	bne.n	800d94a <__ieee754_sqrt+0xb6>
 800d98e:	4313      	orrs	r3, r2
 800d990:	d01b      	beq.n	800d9ca <__ieee754_sqrt+0x136>
 800d992:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800da40 <__ieee754_sqrt+0x1ac>
 800d996:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800da44 <__ieee754_sqrt+0x1b0>
 800d99a:	e9da 0100 	ldrd	r0, r1, [sl]
 800d99e:	e9db 2300 	ldrd	r2, r3, [fp]
 800d9a2:	f7f2 fc69 	bl	8000278 <__aeabi_dsub>
 800d9a6:	e9da 8900 	ldrd	r8, r9, [sl]
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	4640      	mov	r0, r8
 800d9b0:	4649      	mov	r1, r9
 800d9b2:	f7f3 f895 	bl	8000ae0 <__aeabi_dcmple>
 800d9b6:	b140      	cbz	r0, 800d9ca <__ieee754_sqrt+0x136>
 800d9b8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d9bc:	e9da 0100 	ldrd	r0, r1, [sl]
 800d9c0:	e9db 2300 	ldrd	r2, r3, [fp]
 800d9c4:	d126      	bne.n	800da14 <__ieee754_sqrt+0x180>
 800d9c6:	3501      	adds	r5, #1
 800d9c8:	463c      	mov	r4, r7
 800d9ca:	106a      	asrs	r2, r5, #1
 800d9cc:	0863      	lsrs	r3, r4, #1
 800d9ce:	07e9      	lsls	r1, r5, #31
 800d9d0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d9d4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d9d8:	bf48      	it	mi
 800d9da:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d9de:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d9e2:	461c      	mov	r4, r3
 800d9e4:	e76d      	b.n	800d8c2 <__ieee754_sqrt+0x2e>
 800d9e6:	0ad3      	lsrs	r3, r2, #11
 800d9e8:	3815      	subs	r0, #21
 800d9ea:	0552      	lsls	r2, r2, #21
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d0fa      	beq.n	800d9e6 <__ieee754_sqrt+0x152>
 800d9f0:	02dc      	lsls	r4, r3, #11
 800d9f2:	d50a      	bpl.n	800da0a <__ieee754_sqrt+0x176>
 800d9f4:	f1c1 0420 	rsb	r4, r1, #32
 800d9f8:	fa22 f404 	lsr.w	r4, r2, r4
 800d9fc:	1e4d      	subs	r5, r1, #1
 800d9fe:	408a      	lsls	r2, r1
 800da00:	4323      	orrs	r3, r4
 800da02:	1b41      	subs	r1, r0, r5
 800da04:	e772      	b.n	800d8ec <__ieee754_sqrt+0x58>
 800da06:	4608      	mov	r0, r1
 800da08:	e7f0      	b.n	800d9ec <__ieee754_sqrt+0x158>
 800da0a:	005b      	lsls	r3, r3, #1
 800da0c:	3101      	adds	r1, #1
 800da0e:	e7ef      	b.n	800d9f0 <__ieee754_sqrt+0x15c>
 800da10:	46e0      	mov	r8, ip
 800da12:	e7aa      	b.n	800d96a <__ieee754_sqrt+0xd6>
 800da14:	f7f2 fc32 	bl	800027c <__adddf3>
 800da18:	e9da 8900 	ldrd	r8, r9, [sl]
 800da1c:	4602      	mov	r2, r0
 800da1e:	460b      	mov	r3, r1
 800da20:	4640      	mov	r0, r8
 800da22:	4649      	mov	r1, r9
 800da24:	f7f3 f852 	bl	8000acc <__aeabi_dcmplt>
 800da28:	b120      	cbz	r0, 800da34 <__ieee754_sqrt+0x1a0>
 800da2a:	1ca0      	adds	r0, r4, #2
 800da2c:	bf08      	it	eq
 800da2e:	3501      	addeq	r5, #1
 800da30:	3402      	adds	r4, #2
 800da32:	e7ca      	b.n	800d9ca <__ieee754_sqrt+0x136>
 800da34:	3401      	adds	r4, #1
 800da36:	f024 0401 	bic.w	r4, r4, #1
 800da3a:	e7c6      	b.n	800d9ca <__ieee754_sqrt+0x136>
 800da3c:	7ff00000 	.word	0x7ff00000
 800da40:	20000068 	.word	0x20000068
 800da44:	20000070 	.word	0x20000070

0800da48 <_init>:
 800da48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da4a:	bf00      	nop
 800da4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da4e:	bc08      	pop	{r3}
 800da50:	469e      	mov	lr, r3
 800da52:	4770      	bx	lr

0800da54 <_fini>:
 800da54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da56:	bf00      	nop
 800da58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da5a:	bc08      	pop	{r3}
 800da5c:	469e      	mov	lr, r3
 800da5e:	4770      	bx	lr
